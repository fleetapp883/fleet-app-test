{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anupp\\\\Downloads\\\\fleet-billing-app\\\\fleet-billing-app\\\\src\\\\components\\\\UploadForm.js\";\n// // import React, { useState } from \"react\";\n// // import * as XLSX from \"xlsx\";\n\n// // const UploadForm = ({ onDataParsed }) => {\n// //   const [filename, setFilename] = useState(\"\");\n\n// //   const handleFileUpload = (e) => {\n// //     const file = e.target.files[0];\n// //     setFilename(file.name);\n// //     const reader = new FileReader();\n// //     reader.onload = (evt) => {\n// //       const bstr = evt.target.result;\n// //       const wb = XLSX.read(bstr, { type: \"binary\" });\n// //       const wsname = wb.SheetNames[0];\n// //       const ws = wb.Sheets[wsname];\n// //       const data = XLSX.utils.sheet_to_json(ws);\n// //       onDataParsed(data);\n// //     };\n// //     reader.readAsBinaryString(file);\n// //   };\n\n// //   return (\n// //     <div style={{ marginTop: 20 }}>\n// //       <h4>Upload Excel File</h4>\n// //       <input type=\"file\" accept=\".xlsx, .xls\" onChange={handleFileUpload} />\n// //       {filename && <p>Uploaded: {filename}</p>}\n// //     </div>\n// //   );\n// // };\n// // export default UploadForm;\n\n// // UploadForm.js\n// import React, { useState } from \"react\";\n// import { addDoc, collection, doc, runTransaction } from \"firebase/firestore\";\n// import * as XLSX from \"xlsx\";\n// import { db, auth } from \"../firebase\";\n\n// const labelToKey = {\n//   \"Indent No\": \"IndentNo\", \"Indent Date\": \"IndentDate\", \"Placement Date\": \"PlacementDate\",\n//   \"Customer\": \"Customer\", \"Customer Type\": \"CustomerType\", \"Customer Billing Type\": \"CustomerBillingType\",\n//   \"Sourcing (Vendor)\": \"SourcingVendor\", \"Vendor Type\": \"VendorType\", \"Vendor Billing Type\": \"VendorBillingType\",\n//   \"Origin\": \"Origin\", \"Destination\": \"Destination\", \"Vehicle No\": \"VehicleNo\", \"Vehicle type\": \"VehicleType\",\n//   \"Driver No\": \"DriverNo\", \"Dispatch Date\": \"DispatchDate\", \"Deliver Date\": \"DeliverDate\",\n//   \"Offloading Date\": \"OffloadingDate\", \"E-way Bill\": \"EwayBill\", \"LR No.\": \"LRNo\",\n//   \"Soft Copy POD Rec\": \"SoftCopyPODRec\", \"Hard Copy POD Rec\": \"HardCopyPODRec\",\n//   \"Customer -Sale rate\": \"CustomerSaleRate\", \"Advance to be Paid\": \"AdvanceToBePaid\",\n//   \"Advance Rec\": \"AdvanceRec\", \"Advance UTR\": \"AdvanceUTR\", \"Advance Rec-Date\": \"AdvanceRecDate\",\n//   \"Balance Pending\": \"BalancePending\", \"Detention Charges\": \"DetentionCharges\",\n//   \"Loading/Unloading Charges\": \"LoadingUnloadingCharges\", \"Miscellaneous Charges.\": \"MiscCharges\",\n//   \"Processing Charges\": \"ProcessingCharges\", \"Net Balance\": \"NetBalance\",\n//   \"Balance Rec Amount\": \"BalanceRecAmount\", \"Balance UTR\": \"BalanceUTR\", \"Balance Rec Date\": \"BalanceRecDate\",\n//   \"Remaining Balance\": \"RemainingBalance\", \"Remaining Balance UTR\": \"RemainingBalanceUTR\",\n//   \"Remaining Balance Date\": \"RemainingBalanceDate\", \"Supplier Buy Rate\": \"SupplierBuyRate\",\n//   \"Supplier Advance Pay\": \"SupplierAdvancePay\", \"Supplier Advance Paid\": \"SupplierAdvancePaid\",\n//   \"Supplier Mis Charges\": \"SupplierMisCharges\", \"Supplier Invoice No.\": \"SupplierInvoiceNo\",\n//   \"Supplier Advance UTR\": \"SupplierAdvanceUTR\", \"Supplier Advance Pay-Date\": \"SupplierAdvancePayDate\",\n//   \"Supplier Balance Pending\": \"SupplierBalancePending\", \"Supplier Balance Paid Amount\": \"SupplierBalancePaidAmount\",\n//   \"Supplier Balance Paid UTR\": \"SupplierBalancePaidUTR\", \"Supplier Balance Paid Date\": \"SupplierBalancePaidDate\",\n//   \"Remaining Supplier Amount\": \"RemainingSupplierAmount\", \"POD Rec Date\": \"PODRecDate\",\n//   \"POD Send to Customer Date\": \"PODSendToCustomerDate\", \"POD Docket No.\": \"PODDocketNo\",\n//   \"POD Rec By Customer\": \"PODRecByCustomer\", \"POD Deduction If any\": \"PODDeductionIfAny\",\n//   \"Gross Profit\": \"GrossProfit\", \"Bad Debts\": \"BadDebts\", \"Net Profit\": \"NetProfit\"\n// };\n\n// const dateFields = [\n//   \"Indent Date\", \"Placement Date\", \"Dispatch Date\", \"Deliver Date\", \"Offloading Date\",\n//   \"Soft Copy POD Rec\", \"Hard Copy POD Rec\", \"Advance Rec-Date\", \"Balance Rec Date\",\n//   \"Remaining Balance Date\", \"Supplier Advance Pay-Date\", \"Supplier Balance Paid Date\",\n//   \"POD Rec Date\", \"POD Send to Customer Date\", \"POD Rec By Customer\"\n// ];\n\n// const UploadForm = () => {\n//   const [previewData, setPreviewData] = useState([]);\n//   const [statusMap, setStatusMap] = useState({});\n//   const [fleetNumbers, setFleetNumbers] = useState({});\n\n//   const parseExcel = (file) => {\n//     if (!file) {\n//       alert(\"No file selected\");\n//       return;\n//     }\n//     alert(\"File selected: \" + file.name);\n\n//     const reader = new FileReader();\n//     reader.onload = (e) => {\n//       alert(\"File read started\");\n\n//       const workbook = XLSX.read(e.target.result, { type: \"binary\" });\n//       const sheetName = workbook.SheetNames[0];\n//       alert(\"Reading sheet: \" + sheetName);\n//       const sheet = workbook.Sheets[sheetName];\n//       const json = XLSX.utils.sheet_to_json(sheet, { header: 1 });\n//       console.log(\"Raw Sheet JSON:\", json);\n//       alert(\"Total rows in sheet (incl header): \" + json.length);\n\n//       if (json.length < 2) {\n//         alert(\"Sheet seems empty or header is missing\");\n//         return;\n//       }\n\n//       const headers = json[1];\n//       alert(\"Detected headers: \" + headers.join(\", \"));\n\n//       const rows = json.slice(2).map((row, rowIndex) => {\n//         const obj = {};\n//         headers.forEach((h, j) => {\n//           const cleanHeader = h?.trim();\n//           const key = labelToKey[cleanHeader];\n//           if (!key) return;\n\n//           const cell = row[j];\n//           if (typeof cell === \"number\" && dateFields.includes(cleanHeader)) {\n//             const d = XLSX.SSF.parse_date_code(cell);\n//             if (d) {\n//               const day = String(d.d).padStart(2, '0');\n//               const month = String(d.m).padStart(2, '0');\n//               const year = d.y;\n//               obj[key] = `${day}-${month}-${year}`;\n//             }\n//           } else {\n//             obj[key] = String(cell ?? \"\").trim();\n//           }\n//         });\n//         console.log(`Row ${rowIndex + 2}:`, obj);\n//         return obj;\n//       });\n\n//       alert(\"Parsed \" + rows.length + \" data rows\");\n//       setPreviewData(rows);\n//       setStatusMap({});\n//       setFleetNumbers({});\n//     };\n\n//     reader.onerror = (err) => {\n//       alert(\"Failed to read file: \" + err);\n//       console.error(\"FileReader error:\", err);\n//     };\n\n//     reader.readAsBinaryString(file);\n//   };\n\n//   const getNextFleetNumber = async () => {\n//     const counterRef = doc(db, \"Counters\", \"fleet_counter\");\n//     const newFleetNo = await runTransaction(db, async (transaction) => {\n//       const docSnap = await transaction.get(counterRef);\n//       if (!docSnap.exists()) throw new Error(\"Counter doc missing\");\n//       const current = docSnap.data().nextFleetNo || 1;\n//       transaction.update(counterRef, { nextFleetNo: current + 1 });\n//       return current;\n//     });\n//     return newFleetNo;\n//   };\n\n//   const saveRow = async (row, i) => {\n//     const user = auth.currentUser;\n//     try {\n//       const newFleetNo = await getNextFleetNumber();\n//       const enriched = {\n//         ...row,\n//         fleetNumber: newFleetNo,\n//         createdAt: new Date(),\n//         createdBy: user?.email || \"anonymous\",\n//         isCurrent: true,\n//         versionDate: new Date(),\n//       };\n//       await addDoc(collection(db, \"fleet_records\"), enriched);\n//       setStatusMap(prev => ({ ...prev, [i]: \"✅ Saved\" }));\n//       setFleetNumbers(prev => ({ ...prev, [i]: newFleetNo }));\n//     } catch (err) {\n//       setStatusMap(prev => ({ ...prev, [i]: \"❌ Failed\" }));\n//     }\n//   };\n\n//   const saveAll = async () => {\n//     for (let i = 0; i < previewData.length; i++) {\n//       if (!statusMap[i]) await saveRow(previewData[i], i);\n//     }\n//   };\n\n//   const handleEdit = (i, key, value) => {\n//     const updated = [...previewData];\n//     updated[i][key] = value;\n//     setPreviewData(updated);\n//   };\n\n//   const deleteRow = (i) => {\n//     setPreviewData(previewData.filter((_, idx) => idx !== i));\n//     const s = { ...statusMap }; delete s[i];\n//     const f = { ...fleetNumbers }; delete f[i];\n//     setStatusMap(s);\n//     setFleetNumbers(f);\n//   };\n\n//   const resetTable = () => {\n//     setPreviewData([]);\n//     setStatusMap({});\n//     setFleetNumbers({});\n//   };\n\n//   return (\n//     <div style={{ marginBottom: 40 }}>\n//       <h4>Upload Excel & Preview</h4>\n//       <input\n//         type=\"file\"\n//         accept=\".xlsx, .xls\"\n//         onChange={(e) => {\n//           const file = e.target.files?.[0];\n//           if (file) {\n//             parseExcel(file);\n//             setTimeout(() => {\n//               e.target.value = \"\";\n//             }, 100);\n//           } else {\n//             alert(\"No file selected.\");\n//           }\n//         }}\n//       />\n//       {previewData.length > 0 && (\n//         <>\n//           <h5 style={{ marginTop: 20 }}>📄 Preview Table (Excel Upload)</h5>\n//           <button onClick={saveAll}>💾 Save All</button>\n//           <button onClick={resetTable} style={{ marginLeft: 10, color: \"red\" }}>🧹 Clear</button>\n//           <div className=\"table-scroll-x\">\n//             <table>\n//               <thead>\n//                 <tr>\n//                   <th>Fleet Number</th>\n//                   {Object.keys(previewData[0]).map(key => <th key={key}>{key}</th>)}\n//                   <th>Status</th>\n//                   <th>Action</th>\n//                 </tr>\n//               </thead>\n//               <tbody>\n//                 {previewData.map((row, i) => (\n//                   <tr key={i}>\n//                     <td>{fleetNumbers[i] || \"\"}</td>\n//                     {Object.keys(row).map((key) => (\n//                       <td key={key}>\n//                         <input\n//                           type=\"text\"\n//                           value={row[key]}\n//                           onChange={(e) => handleEdit(i, key, e.target.value)}\n//                           style={{ width: \"120px\" }}\n//                         />\n//                       </td>\n//                     ))}\n//                     <td>{statusMap[i] || \"⏳ Pending\"}</td>\n//                     <td>\n//                       <button onClick={() => saveRow(row, i)} disabled={statusMap[i] === \"✅ Saved\"}>Save</button>\n//                       <button onClick={() => deleteRow(i)} style={{ marginLeft: 6, color: \"red\" }}>Delete</button>\n//                     </td>\n//                   </tr>\n//                 ))}\n//               </tbody>\n//             </table>\n//           </div>\n//         </>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default UploadForm;\n\nimport React, { useState } from \"react\";\nimport { addDoc, collection, doc, runTransaction } from \"firebase/firestore\";\nimport * as XLSX from \"xlsx\";\nimport { db, auth } from \"../firebase\";\nconst labelToKey = {\n  \"Indent No\": \"IndentNo\",\n  \"Indent Date\": \"IndentDate\",\n  \"Placement Date\": \"PlacementDate\",\n  \"Customer\": \"Customer\",\n  \"Customer Type\": \"CustomerType\",\n  \"Customer Billing Type\": \"CustomerBillingType\",\n  \"Sourcing (Vendor)\": \"SourcingVendor\",\n  \"Vendor Type\": \"VendorType\",\n  \"Vendor Billing Type\": \"VendorBillingType\",\n  \"Origin\": \"Origin\",\n  \"Destination\": \"Destination\",\n  \"Vehicle No\": \"VehicleNo\",\n  \"Vehicle type\": \"VehicleType\",\n  \"Driver No\": \"DriverNo\",\n  \"Dispatch Date\": \"DispatchDate\",\n  \"Deliver Date\": \"DeliverDate\",\n  \"Offloading Date\": \"OffloadingDate\",\n  \"E-way Bill\": \"EwayBill\",\n  \"LR No.\": \"LRNo\",\n  \"Soft Copy POD Rec\": \"SoftCopyPODRec\",\n  \"Hard Copy POD Rec\": \"HardCopyPODRec\",\n  \"Customer -Sale rate\": \"CustomerSaleRate\",\n  \"Advance to be Paid\": \"AdvanceToBePaid\",\n  \"Advance Rec\": \"AdvanceRec\",\n  \"Advance UTR\": \"AdvanceUTR\",\n  \"Advance Rec-Date\": \"AdvanceRecDate\",\n  \"Balance Pending\": \"BalancePending\",\n  \"Detention Charges\": \"DetentionCharges\",\n  \"Loading/Unloading Charges\": \"LoadingUnloadingCharges\",\n  \"Miscellaneous Charges.\": \"MiscCharges\",\n  \"Processing Charges\": \"ProcessingCharges\",\n  \"Net Balance\": \"NetBalance\",\n  \"Balance Rec Amount\": \"BalanceRecAmount\",\n  \"Balance UTR\": \"BalanceUTR\",\n  \"Balance Rec Date\": \"BalanceRecDate\",\n  \"Remaining Balance\": \"RemainingBalance\",\n  \"Remaining Balance UTR\": \"RemainingBalanceUTR\",\n  \"Remaining Balance Date\": \"RemainingBalanceDate\",\n  \"Supplier Buy Rate\": \"SupplierBuyRate\",\n  \"Supplier Advance Pay\": \"SupplierAdvancePay\",\n  \"Supplier Advance Paid\": \"SupplierAdvancePaid\",\n  \"Supplier Mis Charges\": \"SupplierMisCharges\",\n  \"Supplier Invoice No.\": \"SupplierInvoiceNo\",\n  \"Supplier Advance UTR\": \"SupplierAdvanceUTR\",\n  \"Supplier Advance Pay-Date\": \"SupplierAdvancePayDate\",\n  \"Supplier Balance Pending\": \"SupplierBalancePending\",\n  \"Supplier Balance Paid Amount\": \"SupplierBalancePaidAmount\",\n  \"Supplier Balance Paid UTR\": \"SupplierBalancePaidUTR\",\n  \"Supplier Balance Paid Date\": \"SupplierBalancePaidDate\",\n  \"Remaining Supplier Amount\": \"RemainingSupplierAmount\",\n  \"POD Rec Date\": \"PODRecDate\",\n  \"POD Send to Customer Date\": \"PODSendToCustomerDate\",\n  \"POD Docket No.\": \"PODDocketNo\",\n  \"POD Rec By Customer\": \"PODRecByCustomer\",\n  \"POD Deduction If any\": \"PODDeductionIfAny\",\n  \"Gross Profit\": \"GrossProfit\",\n  \"Bad Debts\": \"BadDebts\",\n  \"Net Profit\": \"NetProfit\"\n};\nconst dateFields = [\"Indent Date\", \"Placement Date\", \"Dispatch Date\", \"Deliver Date\", \"Offloading Date\", \"Soft Copy POD Rec\", \"Hard Copy POD Rec\", \"Advance Rec-Date\", \"Balance Rec Date\", \"Remaining Balance Date\", \"Supplier Advance Pay-Date\", \"Supplier Balance Paid Date\", \"POD Rec Date\", \"POD Send to Customer Date\", \"POD Rec By Customer\"];\nconst UploadForm = () => {\n  const [previewData, setPreviewData] = useState([]);\n  const [statusMap, setStatusMap] = useState({});\n  const [fleetNumbers, setFleetNumbers] = useState({});\n  const normalize = label => (label || \"\").replace(/[.\\s]+/g, \" \").trim().toLowerCase();\n  const getMappedKey = label => {\n    var _Object$entries$find;\n    const normalizedLabel = normalize(label);\n    return (_Object$entries$find = Object.entries(labelToKey).find(([rawLabel]) => normalize(rawLabel) === normalizedLabel)) === null || _Object$entries$find === void 0 ? void 0 : _Object$entries$find[1];\n  };\n  const parseExcel = file => {\n    if (!file) {\n      alert(\"No file selected\");\n      return;\n    }\n    alert(\"File selected: \" + file.name);\n    const reader = new FileReader();\n    reader.onload = e => {\n      alert(\"File read started\");\n      const workbook = XLSX.read(e.target.result, {\n        type: \"binary\"\n      });\n      const sheetName = workbook.SheetNames[0];\n      alert(\"Reading sheet: \" + sheetName);\n      const sheet = workbook.Sheets[sheetName];\n      const json = XLSX.utils.sheet_to_json(sheet, {\n        header: 1\n      });\n      console.log(\"🔎 Debug Row 0 (Excel Row 1):\", json[0]);\n      console.log(\"🔎 Debug Row 1 (Excel Row 2):\", json[1]);\n      console.log(\"🔎 Debug Row 2 (Excel Row 3):\", json[2]);\n      console.log(\"🔎 Debug Row 3 (Excel Row 4):\", json[3]);\n      alert(\"Total rows in sheet (incl header): \" + json.length);\n      console.log(\"Raw Sheet JSON:\", json);\n      if (json.length < 2) {\n        alert(\"Sheet seems empty or header is missing\");\n        return;\n      }\n      const headers = json[1];\n      alert(\"Detected headers: \" + headers.join(\", \"));\n      const rows = json.slice(2).map((row, rowIndex) => {\n        const obj = {};\n        for (let j = 0; j < headers.length; j++) {\n          const header = headers[j];\n          if (!header) continue; // skip undefined or blank headers\n\n          const key = getMappedKey(header);\n          if (!key) continue;\n          const cell = row[j];\n          const isDate = dateFields.some(df => normalize(df) === normalize(header));\n          if (typeof cell === \"number\" && isDate) {\n            const d = XLSX.SSF.parse_date_code(cell);\n            if (d) {\n              const day = String(d.d).padStart(2, '0');\n              const month = String(d.m).padStart(2, '0');\n              const year = d.y;\n              obj[key] = `${day}-${month}-${year}`;\n            }\n          } else {\n            obj[key] = String(cell !== null && cell !== void 0 ? cell : \"\").trim();\n          }\n        }\n        console.log(`Row ${rowIndex + 2}:`, obj);\n        return obj;\n      });\n      alert(\"Parsed \" + rows.length + \" data rows\");\n      setPreviewData(rows);\n      setStatusMap({});\n      setFleetNumbers({});\n    };\n    reader.onerror = err => {\n      alert(\"Failed to read file: \" + err);\n      console.error(\"FileReader error:\", err);\n    };\n    reader.readAsBinaryString(file);\n  };\n  const getNextFleetNumber = async () => {\n    const counterRef = doc(db, \"Counters\", \"fleet_counter\");\n    const newFleetNo = await runTransaction(db, async transaction => {\n      const docSnap = await transaction.get(counterRef);\n      if (!docSnap.exists()) throw new Error(\"Counter doc missing\");\n      const current = docSnap.data().nextFleetNo || 1;\n      transaction.update(counterRef, {\n        nextFleetNo: current + 1\n      });\n      return current;\n    });\n    return newFleetNo;\n  };\n  const saveRow = async (row, i) => {\n    const user = auth.currentUser;\n    try {\n      const newFleetNo = await getNextFleetNumber();\n      const enriched = {\n        ...row,\n        fleetNumber: newFleetNo,\n        createdAt: new Date(),\n        createdBy: (user === null || user === void 0 ? void 0 : user.email) || \"anonymous\",\n        isCurrent: true,\n        versionDate: new Date()\n      };\n      await addDoc(collection(db, \"fleet_records\"), enriched);\n      setStatusMap(prev => ({\n        ...prev,\n        [i]: \"✅ Saved\"\n      }));\n      setFleetNumbers(prev => ({\n        ...prev,\n        [i]: newFleetNo\n      }));\n    } catch (err) {\n      setStatusMap(prev => ({\n        ...prev,\n        [i]: \"❌ Failed\"\n      }));\n    }\n  };\n  const saveAll = async () => {\n    for (let i = 0; i < previewData.length; i++) {\n      if (!statusMap[i]) await saveRow(previewData[i], i);\n    }\n  };\n  const handleEdit = (i, key, value) => {\n    const updated = [...previewData];\n    updated[i][key] = value;\n    setPreviewData(updated);\n  };\n  const deleteRow = i => {\n    setPreviewData(previewData.filter((_, idx) => idx !== i));\n    const s = {\n      ...statusMap\n    };\n    delete s[i];\n    const f = {\n      ...fleetNumbers\n    };\n    delete f[i];\n    setStatusMap(s);\n    setFleetNumbers(f);\n  };\n  const resetTable = () => {\n    setPreviewData([]);\n    setStatusMap({});\n    setFleetNumbers({});\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      marginBottom: 40\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 459,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 460,\n      columnNumber: 7\n    }\n  }, \"Upload Excel & Preview\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"file\",\n    accept: \".xlsx, .xls\",\n    onChange: e => {\n      var _e$target$files;\n      const file = (_e$target$files = e.target.files) === null || _e$target$files === void 0 ? void 0 : _e$target$files[0];\n      if (file) {\n        parseExcel(file);\n        setTimeout(() => {\n          e.target.value = \"\";\n        }, 100);\n      } else {\n        alert(\"No file selected.\");\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 461,\n      columnNumber: 7\n    }\n  }), previewData.length > 0 && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h5\", {\n    style: {\n      marginTop: 20\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 478,\n      columnNumber: 11\n    }\n  }, \"\\uD83D\\uDCC4 Preview Table (Excel Upload)\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: saveAll,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 479,\n      columnNumber: 11\n    }\n  }, \"\\uD83D\\uDCBE Save All\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: resetTable,\n    style: {\n      marginLeft: 10,\n      color: \"red\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 480,\n      columnNumber: 11\n    }\n  }, \"\\uD83E\\uDDF9 Clear\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"table-scroll-x\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 481,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"table\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 482,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 483,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 484,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 485,\n      columnNumber: 19\n    }\n  }, \"Fleet Number\"), Object.keys(previewData[0]).map(key => /*#__PURE__*/React.createElement(\"th\", {\n    key: key,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 486,\n      columnNumber: 59\n    }\n  }, key)), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 487,\n      columnNumber: 19\n    }\n  }, \"Status\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 488,\n      columnNumber: 19\n    }\n  }, \"Action\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 491,\n      columnNumber: 15\n    }\n  }, previewData.map((row, i) => /*#__PURE__*/React.createElement(\"tr\", {\n    key: i,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 493,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 494,\n      columnNumber: 21\n    }\n  }, fleetNumbers[i] || \"\"), Object.keys(row).map(key => /*#__PURE__*/React.createElement(\"td\", {\n    key: key,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 496,\n      columnNumber: 23\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: row[key],\n    onChange: e => handleEdit(i, key, e.target.value),\n    style: {\n      width: \"120px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 497,\n      columnNumber: 25\n    }\n  }))), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 505,\n      columnNumber: 21\n    }\n  }, statusMap[i] || \"⏳ Pending\"), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 506,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => saveRow(row, i),\n    disabled: statusMap[i] === \"✅ Saved\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 507,\n      columnNumber: 23\n    }\n  }, \"Save\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => deleteRow(i),\n    style: {\n      marginLeft: 6,\n      color: \"red\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 508,\n      columnNumber: 23\n    }\n  }, \"Delete\")))))))));\n};\nexport default UploadForm;","map":{"version":3,"names":["React","useState","addDoc","collection","doc","runTransaction","XLSX","db","auth","labelToKey","dateFields","UploadForm","previewData","setPreviewData","statusMap","setStatusMap","fleetNumbers","setFleetNumbers","normalize","label","replace","trim","toLowerCase","getMappedKey","_Object$entries$find","normalizedLabel","Object","entries","find","rawLabel","parseExcel","file","alert","name","reader","FileReader","onload","e","workbook","read","target","result","type","sheetName","SheetNames","sheet","Sheets","json","utils","sheet_to_json","header","console","log","length","headers","join","rows","slice","map","row","rowIndex","obj","j","key","cell","isDate","some","df","d","SSF","parse_date_code","day","String","padStart","month","m","year","y","onerror","err","error","readAsBinaryString","getNextFleetNumber","counterRef","newFleetNo","transaction","docSnap","get","exists","Error","current","data","nextFleetNo","update","saveRow","i","user","currentUser","enriched","fleetNumber","createdAt","Date","createdBy","email","isCurrent","versionDate","prev","saveAll","handleEdit","value","updated","deleteRow","filter","_","idx","s","f","resetTable","createElement","style","marginBottom","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","accept","onChange","_e$target$files","files","setTimeout","Fragment","marginTop","onClick","marginLeft","color","className","keys","width","disabled"],"sources":["C:/Users/anupp/Downloads/fleet-billing-app/fleet-billing-app/src/components/UploadForm.js"],"sourcesContent":["// // import React, { useState } from \"react\";\r\n// // import * as XLSX from \"xlsx\";\r\n\r\n// // const UploadForm = ({ onDataParsed }) => {\r\n// //   const [filename, setFilename] = useState(\"\");\r\n\r\n// //   const handleFileUpload = (e) => {\r\n// //     const file = e.target.files[0];\r\n// //     setFilename(file.name);\r\n// //     const reader = new FileReader();\r\n// //     reader.onload = (evt) => {\r\n// //       const bstr = evt.target.result;\r\n// //       const wb = XLSX.read(bstr, { type: \"binary\" });\r\n// //       const wsname = wb.SheetNames[0];\r\n// //       const ws = wb.Sheets[wsname];\r\n// //       const data = XLSX.utils.sheet_to_json(ws);\r\n// //       onDataParsed(data);\r\n// //     };\r\n// //     reader.readAsBinaryString(file);\r\n// //   };\r\n\r\n// //   return (\r\n// //     <div style={{ marginTop: 20 }}>\r\n// //       <h4>Upload Excel File</h4>\r\n// //       <input type=\"file\" accept=\".xlsx, .xls\" onChange={handleFileUpload} />\r\n// //       {filename && <p>Uploaded: {filename}</p>}\r\n// //     </div>\r\n// //   );\r\n// // };\r\n// // export default UploadForm;\r\n\r\n// // UploadForm.js\r\n// import React, { useState } from \"react\";\r\n// import { addDoc, collection, doc, runTransaction } from \"firebase/firestore\";\r\n// import * as XLSX from \"xlsx\";\r\n// import { db, auth } from \"../firebase\";\r\n\r\n// const labelToKey = {\r\n//   \"Indent No\": \"IndentNo\", \"Indent Date\": \"IndentDate\", \"Placement Date\": \"PlacementDate\",\r\n//   \"Customer\": \"Customer\", \"Customer Type\": \"CustomerType\", \"Customer Billing Type\": \"CustomerBillingType\",\r\n//   \"Sourcing (Vendor)\": \"SourcingVendor\", \"Vendor Type\": \"VendorType\", \"Vendor Billing Type\": \"VendorBillingType\",\r\n//   \"Origin\": \"Origin\", \"Destination\": \"Destination\", \"Vehicle No\": \"VehicleNo\", \"Vehicle type\": \"VehicleType\",\r\n//   \"Driver No\": \"DriverNo\", \"Dispatch Date\": \"DispatchDate\", \"Deliver Date\": \"DeliverDate\",\r\n//   \"Offloading Date\": \"OffloadingDate\", \"E-way Bill\": \"EwayBill\", \"LR No.\": \"LRNo\",\r\n//   \"Soft Copy POD Rec\": \"SoftCopyPODRec\", \"Hard Copy POD Rec\": \"HardCopyPODRec\",\r\n//   \"Customer -Sale rate\": \"CustomerSaleRate\", \"Advance to be Paid\": \"AdvanceToBePaid\",\r\n//   \"Advance Rec\": \"AdvanceRec\", \"Advance UTR\": \"AdvanceUTR\", \"Advance Rec-Date\": \"AdvanceRecDate\",\r\n//   \"Balance Pending\": \"BalancePending\", \"Detention Charges\": \"DetentionCharges\",\r\n//   \"Loading/Unloading Charges\": \"LoadingUnloadingCharges\", \"Miscellaneous Charges.\": \"MiscCharges\",\r\n//   \"Processing Charges\": \"ProcessingCharges\", \"Net Balance\": \"NetBalance\",\r\n//   \"Balance Rec Amount\": \"BalanceRecAmount\", \"Balance UTR\": \"BalanceUTR\", \"Balance Rec Date\": \"BalanceRecDate\",\r\n//   \"Remaining Balance\": \"RemainingBalance\", \"Remaining Balance UTR\": \"RemainingBalanceUTR\",\r\n//   \"Remaining Balance Date\": \"RemainingBalanceDate\", \"Supplier Buy Rate\": \"SupplierBuyRate\",\r\n//   \"Supplier Advance Pay\": \"SupplierAdvancePay\", \"Supplier Advance Paid\": \"SupplierAdvancePaid\",\r\n//   \"Supplier Mis Charges\": \"SupplierMisCharges\", \"Supplier Invoice No.\": \"SupplierInvoiceNo\",\r\n//   \"Supplier Advance UTR\": \"SupplierAdvanceUTR\", \"Supplier Advance Pay-Date\": \"SupplierAdvancePayDate\",\r\n//   \"Supplier Balance Pending\": \"SupplierBalancePending\", \"Supplier Balance Paid Amount\": \"SupplierBalancePaidAmount\",\r\n//   \"Supplier Balance Paid UTR\": \"SupplierBalancePaidUTR\", \"Supplier Balance Paid Date\": \"SupplierBalancePaidDate\",\r\n//   \"Remaining Supplier Amount\": \"RemainingSupplierAmount\", \"POD Rec Date\": \"PODRecDate\",\r\n//   \"POD Send to Customer Date\": \"PODSendToCustomerDate\", \"POD Docket No.\": \"PODDocketNo\",\r\n//   \"POD Rec By Customer\": \"PODRecByCustomer\", \"POD Deduction If any\": \"PODDeductionIfAny\",\r\n//   \"Gross Profit\": \"GrossProfit\", \"Bad Debts\": \"BadDebts\", \"Net Profit\": \"NetProfit\"\r\n// };\r\n\r\n// const dateFields = [\r\n//   \"Indent Date\", \"Placement Date\", \"Dispatch Date\", \"Deliver Date\", \"Offloading Date\",\r\n//   \"Soft Copy POD Rec\", \"Hard Copy POD Rec\", \"Advance Rec-Date\", \"Balance Rec Date\",\r\n//   \"Remaining Balance Date\", \"Supplier Advance Pay-Date\", \"Supplier Balance Paid Date\",\r\n//   \"POD Rec Date\", \"POD Send to Customer Date\", \"POD Rec By Customer\"\r\n// ];\r\n\r\n// const UploadForm = () => {\r\n//   const [previewData, setPreviewData] = useState([]);\r\n//   const [statusMap, setStatusMap] = useState({});\r\n//   const [fleetNumbers, setFleetNumbers] = useState({});\r\n\r\n//   const parseExcel = (file) => {\r\n//     if (!file) {\r\n//       alert(\"No file selected\");\r\n//       return;\r\n//     }\r\n//     alert(\"File selected: \" + file.name);\r\n\r\n//     const reader = new FileReader();\r\n//     reader.onload = (e) => {\r\n//       alert(\"File read started\");\r\n\r\n//       const workbook = XLSX.read(e.target.result, { type: \"binary\" });\r\n//       const sheetName = workbook.SheetNames[0];\r\n//       alert(\"Reading sheet: \" + sheetName);\r\n//       const sheet = workbook.Sheets[sheetName];\r\n//       const json = XLSX.utils.sheet_to_json(sheet, { header: 1 });\r\n//       console.log(\"Raw Sheet JSON:\", json);\r\n//       alert(\"Total rows in sheet (incl header): \" + json.length);\r\n\r\n//       if (json.length < 2) {\r\n//         alert(\"Sheet seems empty or header is missing\");\r\n//         return;\r\n//       }\r\n\r\n//       const headers = json[1];\r\n//       alert(\"Detected headers: \" + headers.join(\", \"));\r\n\r\n//       const rows = json.slice(2).map((row, rowIndex) => {\r\n//         const obj = {};\r\n//         headers.forEach((h, j) => {\r\n//           const cleanHeader = h?.trim();\r\n//           const key = labelToKey[cleanHeader];\r\n//           if (!key) return;\r\n\r\n//           const cell = row[j];\r\n//           if (typeof cell === \"number\" && dateFields.includes(cleanHeader)) {\r\n//             const d = XLSX.SSF.parse_date_code(cell);\r\n//             if (d) {\r\n//               const day = String(d.d).padStart(2, '0');\r\n//               const month = String(d.m).padStart(2, '0');\r\n//               const year = d.y;\r\n//               obj[key] = `${day}-${month}-${year}`;\r\n//             }\r\n//           } else {\r\n//             obj[key] = String(cell ?? \"\").trim();\r\n//           }\r\n//         });\r\n//         console.log(`Row ${rowIndex + 2}:`, obj);\r\n//         return obj;\r\n//       });\r\n\r\n//       alert(\"Parsed \" + rows.length + \" data rows\");\r\n//       setPreviewData(rows);\r\n//       setStatusMap({});\r\n//       setFleetNumbers({});\r\n//     };\r\n\r\n//     reader.onerror = (err) => {\r\n//       alert(\"Failed to read file: \" + err);\r\n//       console.error(\"FileReader error:\", err);\r\n//     };\r\n\r\n//     reader.readAsBinaryString(file);\r\n//   };\r\n\r\n//   const getNextFleetNumber = async () => {\r\n//     const counterRef = doc(db, \"Counters\", \"fleet_counter\");\r\n//     const newFleetNo = await runTransaction(db, async (transaction) => {\r\n//       const docSnap = await transaction.get(counterRef);\r\n//       if (!docSnap.exists()) throw new Error(\"Counter doc missing\");\r\n//       const current = docSnap.data().nextFleetNo || 1;\r\n//       transaction.update(counterRef, { nextFleetNo: current + 1 });\r\n//       return current;\r\n//     });\r\n//     return newFleetNo;\r\n//   };\r\n\r\n//   const saveRow = async (row, i) => {\r\n//     const user = auth.currentUser;\r\n//     try {\r\n//       const newFleetNo = await getNextFleetNumber();\r\n//       const enriched = {\r\n//         ...row,\r\n//         fleetNumber: newFleetNo,\r\n//         createdAt: new Date(),\r\n//         createdBy: user?.email || \"anonymous\",\r\n//         isCurrent: true,\r\n//         versionDate: new Date(),\r\n//       };\r\n//       await addDoc(collection(db, \"fleet_records\"), enriched);\r\n//       setStatusMap(prev => ({ ...prev, [i]: \"✅ Saved\" }));\r\n//       setFleetNumbers(prev => ({ ...prev, [i]: newFleetNo }));\r\n//     } catch (err) {\r\n//       setStatusMap(prev => ({ ...prev, [i]: \"❌ Failed\" }));\r\n//     }\r\n//   };\r\n\r\n//   const saveAll = async () => {\r\n//     for (let i = 0; i < previewData.length; i++) {\r\n//       if (!statusMap[i]) await saveRow(previewData[i], i);\r\n//     }\r\n//   };\r\n\r\n//   const handleEdit = (i, key, value) => {\r\n//     const updated = [...previewData];\r\n//     updated[i][key] = value;\r\n//     setPreviewData(updated);\r\n//   };\r\n\r\n//   const deleteRow = (i) => {\r\n//     setPreviewData(previewData.filter((_, idx) => idx !== i));\r\n//     const s = { ...statusMap }; delete s[i];\r\n//     const f = { ...fleetNumbers }; delete f[i];\r\n//     setStatusMap(s);\r\n//     setFleetNumbers(f);\r\n//   };\r\n\r\n//   const resetTable = () => {\r\n//     setPreviewData([]);\r\n//     setStatusMap({});\r\n//     setFleetNumbers({});\r\n//   };\r\n\r\n//   return (\r\n//     <div style={{ marginBottom: 40 }}>\r\n//       <h4>Upload Excel & Preview</h4>\r\n//       <input\r\n//         type=\"file\"\r\n//         accept=\".xlsx, .xls\"\r\n//         onChange={(e) => {\r\n//           const file = e.target.files?.[0];\r\n//           if (file) {\r\n//             parseExcel(file);\r\n//             setTimeout(() => {\r\n//               e.target.value = \"\";\r\n//             }, 100);\r\n//           } else {\r\n//             alert(\"No file selected.\");\r\n//           }\r\n//         }}\r\n//       />\r\n//       {previewData.length > 0 && (\r\n//         <>\r\n//           <h5 style={{ marginTop: 20 }}>📄 Preview Table (Excel Upload)</h5>\r\n//           <button onClick={saveAll}>💾 Save All</button>\r\n//           <button onClick={resetTable} style={{ marginLeft: 10, color: \"red\" }}>🧹 Clear</button>\r\n//           <div className=\"table-scroll-x\">\r\n//             <table>\r\n//               <thead>\r\n//                 <tr>\r\n//                   <th>Fleet Number</th>\r\n//                   {Object.keys(previewData[0]).map(key => <th key={key}>{key}</th>)}\r\n//                   <th>Status</th>\r\n//                   <th>Action</th>\r\n//                 </tr>\r\n//               </thead>\r\n//               <tbody>\r\n//                 {previewData.map((row, i) => (\r\n//                   <tr key={i}>\r\n//                     <td>{fleetNumbers[i] || \"\"}</td>\r\n//                     {Object.keys(row).map((key) => (\r\n//                       <td key={key}>\r\n//                         <input\r\n//                           type=\"text\"\r\n//                           value={row[key]}\r\n//                           onChange={(e) => handleEdit(i, key, e.target.value)}\r\n//                           style={{ width: \"120px\" }}\r\n//                         />\r\n//                       </td>\r\n//                     ))}\r\n//                     <td>{statusMap[i] || \"⏳ Pending\"}</td>\r\n//                     <td>\r\n//                       <button onClick={() => saveRow(row, i)} disabled={statusMap[i] === \"✅ Saved\"}>Save</button>\r\n//                       <button onClick={() => deleteRow(i)} style={{ marginLeft: 6, color: \"red\" }}>Delete</button>\r\n//                     </td>\r\n//                   </tr>\r\n//                 ))}\r\n//               </tbody>\r\n//             </table>\r\n//           </div>\r\n//         </>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default UploadForm;\r\n\r\n\r\n\r\n\r\n\r\n\r\nimport React, { useState } from \"react\";\r\nimport { addDoc, collection, doc, runTransaction } from \"firebase/firestore\";\r\nimport * as XLSX from \"xlsx\";\r\nimport { db, auth } from \"../firebase\";\r\n\r\nconst labelToKey = {\r\n  \"Indent No\": \"IndentNo\", \"Indent Date\": \"IndentDate\", \"Placement Date\": \"PlacementDate\",\r\n  \"Customer\": \"Customer\", \"Customer Type\": \"CustomerType\", \"Customer Billing Type\": \"CustomerBillingType\",\r\n  \"Sourcing (Vendor)\": \"SourcingVendor\", \"Vendor Type\": \"VendorType\", \"Vendor Billing Type\": \"VendorBillingType\",\r\n  \"Origin\": \"Origin\", \"Destination\": \"Destination\", \"Vehicle No\": \"VehicleNo\", \"Vehicle type\": \"VehicleType\",\r\n  \"Driver No\": \"DriverNo\", \"Dispatch Date\": \"DispatchDate\", \"Deliver Date\": \"DeliverDate\",\r\n  \"Offloading Date\": \"OffloadingDate\", \"E-way Bill\": \"EwayBill\", \"LR No.\": \"LRNo\",\r\n  \"Soft Copy POD Rec\": \"SoftCopyPODRec\", \"Hard Copy POD Rec\": \"HardCopyPODRec\",\r\n  \"Customer -Sale rate\": \"CustomerSaleRate\", \"Advance to be Paid\": \"AdvanceToBePaid\",\r\n  \"Advance Rec\": \"AdvanceRec\", \"Advance UTR\": \"AdvanceUTR\", \"Advance Rec-Date\": \"AdvanceRecDate\",\r\n  \"Balance Pending\": \"BalancePending\", \"Detention Charges\": \"DetentionCharges\",\r\n  \"Loading/Unloading Charges\": \"LoadingUnloadingCharges\", \"Miscellaneous Charges.\": \"MiscCharges\",\r\n  \"Processing Charges\": \"ProcessingCharges\", \"Net Balance\": \"NetBalance\",\r\n  \"Balance Rec Amount\": \"BalanceRecAmount\", \"Balance UTR\": \"BalanceUTR\", \"Balance Rec Date\": \"BalanceRecDate\",\r\n  \"Remaining Balance\": \"RemainingBalance\", \"Remaining Balance UTR\": \"RemainingBalanceUTR\",\r\n  \"Remaining Balance Date\": \"RemainingBalanceDate\", \"Supplier Buy Rate\": \"SupplierBuyRate\",\r\n  \"Supplier Advance Pay\": \"SupplierAdvancePay\", \"Supplier Advance Paid\": \"SupplierAdvancePaid\",\r\n  \"Supplier Mis Charges\": \"SupplierMisCharges\", \"Supplier Invoice No.\": \"SupplierInvoiceNo\",\r\n  \"Supplier Advance UTR\": \"SupplierAdvanceUTR\", \"Supplier Advance Pay-Date\": \"SupplierAdvancePayDate\",\r\n  \"Supplier Balance Pending\": \"SupplierBalancePending\", \"Supplier Balance Paid Amount\": \"SupplierBalancePaidAmount\",\r\n  \"Supplier Balance Paid UTR\": \"SupplierBalancePaidUTR\", \"Supplier Balance Paid Date\": \"SupplierBalancePaidDate\",\r\n  \"Remaining Supplier Amount\": \"RemainingSupplierAmount\", \"POD Rec Date\": \"PODRecDate\",\r\n  \"POD Send to Customer Date\": \"PODSendToCustomerDate\", \"POD Docket No.\": \"PODDocketNo\",\r\n  \"POD Rec By Customer\": \"PODRecByCustomer\", \"POD Deduction If any\": \"PODDeductionIfAny\",\r\n  \"Gross Profit\": \"GrossProfit\", \"Bad Debts\": \"BadDebts\", \"Net Profit\": \"NetProfit\"\r\n};\r\n\r\nconst dateFields = [\r\n  \"Indent Date\", \"Placement Date\", \"Dispatch Date\", \"Deliver Date\", \"Offloading Date\",\r\n  \"Soft Copy POD Rec\", \"Hard Copy POD Rec\", \"Advance Rec-Date\", \"Balance Rec Date\",\r\n  \"Remaining Balance Date\", \"Supplier Advance Pay-Date\", \"Supplier Balance Paid Date\",\r\n  \"POD Rec Date\", \"POD Send to Customer Date\", \"POD Rec By Customer\"\r\n];\r\n\r\nconst UploadForm = () => {\r\n  const [previewData, setPreviewData] = useState([]);\r\n  const [statusMap, setStatusMap] = useState({});\r\n  const [fleetNumbers, setFleetNumbers] = useState({});\r\n\r\n  const normalize = (label) => (label || \"\").replace(/[.\\s]+/g, \" \").trim().toLowerCase();\r\n\r\n\r\n  const getMappedKey = (label) => {\r\n    const normalizedLabel = normalize(label);\r\n    return Object.entries(labelToKey).find(\r\n      ([rawLabel]) => normalize(rawLabel) === normalizedLabel\r\n    )?.[1];\r\n  };\r\n\r\n  const parseExcel = (file) => {\r\n    if (!file) {\r\n      alert(\"No file selected\");\r\n      return;\r\n    }\r\n\r\n    alert(\"File selected: \" + file.name);\r\n    const reader = new FileReader();\r\n    reader.onload = (e) => {\r\n      alert(\"File read started\");\r\n\r\n      const workbook = XLSX.read(e.target.result, { type: \"binary\" });\r\n      const sheetName = workbook.SheetNames[0];\r\n      alert(\"Reading sheet: \" + sheetName);\r\n      const sheet = workbook.Sheets[sheetName];\r\n      const json = XLSX.utils.sheet_to_json(sheet, { header: 1 });\r\n      console.log(\"🔎 Debug Row 0 (Excel Row 1):\", json[0]);\r\nconsole.log(\"🔎 Debug Row 1 (Excel Row 2):\", json[1]);\r\nconsole.log(\"🔎 Debug Row 2 (Excel Row 3):\", json[2]);\r\nconsole.log(\"🔎 Debug Row 3 (Excel Row 4):\", json[3]);\r\n\r\n      alert(\"Total rows in sheet (incl header): \" + json.length);\r\n      console.log(\"Raw Sheet JSON:\", json);\r\n\r\n      if (json.length < 2) {\r\n        alert(\"Sheet seems empty or header is missing\");\r\n        return;\r\n      }\r\n\r\n      const headers = json[1];\r\n      \r\n      alert(\"Detected headers: \" + headers.join(\", \"));\r\n\r\n      const rows = json.slice(2).map((row, rowIndex) => {\r\n        const obj = {};\r\nfor (let j = 0; j < headers.length; j++) {\r\n  const header = headers[j];\r\n  if (!header) continue; // skip undefined or blank headers\r\n\r\n  const key = getMappedKey(header);\r\n  if (!key) continue;\r\n\r\n  const cell = row[j];\r\n  const isDate = dateFields.some(df => normalize(df) === normalize(header));\r\n  if (typeof cell === \"number\" && isDate) {\r\n    const d = XLSX.SSF.parse_date_code(cell);\r\n    if (d) {\r\n      const day = String(d.d).padStart(2, '0');\r\n      const month = String(d.m).padStart(2, '0');\r\n      const year = d.y;\r\n      obj[key] = `${day}-${month}-${year}`;\r\n    }\r\n  } else {\r\n    obj[key] = String(cell ?? \"\").trim();\r\n  }\r\n}\r\n\r\n\r\n        console.log(`Row ${rowIndex + 2}:`, obj);\r\n        return obj;\r\n      });\r\n\r\n      alert(\"Parsed \" + rows.length + \" data rows\");\r\n      setPreviewData(rows);\r\n      setStatusMap({});\r\n      setFleetNumbers({});\r\n    };\r\n\r\n    reader.onerror = (err) => {\r\n      alert(\"Failed to read file: \" + err);\r\n      console.error(\"FileReader error:\", err);\r\n    };\r\n\r\n    reader.readAsBinaryString(file);\r\n  };\r\n\r\n  const getNextFleetNumber = async () => {\r\n    const counterRef = doc(db, \"Counters\", \"fleet_counter\");\r\n    const newFleetNo = await runTransaction(db, async (transaction) => {\r\n      const docSnap = await transaction.get(counterRef);\r\n      if (!docSnap.exists()) throw new Error(\"Counter doc missing\");\r\n      const current = docSnap.data().nextFleetNo || 1;\r\n      transaction.update(counterRef, { nextFleetNo: current + 1 });\r\n      return current;\r\n    });\r\n    return newFleetNo;\r\n  };\r\n\r\n  const saveRow = async (row, i) => {\r\n    const user = auth.currentUser;\r\n    try {\r\n      const newFleetNo = await getNextFleetNumber();\r\n      const enriched = {\r\n        ...row,\r\n        fleetNumber: newFleetNo,\r\n        createdAt: new Date(),\r\n        createdBy: user?.email || \"anonymous\",\r\n        isCurrent: true,\r\n        versionDate: new Date(),\r\n      };\r\n      await addDoc(collection(db, \"fleet_records\"), enriched);\r\n      setStatusMap(prev => ({ ...prev, [i]: \"✅ Saved\" }));\r\n      setFleetNumbers(prev => ({ ...prev, [i]: newFleetNo }));\r\n    } catch (err) {\r\n      setStatusMap(prev => ({ ...prev, [i]: \"❌ Failed\" }));\r\n    }\r\n  };\r\n\r\n  const saveAll = async () => {\r\n    for (let i = 0; i < previewData.length; i++) {\r\n      if (!statusMap[i]) await saveRow(previewData[i], i);\r\n    }\r\n  };\r\n\r\n  const handleEdit = (i, key, value) => {\r\n    const updated = [...previewData];\r\n    updated[i][key] = value;\r\n    setPreviewData(updated);\r\n  };\r\n\r\n  const deleteRow = (i) => {\r\n    setPreviewData(previewData.filter((_, idx) => idx !== i));\r\n    const s = { ...statusMap }; delete s[i];\r\n    const f = { ...fleetNumbers }; delete f[i];\r\n    setStatusMap(s);\r\n    setFleetNumbers(f);\r\n  };\r\n\r\n  const resetTable = () => {\r\n    setPreviewData([]);\r\n    setStatusMap({});\r\n    setFleetNumbers({});\r\n  };\r\n\r\n  return (\r\n    <div style={{ marginBottom: 40 }}>\r\n      <h4>Upload Excel & Preview</h4>\r\n      <input\r\n        type=\"file\"\r\n        accept=\".xlsx, .xls\"\r\n        onChange={(e) => {\r\n          const file = e.target.files?.[0];\r\n          if (file) {\r\n            parseExcel(file);\r\n            setTimeout(() => {\r\n              e.target.value = \"\";\r\n            }, 100);\r\n          } else {\r\n            alert(\"No file selected.\");\r\n          }\r\n        }}\r\n      />\r\n      {previewData.length > 0 && (\r\n        <>\r\n          <h5 style={{ marginTop: 20 }}>📄 Preview Table (Excel Upload)</h5>\r\n          <button onClick={saveAll}>💾 Save All</button>\r\n          <button onClick={resetTable} style={{ marginLeft: 10, color: \"red\" }}>🧹 Clear</button>\r\n          <div className=\"table-scroll-x\">\r\n            <table>\r\n              <thead>\r\n                <tr>\r\n                  <th>Fleet Number</th>\r\n                  {Object.keys(previewData[0]).map(key => <th key={key}>{key}</th>)}\r\n                  <th>Status</th>\r\n                  <th>Action</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {previewData.map((row, i) => (\r\n                  <tr key={i}>\r\n                    <td>{fleetNumbers[i] || \"\"}</td>\r\n                    {Object.keys(row).map((key) => (\r\n                      <td key={key}>\r\n                        <input\r\n                          type=\"text\"\r\n                          value={row[key]}\r\n                          onChange={(e) => handleEdit(i, key, e.target.value)}\r\n                          style={{ width: \"120px\" }}\r\n                        />\r\n                      </td>\r\n                    ))}\r\n                    <td>{statusMap[i] || \"⏳ Pending\"}</td>\r\n                    <td>\r\n                      <button onClick={() => saveRow(row, i)} disabled={statusMap[i] === \"✅ Saved\"}>Save</button>\r\n                      <button onClick={() => deleteRow(i)} style={{ marginLeft: 6, color: \"red\" }}>Delete</button>\r\n                    </td>\r\n                  </tr>\r\n                ))}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UploadForm;\r\n"],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;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","ignoreList":[]},"metadata":{},"sourceType":"module"}