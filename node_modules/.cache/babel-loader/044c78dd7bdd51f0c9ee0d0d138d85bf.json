{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anupp\\\\Downloads\\\\fleet-billing-app\\\\fleet-billing-app\\\\src\\\\components\\\\UploadForm.js\";\nimport React, { useState } from \"react\";\nimport { addDoc, collection, doc, runTransaction } from \"firebase/firestore\";\nimport * as XLSX from \"xlsx\";\nimport { db, auth } from \"../firebase\";\nimport { toast } from \"react-toastify\";\nconst labelToKey = {\n  \"Indent No\": \"IndentNo\",\n  \"Indent Date\": \"IndentDate\",\n  \"Placement Date\": \"PlacementDate\",\n  \"Customer\": \"Customer\",\n  \"Customer Type\": \"CustomerType\",\n  \"Customer Billing Type\": \"CustomerBillingType\",\n  \"Sourcing (Vendor)\": \"SourcingVendor\",\n  \"Vendor Type\": \"VendorType\",\n  \"Vendor Billing Type\": \"VendorBillingType\",\n  \"Origin\": \"Origin\",\n  \"Destination\": \"Destination\",\n  \"Vehicle No\": \"VehicleNo\",\n  \"Vehicle type\": \"VehicleType\",\n  \"Driver No\": \"DriverNo\",\n  \"Dispatch Date\": \"DispatchDate\",\n  \"Deliver Date\": \"DeliverDate\",\n  \"Offloading Date\": \"OffloadingDate\",\n  \"E-way Bill\": \"EwayBill\",\n  \"LR No.\": \"LRNo\",\n  \"Soft Copy POD Rec\": \"SoftCopyPODRec\",\n  \"Hard Copy POD Rec\": \"HardCopyPODRec\",\n  \"Customer -Sale rate\": \"CustomerSaleRate\",\n  \"Advance to be Paid\": \"AdvanceToBePaid\",\n  \"Advance Rec\": \"AdvanceRec\",\n  \"Advance UTR\": \"AdvanceUTR\",\n  \"Advance Rec-Date\": \"AdvanceRecDate\",\n  \"Balance Pending\": \"BalancePending\",\n  \"Detention Charges\": \"DetentionCharges\",\n  \"Loading/Unloading Charges\": \"LoadingUnloadingCharges\",\n  \"Miscellaneous Charges.\": \"MiscCharges\",\n  \"Processing Charges\": \"ProcessingCharges\",\n  \"Net Balance\": \"NetBalance\",\n  \"Balance Rec Amount\": \"BalanceRecAmount\",\n  \"Balance UTR\": \"BalanceUTR\",\n  \"Balance Rec Date\": \"BalanceRecDate\",\n  \"Remaining Balance\": \"RemainingBalance\",\n  \"Remaining Balance UTR\": \"RemainingBalanceUTR\",\n  \"Remaining Balance Date\": \"RemainingBalanceDate\",\n  \"Supplier Buy Rate\": \"SupplierBuyRate\",\n  \"Supplier Advance Pay\": \"SupplierAdvancePay\",\n  \"Supplier Advance Paid\": \"SupplierAdvancePaid\",\n  \"Supplier Mis Charges\": \"SupplierMisCharges\",\n  \"Supplier Invoice No.\": \"SupplierInvoiceNo\",\n  \"Supplier Advance UTR\": \"SupplierAdvanceUTR\",\n  \"Supplier Advance Pay-Date\": \"SupplierAdvancePayDate\",\n  \"Supplier Balance Pending\": \"SupplierBalancePending\",\n  \"Supplier Balance Paid Amount\": \"SupplierBalancePaidAmount\",\n  \"Supplier Balance Paid UTR\": \"SupplierBalancePaidUTR\",\n  \"Supplier Balance Paid Date\": \"SupplierBalancePaidDate\",\n  \"Remaining Supplier Amount\": \"RemainingSupplierAmount\",\n  \"POD Rec Date\": \"PODRecDate\",\n  \"POD Send to Customer Date\": \"PODSendToCustomerDate\",\n  \"POD Docket No.\": \"PODDocketNo\",\n  \"POD Rec By Customer\": \"PODRecByCustomer\",\n  \"POD Deduction If any\": \"PODDeductionIfAny\",\n  \"Gross Profit\": \"GrossProfit\",\n  \"Bad Debts\": \"BadDebts\",\n  \"Net Profit\": \"NetProfit\"\n};\nconst dateFields = [\"Indent Date\", \"Placement Date\", \"Dispatch Date\", \"Deliver Date\", \"Offloading Date\", \"Soft Copy POD Rec\", \"Hard Copy POD Rec\", \"Advance Rec-Date\", \"Balance Rec Date\", \"Remaining Balance Date\", \"Supplier Advance Pay-Date\", \"Supplier Balance Paid Date\", \"POD Rec Date\", \"POD Send to Customer Date\", \"POD Rec By Customer\"];\nconst UploadForm = () => {\n  const [previewData, setPreviewData] = useState([]);\n  const [statusMap, setStatusMap] = useState({});\n  const [fleetNumbers, setFleetNumbers] = useState({});\n  const [loading, setLoading] = useState(false);\n  const normalize = label => (label || \"\").replace(/[.\\s]+/g, \" \").trim().toLowerCase();\n  const getMappedKey = label => {\n    var _Object$entries$find;\n    return (_Object$entries$find = Object.entries(labelToKey).find(([raw]) => normalize(raw) === normalize(label))) === null || _Object$entries$find === void 0 ? void 0 : _Object$entries$find[1];\n  };\n  const parseExcel = file => {\n    const reader = new FileReader();\n    reader.onload = e => {\n      const sheet = XLSX.read(e.target.result, {\n        type: \"binary\"\n      }).Sheets.Sheet1;\n      const raw = XLSX.utils.sheet_to_json(sheet, {\n        header: 1,\n        defval: \"\"\n      });\n      if (raw.length < 3) return toast.error(\"❌ Excel must have at least 3 rows\");\n      raw.splice(0, 1); // Remove merged header\n      const headers = raw[0];\n      const dataRows = raw.slice(1).map(row => {\n        const rowObj = {};\n        headers.forEach((h, j) => {\n          const key = getMappedKey(h);\n          if (!key) return;\n          const val = row[j];\n          const isDate = dateFields.some(df => normalize(df) === normalize(h));\n          if (typeof val === \"number\" && isDate) {\n            const d = XLSX.SSF.parse_date_code(val);\n            if (d) rowObj[key] = `${d.d.toString().padStart(2, '0')}-${d.m.toString().padStart(2, '0')}-${d.y}`;\n          } else {\n            rowObj[key] = String(val !== null && val !== void 0 ? val : \"\").trim();\n          }\n        });\n        return rowObj;\n      });\n      setPreviewData(dataRows);\n      setStatusMap({});\n      setFleetNumbers({});\n    };\n    reader.readAsBinaryString(file);\n  };\n  const getNextFleetNumber = async () => {\n    const ref = doc(db, \"Counters\", \"fleet_counter\");\n    return await runTransaction(db, async tx => {\n      var _snap$data;\n      const snap = await tx.get(ref);\n      const curr = ((_snap$data = snap.data()) === null || _snap$data === void 0 ? void 0 : _snap$data.nextFleetNo) || 1;\n      tx.update(ref, {\n        nextFleetNo: curr + 1\n      });\n      return curr;\n    });\n  };\n  const saveRow = async (row, i) => {\n    try {\n      const user = auth.currentUser;\n      const fleetNo = await getNextFleetNumber();\n      const enriched = {\n        ...row,\n        fleetNumber: fleetNo,\n        createdAt: new Date(),\n        createdBy: (user === null || user === void 0 ? void 0 : user.email) || \"anonymous\",\n        isCurrent: true,\n        versionDate: new Date()\n      };\n      await addDoc(collection(db, \"fleet_records\"), enriched);\n      setStatusMap(s => ({\n        ...s,\n        [i]: \"✅ Saved\"\n      }));\n      setFleetNumbers(f => ({\n        ...f,\n        [i]: fleetNo\n      }));\n    } catch (err) {\n      setStatusMap(s => ({\n        ...s,\n        [i]: \"❌ Error\"\n      }));\n    }\n  };\n  const saveAll = async () => {\n    setLoading(true);\n    for (let i = 0; i < previewData.length; i++) {\n      if (!statusMap[i]) await saveRow(previewData[i], i);\n    }\n    setLoading(false);\n    toast.success(\"✅ All rows processed\");\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      marginBottom: 40\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }\n  }, \"Upload Excel & Preview\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"file\",\n    accept: \".xlsx, .xls\",\n    onChange: e => e.target.files[0] && parseExcel(e.target.files[0]),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }\n  }), previewData.length > 0 && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h5\", {\n    style: {\n      marginTop: 20\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 11\n    }\n  }, \"\\uD83D\\uDCC4 Preview Table (Excel Upload)\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: saveAll,\n    disabled: loading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 11\n    }\n  }, loading ? \"Saving...\" : \"💾 Save All\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => {\n      setPreviewData([]);\n      setStatusMap({});\n      setFleetNumbers({});\n    },\n    style: {\n      marginLeft: 10,\n      color: \"red\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 11\n    }\n  }, \"\\uD83E\\uDDF9 Clear\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"table-scroll-x\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"table\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 19\n    }\n  }, \"Fleet Number\"), Object.keys(previewData[0]).map(k => /*#__PURE__*/React.createElement(\"th\", {\n    key: k,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 59\n    }\n  }, k)), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 19\n    }\n  }, \"Status\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 19\n    }\n  }, \"Action\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 15\n    }\n  }, previewData.map((row, i) => /*#__PURE__*/React.createElement(\"tr\", {\n    key: i,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 21\n    }\n  }, fleetNumbers[i] || \"\"), Object.keys(row).map(key => /*#__PURE__*/React.createElement(\"td\", {\n    key: key,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 23\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: row[key],\n    onChange: e => {\n      const updated = [...previewData];\n      updated[i][key] = e.target.value;\n      setPreviewData(updated);\n    },\n    style: {\n      width: \"120px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 25\n    }\n  }))), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 21\n    }\n  }, statusMap[i] || \"⏳ Pending\"), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => saveRow(row, i),\n    disabled: statusMap[i] === \"✅ Saved\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 23\n    }\n  }, \"Save\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => {\n      const updated = [...previewData];\n      updated.splice(i, 1);\n      setPreviewData(updated);\n      const s = {\n        ...statusMap\n      };\n      delete s[i];\n      const f = {\n        ...fleetNumbers\n      };\n      delete f[i];\n      setStatusMap(s);\n      setFleetNumbers(f);\n    },\n    style: {\n      marginLeft: 6,\n      color: \"red\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 23\n    }\n  }, \"Delete\")))))))));\n};\nexport default UploadForm;","map":{"version":3,"names":["React","useState","addDoc","collection","doc","runTransaction","XLSX","db","auth","toast","labelToKey","dateFields","UploadForm","previewData","setPreviewData","statusMap","setStatusMap","fleetNumbers","setFleetNumbers","loading","setLoading","normalize","label","replace","trim","toLowerCase","getMappedKey","_Object$entries$find","Object","entries","find","raw","parseExcel","file","reader","FileReader","onload","e","sheet","read","target","result","type","Sheets","Sheet1","utils","sheet_to_json","header","defval","length","error","splice","headers","dataRows","slice","map","row","rowObj","forEach","h","j","key","val","isDate","some","df","d","SSF","parse_date_code","toString","padStart","m","y","String","readAsBinaryString","getNextFleetNumber","ref","tx","_snap$data","snap","get","curr","data","nextFleetNo","update","saveRow","i","user","currentUser","fleetNo","enriched","fleetNumber","createdAt","Date","createdBy","email","isCurrent","versionDate","s","f","err","saveAll","success","createElement","style","marginBottom","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","accept","onChange","files","Fragment","marginTop","onClick","disabled","marginLeft","color","className","keys","k","value","updated","width"],"sources":["C:/Users/anupp/Downloads/fleet-billing-app/fleet-billing-app/src/components/UploadForm.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { addDoc, collection, doc, runTransaction } from \"firebase/firestore\";\r\nimport * as XLSX from \"xlsx\";\r\nimport { db, auth } from \"../firebase\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nconst labelToKey = {\r\n  \"Indent No\": \"IndentNo\", \"Indent Date\": \"IndentDate\", \"Placement Date\": \"PlacementDate\",\r\n  \"Customer\": \"Customer\", \"Customer Type\": \"CustomerType\", \"Customer Billing Type\": \"CustomerBillingType\",\r\n  \"Sourcing (Vendor)\": \"SourcingVendor\", \"Vendor Type\": \"VendorType\", \"Vendor Billing Type\": \"VendorBillingType\",\r\n  \"Origin\": \"Origin\", \"Destination\": \"Destination\", \"Vehicle No\": \"VehicleNo\", \"Vehicle type\": \"VehicleType\",\r\n  \"Driver No\": \"DriverNo\", \"Dispatch Date\": \"DispatchDate\", \"Deliver Date\": \"DeliverDate\",\r\n  \"Offloading Date\": \"OffloadingDate\", \"E-way Bill\": \"EwayBill\", \"LR No.\": \"LRNo\",\r\n  \"Soft Copy POD Rec\": \"SoftCopyPODRec\", \"Hard Copy POD Rec\": \"HardCopyPODRec\",\r\n  \"Customer -Sale rate\": \"CustomerSaleRate\", \"Advance to be Paid\": \"AdvanceToBePaid\",\r\n  \"Advance Rec\": \"AdvanceRec\", \"Advance UTR\": \"AdvanceUTR\", \"Advance Rec-Date\": \"AdvanceRecDate\",\r\n  \"Balance Pending\": \"BalancePending\", \"Detention Charges\": \"DetentionCharges\",\r\n  \"Loading/Unloading Charges\": \"LoadingUnloadingCharges\", \"Miscellaneous Charges.\": \"MiscCharges\",\r\n  \"Processing Charges\": \"ProcessingCharges\", \"Net Balance\": \"NetBalance\",\r\n  \"Balance Rec Amount\": \"BalanceRecAmount\", \"Balance UTR\": \"BalanceUTR\", \"Balance Rec Date\": \"BalanceRecDate\",\r\n  \"Remaining Balance\": \"RemainingBalance\", \"Remaining Balance UTR\": \"RemainingBalanceUTR\",\r\n  \"Remaining Balance Date\": \"RemainingBalanceDate\", \"Supplier Buy Rate\": \"SupplierBuyRate\",\r\n  \"Supplier Advance Pay\": \"SupplierAdvancePay\", \"Supplier Advance Paid\": \"SupplierAdvancePaid\",\r\n  \"Supplier Mis Charges\": \"SupplierMisCharges\", \"Supplier Invoice No.\": \"SupplierInvoiceNo\",\r\n  \"Supplier Advance UTR\": \"SupplierAdvanceUTR\", \"Supplier Advance Pay-Date\": \"SupplierAdvancePayDate\",\r\n  \"Supplier Balance Pending\": \"SupplierBalancePending\", \"Supplier Balance Paid Amount\": \"SupplierBalancePaidAmount\",\r\n  \"Supplier Balance Paid UTR\": \"SupplierBalancePaidUTR\", \"Supplier Balance Paid Date\": \"SupplierBalancePaidDate\",\r\n  \"Remaining Supplier Amount\": \"RemainingSupplierAmount\", \"POD Rec Date\": \"PODRecDate\",\r\n  \"POD Send to Customer Date\": \"PODSendToCustomerDate\", \"POD Docket No.\": \"PODDocketNo\",\r\n  \"POD Rec By Customer\": \"PODRecByCustomer\", \"POD Deduction If any\": \"PODDeductionIfAny\",\r\n  \"Gross Profit\": \"GrossProfit\", \"Bad Debts\": \"BadDebts\", \"Net Profit\": \"NetProfit\"\r\n};\r\n\r\nconst dateFields = [\r\n  \"Indent Date\", \"Placement Date\", \"Dispatch Date\", \"Deliver Date\", \"Offloading Date\",\r\n  \"Soft Copy POD Rec\", \"Hard Copy POD Rec\", \"Advance Rec-Date\", \"Balance Rec Date\",\r\n  \"Remaining Balance Date\", \"Supplier Advance Pay-Date\", \"Supplier Balance Paid Date\",\r\n  \"POD Rec Date\", \"POD Send to Customer Date\", \"POD Rec By Customer\"\r\n];\r\n\r\nconst UploadForm = () => {\r\n  const [previewData, setPreviewData] = useState([]);\r\n  const [statusMap, setStatusMap] = useState({});\r\n  const [fleetNumbers, setFleetNumbers] = useState({});\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const normalize = (label) => (label || \"\").replace(/[.\\s]+/g, \" \").trim().toLowerCase();\r\n  const getMappedKey = (label) =>\r\n    Object.entries(labelToKey).find(([raw]) => normalize(raw) === normalize(label))?.[1];\r\n\r\n  const parseExcel = (file) => {\r\n    const reader = new FileReader();\r\n    reader.onload = (e) => {\r\n      const sheet = XLSX.read(e.target.result, { type: \"binary\" }).Sheets.Sheet1;\r\n      const raw = XLSX.utils.sheet_to_json(sheet, { header: 1, defval: \"\" });\r\n\r\n      if (raw.length < 3) return toast.error(\"❌ Excel must have at least 3 rows\");\r\n\r\n      raw.splice(0, 1); // Remove merged header\r\n      const headers = raw[0];\r\n      const dataRows = raw.slice(1).map((row) => {\r\n        const rowObj = {};\r\n        headers.forEach((h, j) => {\r\n          const key = getMappedKey(h);\r\n          if (!key) return;\r\n          const val = row[j];\r\n          const isDate = dateFields.some(df => normalize(df) === normalize(h));\r\n          if (typeof val === \"number\" && isDate) {\r\n            const d = XLSX.SSF.parse_date_code(val);\r\n            if (d) rowObj[key] = `${d.d.toString().padStart(2, '0')}-${d.m.toString().padStart(2, '0')}-${d.y}`;\r\n          } else {\r\n            rowObj[key] = String(val ?? \"\").trim();\r\n          }\r\n        });\r\n        return rowObj;\r\n      });\r\n\r\n      setPreviewData(dataRows);\r\n      setStatusMap({});\r\n      setFleetNumbers({});\r\n    };\r\n    reader.readAsBinaryString(file);\r\n  };\r\n\r\n  const getNextFleetNumber = async () => {\r\n    const ref = doc(db, \"Counters\", \"fleet_counter\");\r\n    return await runTransaction(db, async (tx) => {\r\n      const snap = await tx.get(ref);\r\n      const curr = snap.data()?.nextFleetNo || 1;\r\n      tx.update(ref, { nextFleetNo: curr + 1 });\r\n      return curr;\r\n    });\r\n  };\r\n\r\n  const saveRow = async (row, i) => {\r\n    try {\r\n      const user = auth.currentUser;\r\n      const fleetNo = await getNextFleetNumber();\r\n      const enriched = {\r\n        ...row,\r\n        fleetNumber: fleetNo,\r\n        createdAt: new Date(),\r\n        createdBy: user?.email || \"anonymous\",\r\n        isCurrent: true,\r\n        versionDate: new Date()\r\n      };\r\n      await addDoc(collection(db, \"fleet_records\"), enriched);\r\n      setStatusMap((s) => ({ ...s, [i]: \"✅ Saved\" }));\r\n      setFleetNumbers((f) => ({ ...f, [i]: fleetNo }));\r\n    } catch (err) {\r\n      setStatusMap((s) => ({ ...s, [i]: \"❌ Error\" }));\r\n    }\r\n  };\r\n\r\n  const saveAll = async () => {\r\n    setLoading(true);\r\n    for (let i = 0; i < previewData.length; i++) {\r\n      if (!statusMap[i]) await saveRow(previewData[i], i);\r\n    }\r\n    setLoading(false);\r\n    toast.success(\"✅ All rows processed\");\r\n  };\r\n\r\n  return (\r\n    <div style={{ marginBottom: 40 }}>\r\n      <h4>Upload Excel & Preview</h4>\r\n      <input\r\n        type=\"file\"\r\n        accept=\".xlsx, .xls\"\r\n        onChange={(e) => e.target.files[0] && parseExcel(e.target.files[0])}\r\n      />\r\n      {previewData.length > 0 && (\r\n        <>\r\n          <h5 style={{ marginTop: 20 }}>📄 Preview Table (Excel Upload)</h5>\r\n          <button onClick={saveAll} disabled={loading}>\r\n            {loading ? \"Saving...\" : \"💾 Save All\"}\r\n          </button>\r\n          <button onClick={() => {\r\n            setPreviewData([]);\r\n            setStatusMap({});\r\n            setFleetNumbers({});\r\n          }} style={{ marginLeft: 10, color: \"red\" }}>\r\n            🧹 Clear\r\n          </button>\r\n          <div className=\"table-scroll-x\">\r\n            <table>\r\n              <thead>\r\n                <tr>\r\n                  <th>Fleet Number</th>\r\n                  {Object.keys(previewData[0]).map((k) => <th key={k}>{k}</th>)}\r\n                  <th>Status</th>\r\n                  <th>Action</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {previewData.map((row, i) => (\r\n                  <tr key={i}>\r\n                    <td>{fleetNumbers[i] || \"\"}</td>\r\n                    {Object.keys(row).map((key) => (\r\n                      <td key={key}>\r\n                        <input\r\n                          type=\"text\"\r\n                          value={row[key]}\r\n                          onChange={(e) => {\r\n                            const updated = [...previewData];\r\n                            updated[i][key] = e.target.value;\r\n                            setPreviewData(updated);\r\n                          }}\r\n                          style={{ width: \"120px\" }}\r\n                        />\r\n                      </td>\r\n                    ))}\r\n                    <td>{statusMap[i] || \"⏳ Pending\"}</td>\r\n                    <td>\r\n                      <button onClick={() => saveRow(row, i)} disabled={statusMap[i] === \"✅ Saved\"}>\r\n                        Save\r\n                      </button>\r\n                      <button onClick={() => {\r\n                        const updated = [...previewData];\r\n                        updated.splice(i, 1);\r\n                        setPreviewData(updated);\r\n                        const s = { ...statusMap }; delete s[i];\r\n                        const f = { ...fleetNumbers }; delete f[i];\r\n                        setStatusMap(s);\r\n                        setFleetNumbers(f);\r\n                      }} style={{ marginLeft: 6, color: \"red\" }}>Delete</button>\r\n                    </td>\r\n                  </tr>\r\n                ))}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UploadForm;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}