{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anupp\\\\Downloads\\\\fleet-billing-app\\\\fleet-billing-app\\\\src\\\\components\\\\UploadForm.js\";\n// UploadForm.js\nimport React, { useState, useEffect } from \"react\";\nimport * as XLSX from \"xlsx\";\nimport { db, auth } from \"../firebase\";\nimport { collection, addDoc, doc, runTransaction, Timestamp } from \"firebase/firestore\";\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\n// Final field structure\nconst finalFields = [\n// Fixed\n\"date\", \"deliveryDate\", \"months\", \"origin\", \"destination\", \"customer\", \"customerType\", \"vehicleNo\", \"vendor\", \"salesRate\", \"buyRate\",\n// Customer\n\"toBeAdvance\", \"advanceReceived\", \"advDeviation\", \"advanceRecDate\", \"validatedAdvanceUTRDescription\", \"validatedAdvanceAmount\", \"balance\", \"processingCharges\", \"inwardMisCharges\", \"outwardMisCharges\", \"balanceReceived\", \"remainingBalance\", \"balanceRecDate\", \"validatedBalanceUTR\", \"validatedBalanceUTRAmount\",\n// Vendor\n\"vendorOutwardPayment\", \"paidAmount\", \"balancePending\", \"vendorRemark\",\n// POD\n\"podVendorDate\", \"podSendToCustomerDate\", \"docNo\", \"podCustomerRec\", \"today\", \"balanceOverdueDays\", \"toBeCollectedAmount\"];\nconst dateFields = [\"date\", \"deliveryDate\", \"advanceRecDate\", \"balanceRecDate\", \"podVendorDate\", \"podSendToCustomerDate\", \"podCustomerRec\", \"today\"];\n\n// Label ↔ Key mapping\nconst keyToLabel = {\n  // Fixed\n  date: \"Placement Date\",\n  deliveryDate: \"Delivery Date\",\n  months: \"Months\",\n  origin: \"Origin\",\n  destination: \"Destination\",\n  customer: \"Customer\",\n  customerType: \"Customer Type\",\n  vehicleNo: \"Vehicle No\",\n  vendor: \"Vendor\",\n  salesRate: \"Sales Rate\",\n  buyRate: \"Buy Rate\",\n  // Customer Master\n  toBeAdvance: \"To Be Advance(Sales)\",\n  advanceReceived: \"Advance/Payment Received\",\n  advDeviation: \"Adv Deviation(as on Date)\",\n  advanceRecDate: \"Advance Rec Date\",\n  validatedAdvanceUTRDescription: \"Validated-Advance UTR Discription\",\n  validatedAdvanceAmount: \"Validated UTR -Advance Amount\",\n  balance: \"Balance\",\n  processingCharges: \"Processing charges\",\n  inwardMisCharges: \"Inward-Mis Charges\",\n  outwardMisCharges: \"Outward-Mis Charges\",\n  balanceReceived: \"Bal Receved\",\n  remainingBalance: \"Remaining Balance\",\n  balanceRecDate: \"Balance Rec Date\",\n  validatedBalanceUTR: \"Validated-Balance UTR\",\n  validatedBalanceUTRAmount: \"Validate Balance UTR-Amount\",\n  // Vendor Master\n  vendorOutwardPayment: \"Vendor Outward Payment\",\n  paidAmount: \"Paid Amount\",\n  balancePending: \"Balance Pending\",\n  vendorRemark: \"Vendor Remark\",\n  // POD Master\n  podVendorDate: \"POD Rev-Vendor-Date\",\n  podSendToCustomerDate: \"POD-Send to Customer Date\",\n  docNo: \"Doc No\",\n  podCustomerRec: \"POD-Customer Rec\",\n  today: \"Today\",\n  balanceOverdueDays: \"Balance Overdue Days\",\n  toBeCollectedAmount: \"To Be Collected Amount\"\n};\nconst labelToKey = Object.fromEntries(Object.entries(keyToLabel).map(([k, v]) => [v, k]));\nconst cleanDate = value => {\n  const parsed = new Date(value);\n  return !isNaN(parsed) ? parsed.toISOString().split(\"T\")[0] : \"\";\n};\nconst UploadForm = () => {\n  const [rows, setRows] = useState([]);\n  useEffect(() => {\n    const saved = localStorage.getItem(\"uploadPreviewRows\");\n    if (saved) setRows(JSON.parse(saved));\n  }, []);\n  const handleFile = e => {\n    const file = e.target.files[0];\n    if (!file) return;\n    if (!file.name.endsWith('.xls') && !file.name.endsWith('.xlsx')) {\n      toast.error(\"❌ Please upload a valid Excel file\");\n      return;\n    }\n    const reader = new FileReader();\n    reader.onload = event => {\n      const wb = XLSX.read(event.target.result, {\n        type: \"binary\"\n      });\n      const sheet = wb.Sheets[wb.SheetNames[0]];\n      const raw = XLSX.utils.sheet_to_json(sheet, {\n        defval: \"\"\n      });\n      const mapped = raw.map(row => {\n        const obj = {};\n        finalFields.forEach(key => {\n          const label = keyToLabel[key];\n          let val = row[label] || \"\";\n          if (dateFields.includes(key)) val = cleanDate(val);\n          obj[key] = val;\n        });\n        return obj;\n      });\n      setRows(mapped);\n      localStorage.setItem(\"uploadPreviewRows\", JSON.stringify(mapped));\n      toast.success(\"📁 File uploaded & ready to review\");\n    };\n    reader.readAsBinaryString(file);\n  };\n  const getNextIndentNumber = async () => {\n    const counterRef = doc(db, \"Counters\", \"fleet_counter\");\n    return await runTransaction(db, async tx => {\n      const snap = await tx.get(counterRef);\n      if (!snap.exists()) throw new Error(\"Counter not found\");\n      const current = snap.data().nextFleetNo || 1;\n      tx.update(counterRef, {\n        nextFleetNo: current + 1\n      });\n      return current;\n    });\n  };\n  const convertDateFields = row => {\n    const out = {};\n    for (const [key, val] of Object.entries(row)) {\n      if (dateFields.includes(key)) {\n        const parsed = new Date(val);\n        out[key] = isNaN(parsed) ? val : Timestamp.fromDate(parsed);\n      } else {\n        out[key] = val;\n      }\n    }\n    return out;\n  };\n  const handleSubmitAll = async () => {\n    if (!rows.length) {\n      toast.warning(\"⚠️ No rows to submit\");\n      return;\n    }\n    try {\n      for (const row of rows) {\n        var _auth$currentUser;\n        const indentNo = await getNextIndentNumber();\n        const payload = {\n          indentNumber: indentNo,\n          ...convertDateFields(row),\n          isCurrent: true,\n          versionDate: new Date(),\n          updateDescription: \"Excel Upload\",\n          createdBy: ((_auth$currentUser = auth.currentUser) === null || _auth$currentUser === void 0 ? void 0 : _auth$currentUser.email) || \"anonymous\",\n          createdAt: new Date()\n        };\n        await addDoc(collection(db, \"fleet_records\"), payload);\n      }\n      toast.success(`✅ Uploaded ${rows.length} records`);\n      setRows([]);\n      localStorage.removeItem(\"uploadPreviewRows\");\n    } catch (err) {\n      console.error(err);\n      toast.error(\"❌ Upload failed: \" + err.message);\n    }\n  };\n  const downloadTemplate = () => {\n    const sampleRow = {};\n    finalFields.forEach(key => {\n      sampleRow[keyToLabel[key]] = dateFields.includes(key) ? \"2025-07-01\" : \"Sample\";\n    });\n    const ws = XLSX.utils.json_to_sheet([sampleRow]);\n    const wb = XLSX.utils.book_new();\n    XLSX.utils.book_append_sheet(wb, ws, \"Template\");\n    XLSX.writeFile(wb, \"FleetUploadTemplate.xlsx\");\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container mt-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 7\n    }\n  }, \"\\uD83D\\uDCE4 Upload Excel File\"), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: \"flex\",\n      gap: \"15px\",\n      marginTop: \"10px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"file\",\n    accept: \".xls,.xlsx\",\n    onChange: handleFile,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn btn-secondary\",\n    onClick: downloadTemplate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 9\n    }\n  }, \"\\u2B07\\uFE0F Download Template\")), rows.length > 0 && /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      marginTop: \"25px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h5\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 11\n    }\n  }, \"\\uD83D\\uDCC4 Preview & Edit\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"table-scroll-x\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"table\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 17\n    }\n  }, finalFields.map(key => /*#__PURE__*/React.createElement(\"th\", {\n    key: key,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 21\n    }\n  }, keyToLabel[key])))), /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 15\n    }\n  }, rows.map((row, rowIndex) => /*#__PURE__*/React.createElement(\"tr\", {\n    key: rowIndex,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 19\n    }\n  }, finalFields.map(key => /*#__PURE__*/React.createElement(\"td\", {\n    key: key,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 23\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: dateFields.includes(key) ? \"date\" : \"text\",\n    value: row[key],\n    onChange: e => {\n      const updated = [...rows];\n      updated[rowIndex][key] = e.target.value;\n      setRows(updated);\n      localStorage.setItem(\"uploadPreviewRows\", JSON.stringify(updated));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 25\n    }\n  })))))))), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      textAlign: \"right\",\n      marginTop: \"15px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleSubmitAll,\n    className: \"btn btn-success me-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 13\n    }\n  }, \"\\u2705 Submit All Records\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => {\n      setRows([]);\n      localStorage.removeItem(\"uploadPreviewRows\");\n      toast.info(\"🧹 Cleared preview data\");\n    },\n    className: \"btn btn-warning\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 13\n    }\n  }, \"\\uD83D\\uDD04 Upload New Sheet\"))));\n};\n// UploadForm.js (add this at the end)\nexport const handleExcelUpload = (file, setRowsCallback) => {\n  const reader = new FileReader();\n  reader.onload = event => {\n    const workbook = XLSX.read(event.target.result, {\n      type: \"binary\"\n    });\n    const sheet = workbook.Sheets[workbook.SheetNames[0]];\n    const raw = XLSX.utils.sheet_to_json(sheet, {\n      defval: \"\"\n    });\n    const mapped = raw.map(row => {\n      const result = {};\n      finalFields.forEach(key => {\n        const label = keyToLabel[key];\n        let val = row[label] || \"\";\n        if (dateFields.includes(key)) val = cleanDate(val);\n        result[key] = val;\n      });\n      return result;\n    });\n    localStorage.setItem(\"uploadPreviewRows\", JSON.stringify(mapped));\n    toast.success(\"✅ Excel data ready. Scroll to preview & submit.\");\n    setRowsCallback(mapped);\n  };\n  reader.readAsBinaryString(file);\n};\nexport default UploadForm;","map":{"version":3,"names":["React","useState","useEffect","XLSX","db","auth","collection","addDoc","doc","runTransaction","Timestamp","toast","finalFields","dateFields","keyToLabel","date","deliveryDate","months","origin","destination","customer","customerType","vehicleNo","vendor","salesRate","buyRate","toBeAdvance","advanceReceived","advDeviation","advanceRecDate","validatedAdvanceUTRDescription","validatedAdvanceAmount","balance","processingCharges","inwardMisCharges","outwardMisCharges","balanceReceived","remainingBalance","balanceRecDate","validatedBalanceUTR","validatedBalanceUTRAmount","vendorOutwardPayment","paidAmount","balancePending","vendorRemark","podVendorDate","podSendToCustomerDate","docNo","podCustomerRec","today","balanceOverdueDays","toBeCollectedAmount","labelToKey","Object","fromEntries","entries","map","k","v","cleanDate","value","parsed","Date","isNaN","toISOString","split","UploadForm","rows","setRows","saved","localStorage","getItem","JSON","parse","handleFile","e","file","target","files","name","endsWith","error","reader","FileReader","onload","event","wb","read","result","type","sheet","Sheets","SheetNames","raw","utils","sheet_to_json","defval","mapped","row","obj","forEach","key","label","val","includes","setItem","stringify","success","readAsBinaryString","getNextIndentNumber","counterRef","tx","snap","get","exists","Error","current","data","nextFleetNo","update","convertDateFields","out","fromDate","handleSubmitAll","length","warning","_auth$currentUser","indentNo","payload","indentNumber","isCurrent","versionDate","updateDescription","createdBy","currentUser","email","createdAt","removeItem","err","console","message","downloadTemplate","sampleRow","ws","json_to_sheet","book_new","book_append_sheet","writeFile","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","style","display","gap","marginTop","accept","onChange","onClick","rowIndex","updated","textAlign","info","handleExcelUpload","setRowsCallback","workbook"],"sources":["C:/Users/anupp/Downloads/fleet-billing-app/fleet-billing-app/src/components/UploadForm.js"],"sourcesContent":["// UploadForm.js\r\nimport React, { useState, useEffect } from \"react\";\r\nimport * as XLSX from \"xlsx\";\r\nimport { db, auth } from \"../firebase\";\r\nimport {\r\n  collection,\r\n  addDoc,\r\n  doc,\r\n  runTransaction,\r\n  Timestamp,\r\n} from \"firebase/firestore\";\r\nimport { toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\n// Final field structure\r\nconst finalFields = [\r\n  // Fixed\r\n  \"date\", \"deliveryDate\", \"months\", \"origin\", \"destination\", \"customer\", \"customerType\", \"vehicleNo\", \"vendor\", \"salesRate\", \"buyRate\",\r\n  // Customer\r\n  \"toBeAdvance\", \"advanceReceived\", \"advDeviation\", \"advanceRecDate\", \"validatedAdvanceUTRDescription\", \"validatedAdvanceAmount\", \"balance\", \"processingCharges\", \"inwardMisCharges\", \"outwardMisCharges\", \"balanceReceived\", \"remainingBalance\", \"balanceRecDate\", \"validatedBalanceUTR\", \"validatedBalanceUTRAmount\",\r\n  // Vendor\r\n  \"vendorOutwardPayment\", \"paidAmount\", \"balancePending\", \"vendorRemark\",\r\n  // POD\r\n  \"podVendorDate\", \"podSendToCustomerDate\", \"docNo\", \"podCustomerRec\", \"today\", \"balanceOverdueDays\", \"toBeCollectedAmount\"\r\n];\r\n\r\nconst dateFields = [\r\n  \"date\", \"deliveryDate\", \"advanceRecDate\", \"balanceRecDate\",\r\n  \"podVendorDate\", \"podSendToCustomerDate\", \"podCustomerRec\", \"today\"\r\n];\r\n\r\n// Label ↔ Key mapping\r\nconst keyToLabel = {\r\n  // Fixed\r\n  date: \"Placement Date\",\r\n  deliveryDate: \"Delivery Date\",\r\n  months: \"Months\",\r\n  origin: \"Origin\",\r\n  destination: \"Destination\",\r\n  customer: \"Customer\",\r\n  customerType: \"Customer Type\",\r\n  vehicleNo: \"Vehicle No\",\r\n  vendor: \"Vendor\",\r\n  salesRate: \"Sales Rate\",\r\n  buyRate: \"Buy Rate\",\r\n\r\n  // Customer Master\r\n  toBeAdvance: \"To Be Advance(Sales)\",\r\n  advanceReceived: \"Advance/Payment Received\",\r\n  advDeviation: \"Adv Deviation(as on Date)\",\r\n  advanceRecDate: \"Advance Rec Date\",\r\n  validatedAdvanceUTRDescription: \"Validated-Advance UTR Discription\",\r\n  validatedAdvanceAmount: \"Validated UTR -Advance Amount\",\r\n  balance: \"Balance\",\r\n  processingCharges: \"Processing charges\",\r\n  inwardMisCharges: \"Inward-Mis Charges\",\r\n  outwardMisCharges: \"Outward-Mis Charges\",\r\n  balanceReceived: \"Bal Receved\",\r\n  remainingBalance: \"Remaining Balance\",\r\n  balanceRecDate: \"Balance Rec Date\",\r\n  validatedBalanceUTR: \"Validated-Balance UTR\",\r\n  validatedBalanceUTRAmount: \"Validate Balance UTR-Amount\",\r\n\r\n  // Vendor Master\r\n  vendorOutwardPayment: \"Vendor Outward Payment\",\r\n  paidAmount: \"Paid Amount\",\r\n  balancePending: \"Balance Pending\",\r\n  vendorRemark: \"Vendor Remark\",\r\n\r\n  // POD Master\r\n  podVendorDate: \"POD Rev-Vendor-Date\",\r\n  podSendToCustomerDate: \"POD-Send to Customer Date\",\r\n  docNo: \"Doc No\",\r\n  podCustomerRec: \"POD-Customer Rec\",\r\n  today: \"Today\",\r\n  balanceOverdueDays: \"Balance Overdue Days\",\r\n  toBeCollectedAmount: \"To Be Collected Amount\"\r\n};\r\n\r\nconst labelToKey = Object.fromEntries(Object.entries(keyToLabel).map(([k, v]) => [v, k]));\r\n\r\nconst cleanDate = (value) => {\r\n  const parsed = new Date(value);\r\n  return !isNaN(parsed) ? parsed.toISOString().split(\"T\")[0] : \"\";\r\n};\r\n\r\nconst UploadForm = () => {\r\n  const [rows, setRows] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const saved = localStorage.getItem(\"uploadPreviewRows\");\r\n    if (saved) setRows(JSON.parse(saved));\r\n  }, []);\r\n\r\n  const handleFile = (e) => {\r\n    const file = e.target.files[0];\r\n    if (!file) return;\r\n    if (!file.name.endsWith('.xls') && !file.name.endsWith('.xlsx')) {\r\n      toast.error(\"❌ Please upload a valid Excel file\");\r\n      return;\r\n    }\r\n\r\n    const reader = new FileReader();\r\n    reader.onload = (event) => {\r\n      const wb = XLSX.read(event.target.result, { type: \"binary\" });\r\n      const sheet = wb.Sheets[wb.SheetNames[0]];\r\n      const raw = XLSX.utils.sheet_to_json(sheet, { defval: \"\" });\r\n\r\n      const mapped = raw.map((row) => {\r\n        const obj = {};\r\n        finalFields.forEach((key) => {\r\n          const label = keyToLabel[key];\r\n          let val = row[label] || \"\";\r\n          if (dateFields.includes(key)) val = cleanDate(val);\r\n          obj[key] = val;\r\n        });\r\n        return obj;\r\n      });\r\n\r\n      setRows(mapped);\r\n      localStorage.setItem(\"uploadPreviewRows\", JSON.stringify(mapped));\r\n      toast.success(\"📁 File uploaded & ready to review\");\r\n    };\r\n\r\n    reader.readAsBinaryString(file);\r\n  };\r\n\r\n  const getNextIndentNumber = async () => {\r\n    const counterRef = doc(db, \"Counters\", \"fleet_counter\");\r\n    return await runTransaction(db, async (tx) => {\r\n      const snap = await tx.get(counterRef);\r\n      if (!snap.exists()) throw new Error(\"Counter not found\");\r\n      const current = snap.data().nextFleetNo || 1;\r\n      tx.update(counterRef, { nextFleetNo: current + 1 });\r\n      return current;\r\n    });\r\n  };\r\n\r\n  const convertDateFields = (row) => {\r\n    const out = {};\r\n    for (const [key, val] of Object.entries(row)) {\r\n      if (dateFields.includes(key)) {\r\n        const parsed = new Date(val);\r\n        out[key] = isNaN(parsed) ? val : Timestamp.fromDate(parsed);\r\n      } else {\r\n        out[key] = val;\r\n      }\r\n    }\r\n    return out;\r\n  };\r\n\r\n  const handleSubmitAll = async () => {\r\n    if (!rows.length) {\r\n      toast.warning(\"⚠️ No rows to submit\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      for (const row of rows) {\r\n        const indentNo = await getNextIndentNumber();\r\n        const payload = {\r\n          indentNumber: indentNo,\r\n          ...convertDateFields(row),\r\n          isCurrent: true,\r\n          versionDate: new Date(),\r\n          updateDescription: \"Excel Upload\",\r\n          createdBy: auth.currentUser?.email || \"anonymous\",\r\n          createdAt: new Date()\r\n        };\r\n        await addDoc(collection(db, \"fleet_records\"), payload);\r\n      }\r\n\r\n      toast.success(`✅ Uploaded ${rows.length} records`);\r\n      setRows([]);\r\n      localStorage.removeItem(\"uploadPreviewRows\");\r\n    } catch (err) {\r\n      console.error(err);\r\n      toast.error(\"❌ Upload failed: \" + err.message);\r\n    }\r\n  };\r\n\r\n  const downloadTemplate = () => {\r\n    const sampleRow = {};\r\n    finalFields.forEach((key) => {\r\n      sampleRow[keyToLabel[key]] = dateFields.includes(key) ? \"2025-07-01\" : \"Sample\";\r\n    });\r\n\r\n    const ws = XLSX.utils.json_to_sheet([sampleRow]);\r\n    const wb = XLSX.utils.book_new();\r\n    XLSX.utils.book_append_sheet(wb, ws, \"Template\");\r\n    XLSX.writeFile(wb, \"FleetUploadTemplate.xlsx\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"container mt-4\">\r\n      <h4>📤 Upload Excel File</h4>\r\n      <div style={{ display: \"flex\", gap: \"15px\", marginTop: \"10px\" }}>\r\n        <input type=\"file\" accept=\".xls,.xlsx\" onChange={handleFile} />\r\n        <button className=\"btn btn-secondary\" onClick={downloadTemplate}>\r\n          ⬇️ Download Template\r\n        </button>\r\n      </div>\r\n\r\n      {rows.length > 0 && (\r\n        <div style={{ marginTop: \"25px\" }}>\r\n          <h5>📄 Preview & Edit</h5>\r\n          <div className=\"table-scroll-x\">\r\n            <table>\r\n              <thead>\r\n                <tr>\r\n                  {finalFields.map((key) => (\r\n                    <th key={key}>{keyToLabel[key]}</th>\r\n                  ))}\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {rows.map((row, rowIndex) => (\r\n                  <tr key={rowIndex}>\r\n                    {finalFields.map((key) => (\r\n                      <td key={key}>\r\n                        <input\r\n                          type={dateFields.includes(key) ? \"date\" : \"text\"}\r\n                          value={row[key]}\r\n                          onChange={(e) => {\r\n                            const updated = [...rows];\r\n                            updated[rowIndex][key] = e.target.value;\r\n                            setRows(updated);\r\n                            localStorage.setItem(\"uploadPreviewRows\", JSON.stringify(updated));\r\n                          }}\r\n                        />\r\n                      </td>\r\n                    ))}\r\n                  </tr>\r\n                ))}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n          <div style={{ textAlign: \"right\", marginTop: \"15px\" }}>\r\n            <button onClick={handleSubmitAll} className=\"btn btn-success me-3\">\r\n              ✅ Submit All Records\r\n            </button>\r\n            <button\r\n              onClick={() => {\r\n                setRows([]);\r\n                localStorage.removeItem(\"uploadPreviewRows\");\r\n                toast.info(\"🧹 Cleared preview data\");\r\n              }}\r\n              className=\"btn btn-warning\"\r\n            >\r\n              🔄 Upload New Sheet\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n// UploadForm.js (add this at the end)\r\nexport const handleExcelUpload = (file, setRowsCallback) => {\r\n  const reader = new FileReader();\r\n  reader.onload = (event) => {\r\n    const workbook = XLSX.read(event.target.result, { type: \"binary\" });\r\n    const sheet = workbook.Sheets[workbook.SheetNames[0]];\r\n    const raw = XLSX.utils.sheet_to_json(sheet, { defval: \"\" });\r\n\r\n    const mapped = raw.map((row) => {\r\n      const result = {};\r\n      finalFields.forEach((key) => {\r\n        const label = keyToLabel[key];\r\n        let val = row[label] || \"\";\r\n        if (dateFields.includes(key)) val = cleanDate(val);\r\n        result[key] = val;\r\n      });\r\n      return result;\r\n    });\r\n\r\n    localStorage.setItem(\"uploadPreviewRows\", JSON.stringify(mapped));\r\n    toast.success(\"✅ Excel data ready. Scroll to preview & submit.\");\r\n    setRowsCallback(mapped);\r\n  };\r\n  reader.readAsBinaryString(file);\r\n};\r\n\r\nexport default UploadForm;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}