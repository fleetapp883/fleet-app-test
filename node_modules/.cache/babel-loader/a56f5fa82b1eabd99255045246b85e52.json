{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anupp\\\\Downloads\\\\fleet-billing-app\\\\fleet-billing-app\\\\src\\\\components\\\\UploadForm.js\";\n// UploadForm.js\nimport React, { useState, useEffect } from \"react\";\nimport * as XLSX from \"xlsx\";\nimport { db, auth } from \"../firebase\";\nimport { collection, addDoc, doc, runTransaction, Timestamp } from \"firebase/firestore\";\nimport { confirmAlert } from \"react-confirm-alert\";\nimport \"react-confirm-alert/src/react-confirm-alert.css\";\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\n// 1. Final field structure (flattened)\nconst finalFields = [\n// Fixed\n\"date\", \"deliveryDate\", \"months\", \"origin\", \"destination\", \"customer\", \"customerType\", \"vehicleNo\", \"vendor\", \"salesRate\", \"buyRate\",\n// Customer\n\"toBeAdvance\", \"advanceReceived\", \"advDeviation\", \"advanceRecDate\", \"validatedAdvanceUTRDescription\", \"validatedAdvanceAmount\", \"balance\", \"processingCharges\", \"inwardMisCharges\", \"outwardMisCharges\", \"balanceReceived\", \"remainingBalance\", \"balanceRecDate\", \"validatedBalanceUTR\", \"validatedBalanceUTRAmount\",\n// Vendor\n\"vendorOutwardPayment\", \"paidAmount\", \"balancePending\", \"vendorRemark\",\n// POD\n\"podVendorDate\", \"podSendToCustomerDate\", \"docNo\", \"podCustomerRec\", \"today\", \"balanceOverdueDays\", \"toBeCollectedAmount\"];\nconst keyToLabel = {\n  \"date\": \"Placement Date\",\n  \"deliveryDate\": \"Delivery Date\",\n  \"months\": \"Months\",\n  \"origin\": \"Origin\",\n  \"destination\": \"Destination\",\n  \"customer\": \"Customer\",\n  \"customerType\": \"Customer Type\",\n  \"vehicleNo\": \"Vehicle No\",\n  \"vendor\": \"Vendor\",\n  \"salesRate\": \"Sales Rate\",\n  \"buyRate\": \"Buy Rate\",\n  \"toBeAdvance\": \"To be Advance (Sales)\",\n  \"advanceReceived\": \"Advance/Payment Received\",\n  \"advDeviation\": \"Adv Deviation (as on Date)\",\n  \"advanceRecDate\": \"Advance Rec Date\",\n  \"validatedAdvanceUTRDescription\": \"Validated-Advance UTR Description\",\n  \"validatedAdvanceAmount\": \"Validated UTR -Advance Amount\",\n  \"balance\": \"Balance\",\n  \"processingCharges\": \"Processing Charges\",\n  \"inwardMisCharges\": \"Inward-Mis Charges\",\n  \"outwardMisCharges\": \"Outward-Mis Charges\",\n  \"balanceReceived\": \"Bal Received\",\n  \"remainingBalance\": \"Remaining Balance\",\n  \"balanceRecDate\": \"Balance Rec Date\",\n  \"validatedBalanceUTR\": \"Validated-Balance UTR\",\n  \"validatedBalanceUTRAmount\": \"Validate Balance UTR-Amount\",\n  \"vendorOutwardPayment\": \"Vendor Outward Payment\",\n  \"paidAmount\": \"Paid Amount\",\n  \"balancePending\": \"Balance Pending\",\n  \"vendorRemark\": \"Vendor Remark\",\n  \"podVendorDate\": \"POD Rev-Vendor-Date\",\n  \"podSendToCustomerDate\": \"POD-Send to Customer Date\",\n  \"docNo\": \"Doc No\",\n  \"podCustomerRec\": \"POD-Customer Rec\",\n  \"today\": \"Today\",\n  \"balanceOverdueDays\": \"Balance Overdue Days\",\n  \"toBeCollectedAmount\": \"To be Collected Amount\"\n};\nconst labelToKey = Object.fromEntries(Object.entries(keyToLabel).map(([k, v]) => [v, k]));\nconst dateFields = [\"date\", \"deliveryDate\", \"advanceRecDate\", \"balanceRecDate\", \"podVendorDate\", \"podSendToCustomerDate\", \"podCustomerRec\", \"today\"];\nconst cleanDate = value => {\n  const parsed = new Date(value);\n  return !isNaN(parsed) ? parsed.toISOString().split(\"T\")[0] : \"\";\n};\nconst UploadForm = () => {\n  const [rows, setRows] = useState([]);\n  const [fileName, setFileName] = useState(\"\");\n  useEffect(() => {\n    const saved = localStorage.getItem(\"uploadPreviewRows\");\n    if (saved) {\n      setRows(JSON.parse(saved));\n    }\n  }, []);\n  const handleFile = e => {\n    const file = e.target.files[0];\n    if (!file) return;\n    if (!file.name.endsWith(\".xls\") && !file.name.endsWith(\".xlsx\")) {\n      toast.error(\"❌ Please upload a valid Excel file (.xls or .xlsx)\");\n      return;\n    }\n    setFileName(file.name);\n    const reader = new FileReader();\n    reader.onload = event => {\n      const workbook = XLSX.read(event.target.result, {\n        type: \"binary\"\n      });\n      const sheet = workbook.Sheets[workbook.SheetNames[0]];\n      const jsonData = XLSX.utils.sheet_to_json(sheet, {\n        defval: \"\"\n      });\n      const processed = jsonData.map(row => {\n        const result = {};\n        Object.entries(row).forEach(([label, value]) => {\n          const key = labelToKey[label];\n          if (key) {\n            result[key] = dateFields.includes(key) ? cleanDate(value) : value;\n          }\n        });\n        return result;\n      });\n      setRows(processed);\n      localStorage.setItem(\"uploadPreviewRows\", JSON.stringify(processed));\n    };\n    reader.readAsBinaryString(file);\n  };\n  const handleSubmitAll = async () => {\n    if (!rows.length) {\n      toast.warn(\"⚠️ No data to submit\");\n      return;\n    }\n    try {\n      const batch = [];\n      for (const row of rows) {\n        var _auth$currentUser;\n        const indentNo = await getNextIndentNumber();\n        const enriched = {\n          indentNumber: indentNo,\n          ...convertDateFields(row),\n          createdAt: new Date(),\n          createdBy: ((_auth$currentUser = auth.currentUser) === null || _auth$currentUser === void 0 ? void 0 : _auth$currentUser.email) || \"anonymous\",\n          isCurrent: true,\n          versionDate: new Date(),\n          updateDescription: \"Excel Upload\"\n        };\n        await addDoc(collection(db, \"fleet_records\"), enriched);\n        batch.push(indentNo);\n      }\n      toast.success(`✅ Uploaded ${batch.length} records`);\n      localStorage.removeItem(\"uploadPreviewRows\");\n      setRows([]);\n    } catch (err) {\n      console.error(err);\n      toast.error(\"❌ Upload failed: \" + err.message);\n    }\n  };\n  const convertDateFields = data => {\n    const result = {};\n    Object.entries(data).forEach(([key, val]) => {\n      if (dateFields.includes(key)) {\n        const parsed = new Date(val);\n        result[key] = isNaN(parsed) ? val : Timestamp.fromDate(parsed);\n      } else {\n        result[key] = val;\n      }\n    });\n    return result;\n  };\n  const getNextIndentNumber = async () => {\n    const counterRef = doc(db, \"Counters\", \"fleet_counter\");\n    const newIndentNo = await runTransaction(db, async transaction => {\n      const docSnap = await transaction.get(counterRef);\n      if (!docSnap.exists()) throw new Error(\"Counter doc missing\");\n      const current = docSnap.data().nextFleetNo || 1;\n      transaction.update(counterRef, {\n        nextFleetNo: current + 1\n      });\n      return current;\n    });\n    return newIndentNo;\n  };\n  const downloadTemplate = () => {\n    const headers = Object.values(keyToLabel); // Human labels\n    const fieldKeys = Object.keys(keyToLabel); // Firestore keys\n\n    const sampleRow = {};\n    fieldKeys.forEach(key => {\n      sampleRow[key] = dateFields.includes(key) ? \"2025-07-01\" : \"\";\n    });\n    const wb = XLSX.utils.book_new();\n    const ws = XLSX.utils.json_to_sheet([sampleRow], {\n      header: fieldKeys,\n      skipHeader: true,\n      origin: \"A2\"\n    });\n    headers.forEach((label, index) => {\n      const cell = XLSX.utils.encode_cell({\n        c: index,\n        r: 0\n      });\n      ws[cell] = {\n        v: label\n      };\n    });\n    XLSX.utils.book_append_sheet(wb, ws, \"FleetUploadTemplate\");\n    XLSX.writeFile(wb, \"FleetUploadTemplate.xlsx\");\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container mt-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 7\n    }\n  }, \"\\uD83D\\uDCE4 Upload Excel File\"), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: \"flex\",\n      alignItems: \"center\",\n      gap: \"15px\",\n      marginTop: \"10px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"file\",\n    accept: \".xlsx, .xls\",\n    onChange: handleFile,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn btn-secondary\",\n    onClick: downloadTemplate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 9\n    }\n  }, \"\\u2B07\\uFE0F Download Template\")), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      marginTop: \"20px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 7\n    }\n  }, rows.length > 0 && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h5\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 13\n    }\n  }, \"\\uD83D\\uDCC4 Preview & Edit Data\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"table-scroll-x\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"table\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 19\n    }\n  }, Object.keys(rows[0]).map(col => /*#__PURE__*/React.createElement(\"th\", {\n    key: col,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 23\n    }\n  }, keyToLabel[col] || col)))), /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 17\n    }\n  }, rows.map((row, rowIndex) => /*#__PURE__*/React.createElement(\"tr\", {\n    key: rowIndex,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 21\n    }\n  }, Object.keys(row).map(col => /*#__PURE__*/React.createElement(\"td\", {\n    key: col,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: dateFields.includes(col) ? \"date\" : \"text\",\n    value: row[col],\n    onChange: e => {\n      const updated = [...rows];\n      updated[rowIndex][col] = e.target.value;\n      setRows(updated);\n      localStorage.setItem(\"uploadPreviewRows\", JSON.stringify(updated));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 27\n    }\n  })))))))), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      textAlign: \"right\",\n      marginTop: \"20px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleSubmitAll,\n    className: \"btn btn-success me-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 15\n    }\n  }, \"\\u2705 Submit All Records\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => {\n      setRows([]);\n      localStorage.removeItem(\"uploadPreviewRows\");\n      toast.info(\"🧹 Cleared uploaded preview data\");\n    },\n    className: \"btn btn-warning\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 15\n    }\n  }, \"\\uD83D\\uDD04 Upload New Sheet\")))));\n};\nexport default UploadForm;","map":{"version":3,"names":["React","useState","useEffect","XLSX","db","auth","collection","addDoc","doc","runTransaction","Timestamp","confirmAlert","toast","finalFields","keyToLabel","labelToKey","Object","fromEntries","entries","map","k","v","dateFields","cleanDate","value","parsed","Date","isNaN","toISOString","split","UploadForm","rows","setRows","fileName","setFileName","saved","localStorage","getItem","JSON","parse","handleFile","e","file","target","files","name","endsWith","error","reader","FileReader","onload","event","workbook","read","result","type","sheet","Sheets","SheetNames","jsonData","utils","sheet_to_json","defval","processed","row","forEach","label","key","includes","setItem","stringify","readAsBinaryString","handleSubmitAll","length","warn","batch","_auth$currentUser","indentNo","getNextIndentNumber","enriched","indentNumber","convertDateFields","createdAt","createdBy","currentUser","email","isCurrent","versionDate","updateDescription","push","success","removeItem","err","console","message","data","val","fromDate","counterRef","newIndentNo","transaction","docSnap","get","exists","Error","current","nextFleetNo","update","downloadTemplate","headers","values","fieldKeys","keys","sampleRow","wb","book_new","ws","json_to_sheet","header","skipHeader","origin","index","cell","encode_cell","c","r","book_append_sheet","writeFile","createElement","className","__self","__source","_jsxFileName","lineNumber","columnNumber","style","display","alignItems","gap","marginTop","accept","onChange","onClick","Fragment","col","rowIndex","updated","textAlign","info"],"sources":["C:/Users/anupp/Downloads/fleet-billing-app/fleet-billing-app/src/components/UploadForm.js"],"sourcesContent":["// UploadForm.js\r\nimport React, { useState, useEffect } from \"react\";\r\nimport * as XLSX from \"xlsx\";\r\nimport { db, auth } from \"../firebase\";\r\nimport {\r\n  collection,\r\n  addDoc,\r\n  doc,\r\n  runTransaction,\r\n  Timestamp,\r\n} from \"firebase/firestore\";\r\nimport { confirmAlert } from \"react-confirm-alert\";\r\nimport \"react-confirm-alert/src/react-confirm-alert.css\";\r\nimport { toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\n// 1. Final field structure (flattened)\r\nconst finalFields = [\r\n  // Fixed\r\n  \"date\", \"deliveryDate\", \"months\", \"origin\", \"destination\", \"customer\", \"customerType\", \"vehicleNo\", \"vendor\", \"salesRate\", \"buyRate\",\r\n  // Customer\r\n  \"toBeAdvance\", \"advanceReceived\", \"advDeviation\", \"advanceRecDate\", \"validatedAdvanceUTRDescription\", \"validatedAdvanceAmount\", \"balance\", \"processingCharges\", \"inwardMisCharges\", \"outwardMisCharges\", \"balanceReceived\", \"remainingBalance\", \"balanceRecDate\", \"validatedBalanceUTR\", \"validatedBalanceUTRAmount\",\r\n  // Vendor\r\n  \"vendorOutwardPayment\", \"paidAmount\", \"balancePending\", \"vendorRemark\",\r\n  // POD\r\n  \"podVendorDate\", \"podSendToCustomerDate\", \"docNo\", \"podCustomerRec\", \"today\", \"balanceOverdueDays\", \"toBeCollectedAmount\"\r\n];\r\n\r\nconst keyToLabel = {\r\n  \"date\": \"Placement Date\",\r\n  \"deliveryDate\": \"Delivery Date\",\r\n  \"months\": \"Months\",\r\n  \"origin\": \"Origin\",\r\n  \"destination\": \"Destination\",\r\n  \"customer\": \"Customer\",\r\n  \"customerType\": \"Customer Type\",\r\n  \"vehicleNo\": \"Vehicle No\",\r\n  \"vendor\": \"Vendor\",\r\n  \"salesRate\": \"Sales Rate\",\r\n  \"buyRate\": \"Buy Rate\",\r\n  \"toBeAdvance\": \"To be Advance (Sales)\",\r\n  \"advanceReceived\": \"Advance/Payment Received\",\r\n  \"advDeviation\": \"Adv Deviation (as on Date)\",\r\n  \"advanceRecDate\": \"Advance Rec Date\",\r\n  \"validatedAdvanceUTRDescription\": \"Validated-Advance UTR Description\",\r\n  \"validatedAdvanceAmount\": \"Validated UTR -Advance Amount\",\r\n  \"balance\": \"Balance\",\r\n  \"processingCharges\": \"Processing Charges\",\r\n  \"inwardMisCharges\": \"Inward-Mis Charges\",\r\n  \"outwardMisCharges\": \"Outward-Mis Charges\",\r\n  \"balanceReceived\": \"Bal Received\",\r\n  \"remainingBalance\": \"Remaining Balance\",\r\n  \"balanceRecDate\": \"Balance Rec Date\",\r\n  \"validatedBalanceUTR\": \"Validated-Balance UTR\",\r\n  \"validatedBalanceUTRAmount\": \"Validate Balance UTR-Amount\",\r\n  \"vendorOutwardPayment\": \"Vendor Outward Payment\",\r\n  \"paidAmount\": \"Paid Amount\",\r\n  \"balancePending\": \"Balance Pending\",\r\n  \"vendorRemark\": \"Vendor Remark\",\r\n  \"podVendorDate\": \"POD Rev-Vendor-Date\",\r\n  \"podSendToCustomerDate\": \"POD-Send to Customer Date\",\r\n  \"docNo\": \"Doc No\",\r\n  \"podCustomerRec\": \"POD-Customer Rec\",\r\n  \"today\": \"Today\",\r\n  \"balanceOverdueDays\": \"Balance Overdue Days\",\r\n  \"toBeCollectedAmount\": \"To be Collected Amount\"\r\n};\r\n\r\nconst labelToKey = Object.fromEntries(\r\n  Object.entries(keyToLabel).map(([k, v]) => [v, k])\r\n);\r\n\r\nconst dateFields = [\r\n  \"date\", \"deliveryDate\",\r\n  \"advanceRecDate\", \"balanceRecDate\",\r\n  \"podVendorDate\", \"podSendToCustomerDate\", \"podCustomerRec\", \"today\"\r\n];\r\n\r\nconst cleanDate = (value) => {\r\n  const parsed = new Date(value);\r\n  return !isNaN(parsed) ? parsed.toISOString().split(\"T\")[0] : \"\";\r\n};\r\n\r\nconst UploadForm = () => {\r\n  const [rows, setRows] = useState([]);\r\n  const [fileName, setFileName] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    const saved = localStorage.getItem(\"uploadPreviewRows\");\r\n    if (saved) {\r\n      setRows(JSON.parse(saved));\r\n    }\r\n  }, []);\r\n\r\n  const handleFile = (e) => {\r\n    const file = e.target.files[0];\r\n    if (!file) return;\r\n    if (!file.name.endsWith(\".xls\") && !file.name.endsWith(\".xlsx\")) {\r\n      toast.error(\"❌ Please upload a valid Excel file (.xls or .xlsx)\");\r\n      return;\r\n    }\r\n\r\n    setFileName(file.name);\r\n    const reader = new FileReader();\r\n\r\n    reader.onload = (event) => {\r\n      const workbook = XLSX.read(event.target.result, { type: \"binary\" });\r\n      const sheet = workbook.Sheets[workbook.SheetNames[0]];\r\n      const jsonData = XLSX.utils.sheet_to_json(sheet, { defval: \"\" });\r\n\r\n      const processed = jsonData.map((row) => {\r\n        const result = {};\r\n        Object.entries(row).forEach(([label, value]) => {\r\n          const key = labelToKey[label];\r\n          if (key) {\r\n            result[key] = dateFields.includes(key) ? cleanDate(value) : value;\r\n          }\r\n        });\r\n        return result;\r\n      });\r\n\r\n      setRows(processed);\r\n      localStorage.setItem(\"uploadPreviewRows\", JSON.stringify(processed));\r\n    };\r\n\r\n    reader.readAsBinaryString(file);\r\n  };\r\n\r\n  const handleSubmitAll = async () => {\r\n    if (!rows.length) {\r\n      toast.warn(\"⚠️ No data to submit\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const batch = [];\r\n      for (const row of rows) {\r\n        const indentNo = await getNextIndentNumber();\r\n        const enriched = {\r\n          indentNumber: indentNo,\r\n          ...convertDateFields(row),\r\n          createdAt: new Date(),\r\n          createdBy: auth.currentUser?.email || \"anonymous\",\r\n          isCurrent: true,\r\n          versionDate: new Date(),\r\n          updateDescription: \"Excel Upload\"\r\n        };\r\n        await addDoc(collection(db, \"fleet_records\"), enriched);\r\n        batch.push(indentNo);\r\n      }\r\n\r\n      toast.success(`✅ Uploaded ${batch.length} records`);\r\n      localStorage.removeItem(\"uploadPreviewRows\");\r\n      setRows([]);\r\n    } catch (err) {\r\n      console.error(err);\r\n      toast.error(\"❌ Upload failed: \" + err.message);\r\n    }\r\n  };\r\n\r\n  const convertDateFields = (data) => {\r\n    const result = {};\r\n    Object.entries(data).forEach(([key, val]) => {\r\n      if (dateFields.includes(key)) {\r\n        const parsed = new Date(val);\r\n        result[key] = isNaN(parsed) ? val : Timestamp.fromDate(parsed);\r\n      } else {\r\n        result[key] = val;\r\n      }\r\n    });\r\n    return result;\r\n  };\r\n\r\n  const getNextIndentNumber = async () => {\r\n    const counterRef = doc(db, \"Counters\", \"fleet_counter\");\r\n    const newIndentNo = await runTransaction(db, async (transaction) => {\r\n      const docSnap = await transaction.get(counterRef);\r\n      if (!docSnap.exists()) throw new Error(\"Counter doc missing\");\r\n      const current = docSnap.data().nextFleetNo || 1;\r\n      transaction.update(counterRef, { nextFleetNo: current + 1 });\r\n      return current;\r\n    });\r\n    return newIndentNo;\r\n  };\r\n\r\n  const downloadTemplate = () => {\r\n    const headers = Object.values(keyToLabel); // Human labels\r\n    const fieldKeys = Object.keys(keyToLabel); // Firestore keys\r\n\r\n    const sampleRow = {};\r\n    fieldKeys.forEach((key) => {\r\n      sampleRow[key] = dateFields.includes(key) ? \"2025-07-01\" : \"\";\r\n    });\r\n\r\n    const wb = XLSX.utils.book_new();\r\n    const ws = XLSX.utils.json_to_sheet([sampleRow], {\r\n      header: fieldKeys,\r\n      skipHeader: true,\r\n      origin: \"A2\"\r\n    });\r\n\r\n    headers.forEach((label, index) => {\r\n      const cell = XLSX.utils.encode_cell({ c: index, r: 0 });\r\n      ws[cell] = { v: label };\r\n    });\r\n\r\n    XLSX.utils.book_append_sheet(wb, ws, \"FleetUploadTemplate\");\r\n    XLSX.writeFile(wb, \"FleetUploadTemplate.xlsx\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"container mt-4\">\r\n      <h4>📤 Upload Excel File</h4>\r\n      <div style={{ display: \"flex\", alignItems: \"center\", gap: \"15px\", marginTop: \"10px\" }}>\r\n        <input type=\"file\" accept=\".xlsx, .xls\" onChange={handleFile} />\r\n        <button className=\"btn btn-secondary\" onClick={downloadTemplate}>\r\n          ⬇️ Download Template\r\n        </button>\r\n      </div>\r\n\r\n      <div style={{ marginTop: \"20px\" }}>\r\n        {rows.length > 0 && (\r\n          <>\r\n            <h5>📄 Preview & Edit Data</h5>\r\n            <div className=\"table-scroll-x\">\r\n              <table>\r\n                <thead>\r\n                  <tr>\r\n                    {Object.keys(rows[0]).map((col) => (\r\n                      <th key={col}>{keyToLabel[col] || col}</th>\r\n                    ))}\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {rows.map((row, rowIndex) => (\r\n                    <tr key={rowIndex}>\r\n                      {Object.keys(row).map((col) => (\r\n                        <td key={col}>\r\n                          <input\r\n                            type={dateFields.includes(col) ? \"date\" : \"text\"}\r\n                            value={row[col]}\r\n                            onChange={(e) => {\r\n                              const updated = [...rows];\r\n                              updated[rowIndex][col] = e.target.value;\r\n                              setRows(updated);\r\n                              localStorage.setItem(\"uploadPreviewRows\", JSON.stringify(updated));\r\n                            }}\r\n                          />\r\n                        </td>\r\n                      ))}\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n            <div style={{ textAlign: \"right\", marginTop: \"20px\" }}>\r\n              <button onClick={handleSubmitAll} className=\"btn btn-success me-3\">\r\n                ✅ Submit All Records\r\n              </button>\r\n              <button\r\n                onClick={() => {\r\n                  setRows([]);\r\n                  localStorage.removeItem(\"uploadPreviewRows\");\r\n                  toast.info(\"🧹 Cleared uploaded preview data\");\r\n                }}\r\n                className=\"btn btn-warning\"\r\n              >\r\n                🔄 Upload New Sheet\r\n              </button>\r\n            </div>\r\n          </>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UploadForm;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}