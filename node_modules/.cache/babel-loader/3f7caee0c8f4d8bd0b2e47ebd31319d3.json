{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anupp\\\\Downloads\\\\fleet-billing-app\\\\fleet-billing-app\\\\src\\\\components\\\\UploadForm.js\";\n// UploadForm.js\nimport React, { useState, useEffect } from \"react\";\nimport * as XLSX from \"xlsx\";\nimport { db, auth } from \"../firebase\";\nimport { collection, addDoc, doc, runTransaction, Timestamp } from \"firebase/firestore\";\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\n// 1. Final field structure (flattened)\nconst finalFields = [\n// Fixed\n\"date\", \"deliveryDate\", \"months\", \"origin\", \"destination\", \"customer\", \"customerType\", \"vehicleNo\", \"vendor\", \"salesRate\", \"buyRate\",\n// Customer\n\"toBeAdvance\", \"advanceReceived\", \"advDeviation\", \"advanceRecDate\", \"validatedAdvanceUTRDescription\", \"validatedAdvanceAmount\", \"balance\", \"processingCharges\", \"inwardMisCharges\", \"outwardMisCharges\", \"balanceReceived\", \"remainingBalance\", \"balanceRecDate\", \"validatedBalanceUTR\", \"validatedBalanceUTRAmount\",\n// Vendor\n\"vendorOutwardPayment\", \"paidAmount\", \"balancePending\", \"vendorRemark\",\n// POD\n\"podVendorDate\", \"podSendToCustomerDate\", \"docNo\", \"podCustomerRec\", \"today\", \"balanceOverdueDays\", \"toBeCollectedAmount\"];\nconst dateFields = [\"date\", \"deliveryDate\", \"advanceRecDate\", \"balanceRecDate\", \"podVendorDate\", \"podSendToCustomerDate\", \"podCustomerRec\", \"today\"];\n\n// Mapping for human-readable labels\nconst keyToLabel = finalFields.reduce((acc, key) => {\n  const label = key.replace(/([a-z])([A-Z])/g, \"$1 $2\").replace(/_/g, \" \").replace(/^./, s => s.toUpperCase());\n  acc[key] = label;\n  return acc;\n}, {});\n\n// Reverse mapping for parsing uploaded Excel\nconst labelToKey = Object.entries(keyToLabel).reduce((acc, [key, label]) => {\n  acc[label] = key;\n  return acc;\n}, {});\nconst cleanDate = value => {\n  const parsed = new Date(value);\n  return !isNaN(parsed) ? parsed.toISOString().split(\"T\")[0] : \"\";\n};\nconst UploadForm = () => {\n  const [rows, setRows] = useState([]);\n  useEffect(() => {\n    const saved = localStorage.getItem(\"uploadPreviewRows\");\n    if (saved) {\n      setRows(JSON.parse(saved));\n    }\n  }, []);\n  const handleFile = e => {\n    const file = e.target.files[0];\n    if (!file) return;\n    if (!file.name.endsWith('.xls') && !file.name.endsWith('.xlsx')) {\n      toast.error(\"❌ Please upload a valid Excel file (.xls or .xlsx)\");\n      return;\n    }\n    const reader = new FileReader();\n    reader.onload = event => {\n      const workbook = XLSX.read(event.target.result, {\n        type: \"binary\"\n      });\n      const sheet = workbook.Sheets[workbook.SheetNames[0]];\n      const raw = XLSX.utils.sheet_to_json(sheet, {\n        defval: \"\"\n      });\n      const mapped = raw.map(row => {\n        const result = {};\n        finalFields.forEach(key => {\n          const label = keyToLabel[key];\n          let val = row[label] || \"\";\n          if (dateFields.includes(key)) val = cleanDate(val);\n          result[key] = val;\n        });\n        return result;\n      });\n      setRows(mapped);\n      localStorage.setItem(\"uploadPreviewRows\", JSON.stringify(mapped));\n    };\n    reader.readAsBinaryString(file);\n  };\n  const handleSubmitAll = async () => {\n    if (!rows.length) {\n      toast.warn(\"⚠️ No data to submit\");\n      return;\n    }\n    try {\n      const batch = [];\n      for (const row of rows) {\n        var _auth$currentUser;\n        const indentNo = await getNextIndentNumber();\n        const enriched = {\n          indentNumber: indentNo,\n          ...convertDateFields(row),\n          createdAt: new Date(),\n          createdBy: ((_auth$currentUser = auth.currentUser) === null || _auth$currentUser === void 0 ? void 0 : _auth$currentUser.email) || \"anonymous\",\n          isCurrent: true,\n          versionDate: new Date(),\n          updateDescription: \"Excel Upload\"\n        };\n        await addDoc(collection(db, \"fleet_records\"), enriched);\n        batch.push(indentNo);\n      }\n      toast.success(`✅ Uploaded ${batch.length} records`);\n      localStorage.removeItem(\"uploadPreviewRows\");\n      setRows([]);\n    } catch (err) {\n      console.error(err);\n      toast.error(\"❌ Upload failed: \" + err.message);\n    }\n  };\n  const getNextIndentNumber = async () => {\n    const counterRef = doc(db, \"Counters\", \"fleet_counter\");\n    return await runTransaction(db, async transaction => {\n      const snap = await transaction.get(counterRef);\n      if (!snap.exists()) throw new Error(\"Counter doc missing\");\n      const current = snap.data().nextFleetNo || 1;\n      transaction.update(counterRef, {\n        nextFleetNo: current + 1\n      });\n      return current;\n    });\n  };\n  const convertDateFields = data => {\n    const result = {};\n    Object.entries(data).forEach(([key, val]) => {\n      if (dateFields.includes(key)) {\n        const parsed = new Date(val);\n        result[key] = isNaN(parsed) ? val : Timestamp.fromDate(parsed);\n      } else {\n        result[key] = val;\n      }\n    });\n    return result;\n  };\n  const downloadTemplate = () => {\n    const sampleRow = {\n      // Fixed\n      \"Placement Date\": \"2025-07-01\",\n      \"Delivery Date\": \"2025-07-02\",\n      \"Months\": \"July\",\n      \"Origin\": \"Delhi\",\n      \"Destination\": \"Mumbai\",\n      \"Customer\": \"ABC Ltd.\",\n      \"Customer Type\": \"Regular\",\n      \"Vehicle No\": \"MH12AB1234\",\n      \"Vendor\": \"XYZ Logistics\",\n      \"Sales Rate\": \"1000\",\n      \"Buy Rate\": \"800\",\n      // Customer Master\n      \"To Be Advance(Sales)\": \"\",\n      \"Advance/Payment Received\": \"\",\n      \"Adv Deviation(as on Date)\": \"\",\n      \"Advance Rec Date\": \"2025-07-01\",\n      \"Validated-Advance UTR Discription\": \"\",\n      \"Validated UTR -Advance Amount\": \"\",\n      \"Balance\": \"\",\n      \"Processing charges\": \"\",\n      \"Inward-Mis Charges\": \"\",\n      \"Outward-Mis Charges\": \"\",\n      \"Bal Receved\": \"\",\n      \"Remaining Balance\": \"\",\n      \"Balance Rec Date\": \"2025-07-01\",\n      \"Validated-Balance UTR\": \"\",\n      \"Validate Balance UTR-Amount\": \"\",\n      // Vendor Master\n      \"Vendor Outward Payment\": \"\",\n      \"Paid Amount\": \"\",\n      \"Balance Pending\": \"\",\n      \"Vendor Remark\": \"\",\n      // POD Master\n      \"POD Rev-Vendor-Date\": \"2025-07-01\",\n      \"POD-Send to Customer Date\": \"2025-07-01\",\n      \"Doc No\": \"\",\n      \"POD-Customer Rec\": \"2025-07-01\",\n      \"Today\": \"2025-07-01\",\n      \"Balance Overdue Days\": \"\",\n      \"To Be Collected Amount\": \"\"\n    };\n    const sheet = XLSX.utils.json_to_sheet([sampleRow]);\n    const wb = XLSX.utils.book_new();\n    XLSX.utils.book_append_sheet(wb, sheet, \"Template\");\n    XLSX.writeFile(wb, \"FleetUploadTemplate.xlsx\");\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container mt-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 7\n    }\n  }, \"\\uD83D\\uDCE4 Upload Excel File\"), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: \"flex\",\n      gap: \"15px\",\n      marginTop: \"10px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"file\",\n    accept: \".xlsx, .xls\",\n    onChange: handleFile,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn btn-secondary\",\n    onClick: downloadTemplate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 9\n    }\n  }, \"\\u2B07\\uFE0F Download Template\")), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      marginTop: \"20px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 7\n    }\n  }, rows.length > 0 && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h5\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 13\n    }\n  }, \"\\uD83D\\uDCC4 Preview & Edit Data\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"table-scroll-x\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"table\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 19\n    }\n  }, finalFields.map(key => /*#__PURE__*/React.createElement(\"th\", {\n    key: key,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 23\n    }\n  }, keyToLabel[key])))), /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 17\n    }\n  }, rows.map((row, rowIndex) => /*#__PURE__*/React.createElement(\"tr\", {\n    key: rowIndex,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 21\n    }\n  }, finalFields.map(key => /*#__PURE__*/React.createElement(\"td\", {\n    key: key,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: dateFields.includes(key) ? \"date\" : \"text\",\n    value: row[key],\n    onChange: e => {\n      const updated = [...rows];\n      updated[rowIndex][key] = e.target.value;\n      setRows(updated);\n      localStorage.setItem(\"uploadPreviewRows\", JSON.stringify(updated));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 27\n    }\n  })))))))), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      textAlign: \"right\",\n      marginTop: \"20px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleSubmitAll,\n    className: \"btn btn-success me-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 15\n    }\n  }, \"\\u2705 Submit All Records\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => {\n      setRows([]);\n      localStorage.removeItem(\"uploadPreviewRows\");\n      toast.info(\"🧹 Cleared uploaded preview data\");\n    },\n    className: \"btn btn-warning\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 15\n    }\n  }, \"\\uD83D\\uDD04 Upload New Sheet\")))));\n};\nexport default UploadForm;","map":{"version":3,"names":["React","useState","useEffect","XLSX","db","auth","collection","addDoc","doc","runTransaction","Timestamp","toast","finalFields","dateFields","keyToLabel","reduce","acc","key","label","replace","s","toUpperCase","labelToKey","Object","entries","cleanDate","value","parsed","Date","isNaN","toISOString","split","UploadForm","rows","setRows","saved","localStorage","getItem","JSON","parse","handleFile","e","file","target","files","name","endsWith","error","reader","FileReader","onload","event","workbook","read","result","type","sheet","Sheets","SheetNames","raw","utils","sheet_to_json","defval","mapped","map","row","forEach","val","includes","setItem","stringify","readAsBinaryString","handleSubmitAll","length","warn","batch","_auth$currentUser","indentNo","getNextIndentNumber","enriched","indentNumber","convertDateFields","createdAt","createdBy","currentUser","email","isCurrent","versionDate","updateDescription","push","success","removeItem","err","console","message","counterRef","transaction","snap","get","exists","Error","current","data","nextFleetNo","update","fromDate","downloadTemplate","sampleRow","json_to_sheet","wb","book_new","book_append_sheet","writeFile","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","style","display","gap","marginTop","accept","onChange","onClick","Fragment","rowIndex","updated","textAlign","info"],"sources":["C:/Users/anupp/Downloads/fleet-billing-app/fleet-billing-app/src/components/UploadForm.js"],"sourcesContent":["// UploadForm.js\r\nimport React, { useState, useEffect } from \"react\";\r\nimport * as XLSX from \"xlsx\";\r\nimport { db, auth } from \"../firebase\";\r\nimport {\r\n  collection,\r\n  addDoc,\r\n  doc,\r\n  runTransaction,\r\n  Timestamp,\r\n} from \"firebase/firestore\";\r\nimport { toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\n// 1. Final field structure (flattened)\r\nconst finalFields = [\r\n  // Fixed\r\n  \"date\", \"deliveryDate\", \"months\", \"origin\", \"destination\", \"customer\", \"customerType\", \"vehicleNo\", \"vendor\", \"salesRate\", \"buyRate\",\r\n  // Customer\r\n  \"toBeAdvance\", \"advanceReceived\", \"advDeviation\", \"advanceRecDate\", \"validatedAdvanceUTRDescription\", \"validatedAdvanceAmount\", \"balance\", \"processingCharges\", \"inwardMisCharges\", \"outwardMisCharges\", \"balanceReceived\", \"remainingBalance\", \"balanceRecDate\", \"validatedBalanceUTR\", \"validatedBalanceUTRAmount\",\r\n  // Vendor\r\n  \"vendorOutwardPayment\", \"paidAmount\", \"balancePending\", \"vendorRemark\",\r\n  // POD\r\n  \"podVendorDate\", \"podSendToCustomerDate\", \"docNo\", \"podCustomerRec\", \"today\", \"balanceOverdueDays\", \"toBeCollectedAmount\"\r\n];\r\n\r\nconst dateFields = [\r\n  \"date\", \"deliveryDate\",\r\n  \"advanceRecDate\", \"balanceRecDate\",\r\n  \"podVendorDate\", \"podSendToCustomerDate\", \"podCustomerRec\", \"today\"\r\n];\r\n\r\n// Mapping for human-readable labels\r\nconst keyToLabel = finalFields.reduce((acc, key) => {\r\n  const label = key\r\n    .replace(/([a-z])([A-Z])/g, \"$1 $2\")\r\n    .replace(/_/g, \" \")\r\n    .replace(/^./, (s) => s.toUpperCase());\r\n  acc[key] = label;\r\n  return acc;\r\n}, {});\r\n\r\n// Reverse mapping for parsing uploaded Excel\r\nconst labelToKey = Object.entries(keyToLabel).reduce((acc, [key, label]) => {\r\n  acc[label] = key;\r\n  return acc;\r\n}, {});\r\n\r\nconst cleanDate = (value) => {\r\n  const parsed = new Date(value);\r\n  return !isNaN(parsed) ? parsed.toISOString().split(\"T\")[0] : \"\";\r\n};\r\n\r\nconst UploadForm = () => {\r\n  const [rows, setRows] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const saved = localStorage.getItem(\"uploadPreviewRows\");\r\n    if (saved) {\r\n      setRows(JSON.parse(saved));\r\n    }\r\n  }, []);\r\n\r\n  const handleFile = (e) => {\r\n    const file = e.target.files[0];\r\n    if (!file) return;\r\n    if (!file.name.endsWith('.xls') && !file.name.endsWith('.xlsx')) {\r\n      toast.error(\"❌ Please upload a valid Excel file (.xls or .xlsx)\");\r\n      return;\r\n    }\r\n\r\n    const reader = new FileReader();\r\n    reader.onload = (event) => {\r\n      const workbook = XLSX.read(event.target.result, { type: \"binary\" });\r\n      const sheet = workbook.Sheets[workbook.SheetNames[0]];\r\n      const raw = XLSX.utils.sheet_to_json(sheet, { defval: \"\" });\r\n\r\n      const mapped = raw.map((row) => {\r\n        const result = {};\r\n        finalFields.forEach((key) => {\r\n          const label = keyToLabel[key];\r\n          let val = row[label] || \"\";\r\n          if (dateFields.includes(key)) val = cleanDate(val);\r\n          result[key] = val;\r\n        });\r\n        return result;\r\n      });\r\n\r\n      setRows(mapped);\r\n      localStorage.setItem(\"uploadPreviewRows\", JSON.stringify(mapped));\r\n    };\r\n\r\n    reader.readAsBinaryString(file);\r\n  };\r\n\r\n  const handleSubmitAll = async () => {\r\n    if (!rows.length) {\r\n      toast.warn(\"⚠️ No data to submit\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const batch = [];\r\n      for (const row of rows) {\r\n        const indentNo = await getNextIndentNumber();\r\n        const enriched = {\r\n          indentNumber: indentNo,\r\n          ...convertDateFields(row),\r\n          createdAt: new Date(),\r\n          createdBy: auth.currentUser?.email || \"anonymous\",\r\n          isCurrent: true,\r\n          versionDate: new Date(),\r\n          updateDescription: \"Excel Upload\"\r\n        };\r\n        await addDoc(collection(db, \"fleet_records\"), enriched);\r\n        batch.push(indentNo);\r\n      }\r\n\r\n      toast.success(`✅ Uploaded ${batch.length} records`);\r\n      localStorage.removeItem(\"uploadPreviewRows\");\r\n      setRows([]);\r\n    } catch (err) {\r\n      console.error(err);\r\n      toast.error(\"❌ Upload failed: \" + err.message);\r\n    }\r\n  };\r\n\r\n  const getNextIndentNumber = async () => {\r\n    const counterRef = doc(db, \"Counters\", \"fleet_counter\");\r\n    return await runTransaction(db, async (transaction) => {\r\n      const snap = await transaction.get(counterRef);\r\n      if (!snap.exists()) throw new Error(\"Counter doc missing\");\r\n      const current = snap.data().nextFleetNo || 1;\r\n      transaction.update(counterRef, { nextFleetNo: current + 1 });\r\n      return current;\r\n    });\r\n  };\r\n\r\n  const convertDateFields = (data) => {\r\n    const result = {};\r\n    Object.entries(data).forEach(([key, val]) => {\r\n      if (dateFields.includes(key)) {\r\n        const parsed = new Date(val);\r\n        result[key] = isNaN(parsed) ? val : Timestamp.fromDate(parsed);\r\n      } else {\r\n        result[key] = val;\r\n      }\r\n    });\r\n    return result;\r\n  };\r\n\r\n  const downloadTemplate = () => {\r\n  const sampleRow = {\r\n    // Fixed\r\n    \"Placement Date\": \"2025-07-01\",\r\n    \"Delivery Date\": \"2025-07-02\",\r\n    \"Months\": \"July\",\r\n    \"Origin\": \"Delhi\",\r\n    \"Destination\": \"Mumbai\",\r\n    \"Customer\": \"ABC Ltd.\",\r\n    \"Customer Type\": \"Regular\",\r\n    \"Vehicle No\": \"MH12AB1234\",\r\n    \"Vendor\": \"XYZ Logistics\",\r\n    \"Sales Rate\": \"1000\",\r\n    \"Buy Rate\": \"800\",\r\n\r\n    // Customer Master\r\n    \"To Be Advance(Sales)\": \"\",\r\n    \"Advance/Payment Received\": \"\",\r\n    \"Adv Deviation(as on Date)\": \"\",\r\n    \"Advance Rec Date\": \"2025-07-01\",\r\n    \"Validated-Advance UTR Discription\": \"\",\r\n    \"Validated UTR -Advance Amount\": \"\",\r\n    \"Balance\": \"\",\r\n    \"Processing charges\": \"\",\r\n    \"Inward-Mis Charges\": \"\",\r\n    \"Outward-Mis Charges\": \"\",\r\n    \"Bal Receved\": \"\",\r\n    \"Remaining Balance\": \"\",\r\n    \"Balance Rec Date\": \"2025-07-01\",\r\n    \"Validated-Balance UTR\": \"\",\r\n    \"Validate Balance UTR-Amount\": \"\",\r\n\r\n    // Vendor Master\r\n    \"Vendor Outward Payment\": \"\",\r\n    \"Paid Amount\": \"\",\r\n    \"Balance Pending\": \"\",\r\n    \"Vendor Remark\": \"\",\r\n\r\n    // POD Master\r\n    \"POD Rev-Vendor-Date\": \"2025-07-01\",\r\n    \"POD-Send to Customer Date\": \"2025-07-01\",\r\n    \"Doc No\": \"\",\r\n    \"POD-Customer Rec\": \"2025-07-01\",\r\n    \"Today\": \"2025-07-01\",\r\n    \"Balance Overdue Days\": \"\",\r\n    \"To Be Collected Amount\": \"\"\r\n  };\r\n\r\n  const sheet = XLSX.utils.json_to_sheet([sampleRow]);\r\n  const wb = XLSX.utils.book_new();\r\n  XLSX.utils.book_append_sheet(wb, sheet, \"Template\");\r\n  XLSX.writeFile(wb, \"FleetUploadTemplate.xlsx\");\r\n};\r\n\r\n\r\n  return (\r\n    <div className=\"container mt-4\">\r\n      <h4>📤 Upload Excel File</h4>\r\n      <div style={{ display: \"flex\", gap: \"15px\", marginTop: \"10px\" }}>\r\n        <input type=\"file\" accept=\".xlsx, .xls\" onChange={handleFile} />\r\n        <button className=\"btn btn-secondary\" onClick={downloadTemplate}>\r\n          ⬇️ Download Template\r\n        </button>\r\n      </div>\r\n\r\n      <div style={{ marginTop: \"20px\" }}>\r\n        {rows.length > 0 && (\r\n          <>\r\n            <h5>📄 Preview & Edit Data</h5>\r\n            <div className=\"table-scroll-x\">\r\n              <table>\r\n                <thead>\r\n                  <tr>\r\n                    {finalFields.map((key) => (\r\n                      <th key={key}>{keyToLabel[key]}</th>\r\n                    ))}\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {rows.map((row, rowIndex) => (\r\n                    <tr key={rowIndex}>\r\n                      {finalFields.map((key) => (\r\n                        <td key={key}>\r\n                          <input\r\n                            type={dateFields.includes(key) ? \"date\" : \"text\"}\r\n                            value={row[key]}\r\n                            onChange={(e) => {\r\n                              const updated = [...rows];\r\n                              updated[rowIndex][key] = e.target.value;\r\n                              setRows(updated);\r\n                              localStorage.setItem(\"uploadPreviewRows\", JSON.stringify(updated));\r\n                            }}\r\n                          />\r\n                        </td>\r\n                      ))}\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n            <div style={{ textAlign: \"right\", marginTop: \"20px\" }}>\r\n              <button onClick={handleSubmitAll} className=\"btn btn-success me-3\">\r\n                ✅ Submit All Records\r\n              </button>\r\n              <button\r\n                onClick={() => {\r\n                  setRows([]);\r\n                  localStorage.removeItem(\"uploadPreviewRows\");\r\n                  toast.info(\"🧹 Cleared uploaded preview data\");\r\n                }}\r\n                className=\"btn btn-warning\"\r\n              >\r\n                🔄 Upload New Sheet\r\n              </button>\r\n            </div>\r\n          </>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UploadForm;\r\n"],"mappings":";AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,KAAKC,IAAI,MAAM,MAAM;AAC5B,SAASC,EAAE,EAAEC,IAAI,QAAQ,aAAa;AACtC,SACEC,UAAU,EACVC,MAAM,EACNC,GAAG,EACHC,cAAc,EACdC,SAAS,QACJ,oBAAoB;AAC3B,SAASC,KAAK,QAAQ,gBAAgB;AACtC,OAAO,uCAAuC;;AAE9C;AACA,MAAMC,WAAW,GAAG;AAClB;AACA,MAAM,EAAE,cAAc,EAAE,QAAQ,EAAE,QAAQ,EAAE,aAAa,EAAE,UAAU,EAAE,cAAc,EAAE,WAAW,EAAE,QAAQ,EAAE,WAAW,EAAE,SAAS;AACpI;AACA,aAAa,EAAE,iBAAiB,EAAE,cAAc,EAAE,gBAAgB,EAAE,gCAAgC,EAAE,wBAAwB,EAAE,SAAS,EAAE,mBAAmB,EAAE,kBAAkB,EAAE,mBAAmB,EAAE,iBAAiB,EAAE,kBAAkB,EAAE,gBAAgB,EAAE,qBAAqB,EAAE,2BAA2B;AACpT;AACA,sBAAsB,EAAE,YAAY,EAAE,gBAAgB,EAAE,cAAc;AACtE;AACA,eAAe,EAAE,uBAAuB,EAAE,OAAO,EAAE,gBAAgB,EAAE,OAAO,EAAE,oBAAoB,EAAE,qBAAqB,CAC1H;AAED,MAAMC,UAAU,GAAG,CACjB,MAAM,EAAE,cAAc,EACtB,gBAAgB,EAAE,gBAAgB,EAClC,eAAe,EAAE,uBAAuB,EAAE,gBAAgB,EAAE,OAAO,CACpE;;AAED;AACA,MAAMC,UAAU,GAAGF,WAAW,CAACG,MAAM,CAAC,CAACC,GAAG,EAAEC,GAAG,KAAK;EAClD,MAAMC,KAAK,GAAGD,GAAG,CACdE,OAAO,CAAC,iBAAiB,EAAE,OAAO,CAAC,CACnCA,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAClBA,OAAO,CAAC,IAAI,EAAGC,CAAC,IAAKA,CAAC,CAACC,WAAW,CAAC,CAAC,CAAC;EACxCL,GAAG,CAACC,GAAG,CAAC,GAAGC,KAAK;EAChB,OAAOF,GAAG;AACZ,CAAC,EAAE,CAAC,CAAC,CAAC;;AAEN;AACA,MAAMM,UAAU,GAAGC,MAAM,CAACC,OAAO,CAACV,UAAU,CAAC,CAACC,MAAM,CAAC,CAACC,GAAG,EAAE,CAACC,GAAG,EAAEC,KAAK,CAAC,KAAK;EAC1EF,GAAG,CAACE,KAAK,CAAC,GAAGD,GAAG;EAChB,OAAOD,GAAG;AACZ,CAAC,EAAE,CAAC,CAAC,CAAC;AAEN,MAAMS,SAAS,GAAIC,KAAK,IAAK;EAC3B,MAAMC,MAAM,GAAG,IAAIC,IAAI,CAACF,KAAK,CAAC;EAC9B,OAAO,CAACG,KAAK,CAACF,MAAM,CAAC,GAAGA,MAAM,CAACG,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE;AACjE,CAAC;AAED,MAAMC,UAAU,GAAGA,CAAA,KAAM;EACvB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGjC,QAAQ,CAAC,EAAE,CAAC;EAEpCC,SAAS,CAAC,MAAM;IACd,MAAMiC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,mBAAmB,CAAC;IACvD,IAAIF,KAAK,EAAE;MACTD,OAAO,CAACI,IAAI,CAACC,KAAK,CAACJ,KAAK,CAAC,CAAC;IAC5B;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMK,UAAU,GAAIC,CAAC,IAAK;IACxB,MAAMC,IAAI,GAAGD,CAAC,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IAC9B,IAAI,CAACF,IAAI,EAAE;IACX,IAAI,CAACA,IAAI,CAACG,IAAI,CAACC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAACJ,IAAI,CAACG,IAAI,CAACC,QAAQ,CAAC,OAAO,CAAC,EAAE;MAC/DnC,KAAK,CAACoC,KAAK,CAAC,oDAAoD,CAAC;MACjE;IACF;IAEA,MAAMC,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;IAC/BD,MAAM,CAACE,MAAM,GAAIC,KAAK,IAAK;MACzB,MAAMC,QAAQ,GAAGjD,IAAI,CAACkD,IAAI,CAACF,KAAK,CAACR,MAAM,CAACW,MAAM,EAAE;QAAEC,IAAI,EAAE;MAAS,CAAC,CAAC;MACnE,MAAMC,KAAK,GAAGJ,QAAQ,CAACK,MAAM,CAACL,QAAQ,CAACM,UAAU,CAAC,CAAC,CAAC,CAAC;MACrD,MAAMC,GAAG,GAAGxD,IAAI,CAACyD,KAAK,CAACC,aAAa,CAACL,KAAK,EAAE;QAAEM,MAAM,EAAE;MAAG,CAAC,CAAC;MAE3D,MAAMC,MAAM,GAAGJ,GAAG,CAACK,GAAG,CAAEC,GAAG,IAAK;QAC9B,MAAMX,MAAM,GAAG,CAAC,CAAC;QACjB1C,WAAW,CAACsD,OAAO,CAAEjD,GAAG,IAAK;UAC3B,MAAMC,KAAK,GAAGJ,UAAU,CAACG,GAAG,CAAC;UAC7B,IAAIkD,GAAG,GAAGF,GAAG,CAAC/C,KAAK,CAAC,IAAI,EAAE;UAC1B,IAAIL,UAAU,CAACuD,QAAQ,CAACnD,GAAG,CAAC,EAAEkD,GAAG,GAAG1C,SAAS,CAAC0C,GAAG,CAAC;UAClDb,MAAM,CAACrC,GAAG,CAAC,GAAGkD,GAAG;QACnB,CAAC,CAAC;QACF,OAAOb,MAAM;MACf,CAAC,CAAC;MAEFpB,OAAO,CAAC6B,MAAM,CAAC;MACf3B,YAAY,CAACiC,OAAO,CAAC,mBAAmB,EAAE/B,IAAI,CAACgC,SAAS,CAACP,MAAM,CAAC,CAAC;IACnE,CAAC;IAEDf,MAAM,CAACuB,kBAAkB,CAAC7B,IAAI,CAAC;EACjC,CAAC;EAED,MAAM8B,eAAe,GAAG,MAAAA,CAAA,KAAY;IAClC,IAAI,CAACvC,IAAI,CAACwC,MAAM,EAAE;MAChB9D,KAAK,CAAC+D,IAAI,CAAC,sBAAsB,CAAC;MAClC;IACF;IAEA,IAAI;MACF,MAAMC,KAAK,GAAG,EAAE;MAChB,KAAK,MAAMV,GAAG,IAAIhC,IAAI,EAAE;QAAA,IAAA2C,iBAAA;QACtB,MAAMC,QAAQ,GAAG,MAAMC,mBAAmB,CAAC,CAAC;QAC5C,MAAMC,QAAQ,GAAG;UACfC,YAAY,EAAEH,QAAQ;UACtB,GAAGI,iBAAiB,CAAChB,GAAG,CAAC;UACzBiB,SAAS,EAAE,IAAItD,IAAI,CAAC,CAAC;UACrBuD,SAAS,EAAE,EAAAP,iBAAA,GAAAvE,IAAI,CAAC+E,WAAW,cAAAR,iBAAA,uBAAhBA,iBAAA,CAAkBS,KAAK,KAAI,WAAW;UACjDC,SAAS,EAAE,IAAI;UACfC,WAAW,EAAE,IAAI3D,IAAI,CAAC,CAAC;UACvB4D,iBAAiB,EAAE;QACrB,CAAC;QACD,MAAMjF,MAAM,CAACD,UAAU,CAACF,EAAE,EAAE,eAAe,CAAC,EAAE2E,QAAQ,CAAC;QACvDJ,KAAK,CAACc,IAAI,CAACZ,QAAQ,CAAC;MACtB;MAEAlE,KAAK,CAAC+E,OAAO,CAAC,cAAcf,KAAK,CAACF,MAAM,UAAU,CAAC;MACnDrC,YAAY,CAACuD,UAAU,CAAC,mBAAmB,CAAC;MAC5CzD,OAAO,CAAC,EAAE,CAAC;IACb,CAAC,CAAC,OAAO0D,GAAG,EAAE;MACZC,OAAO,CAAC9C,KAAK,CAAC6C,GAAG,CAAC;MAClBjF,KAAK,CAACoC,KAAK,CAAC,mBAAmB,GAAG6C,GAAG,CAACE,OAAO,CAAC;IAChD;EACF,CAAC;EAED,MAAMhB,mBAAmB,GAAG,MAAAA,CAAA,KAAY;IACtC,MAAMiB,UAAU,GAAGvF,GAAG,CAACJ,EAAE,EAAE,UAAU,EAAE,eAAe,CAAC;IACvD,OAAO,MAAMK,cAAc,CAACL,EAAE,EAAE,MAAO4F,WAAW,IAAK;MACrD,MAAMC,IAAI,GAAG,MAAMD,WAAW,CAACE,GAAG,CAACH,UAAU,CAAC;MAC9C,IAAI,CAACE,IAAI,CAACE,MAAM,CAAC,CAAC,EAAE,MAAM,IAAIC,KAAK,CAAC,qBAAqB,CAAC;MAC1D,MAAMC,OAAO,GAAGJ,IAAI,CAACK,IAAI,CAAC,CAAC,CAACC,WAAW,IAAI,CAAC;MAC5CP,WAAW,CAACQ,MAAM,CAACT,UAAU,EAAE;QAAEQ,WAAW,EAAEF,OAAO,GAAG;MAAE,CAAC,CAAC;MAC5D,OAAOA,OAAO;IAChB,CAAC,CAAC;EACJ,CAAC;EAED,MAAMpB,iBAAiB,GAAIqB,IAAI,IAAK;IAClC,MAAMhD,MAAM,GAAG,CAAC,CAAC;IACjB/B,MAAM,CAACC,OAAO,CAAC8E,IAAI,CAAC,CAACpC,OAAO,CAAC,CAAC,CAACjD,GAAG,EAAEkD,GAAG,CAAC,KAAK;MAC3C,IAAItD,UAAU,CAACuD,QAAQ,CAACnD,GAAG,CAAC,EAAE;QAC5B,MAAMU,MAAM,GAAG,IAAIC,IAAI,CAACuC,GAAG,CAAC;QAC5Bb,MAAM,CAACrC,GAAG,CAAC,GAAGY,KAAK,CAACF,MAAM,CAAC,GAAGwC,GAAG,GAAGzD,SAAS,CAAC+F,QAAQ,CAAC9E,MAAM,CAAC;MAChE,CAAC,MAAM;QACL2B,MAAM,CAACrC,GAAG,CAAC,GAAGkD,GAAG;MACnB;IACF,CAAC,CAAC;IACF,OAAOb,MAAM;EACf,CAAC;EAED,MAAMoD,gBAAgB,GAAGA,CAAA,KAAM;IAC/B,MAAMC,SAAS,GAAG;MAChB;MACA,gBAAgB,EAAE,YAAY;MAC9B,eAAe,EAAE,YAAY;MAC7B,QAAQ,EAAE,MAAM;MAChB,QAAQ,EAAE,OAAO;MACjB,aAAa,EAAE,QAAQ;MACvB,UAAU,EAAE,UAAU;MACtB,eAAe,EAAE,SAAS;MAC1B,YAAY,EAAE,YAAY;MAC1B,QAAQ,EAAE,eAAe;MACzB,YAAY,EAAE,MAAM;MACpB,UAAU,EAAE,KAAK;MAEjB;MACA,sBAAsB,EAAE,EAAE;MAC1B,0BAA0B,EAAE,EAAE;MAC9B,2BAA2B,EAAE,EAAE;MAC/B,kBAAkB,EAAE,YAAY;MAChC,mCAAmC,EAAE,EAAE;MACvC,+BAA+B,EAAE,EAAE;MACnC,SAAS,EAAE,EAAE;MACb,oBAAoB,EAAE,EAAE;MACxB,oBAAoB,EAAE,EAAE;MACxB,qBAAqB,EAAE,EAAE;MACzB,aAAa,EAAE,EAAE;MACjB,mBAAmB,EAAE,EAAE;MACvB,kBAAkB,EAAE,YAAY;MAChC,uBAAuB,EAAE,EAAE;MAC3B,6BAA6B,EAAE,EAAE;MAEjC;MACA,wBAAwB,EAAE,EAAE;MAC5B,aAAa,EAAE,EAAE;MACjB,iBAAiB,EAAE,EAAE;MACrB,eAAe,EAAE,EAAE;MAEnB;MACA,qBAAqB,EAAE,YAAY;MACnC,2BAA2B,EAAE,YAAY;MACzC,QAAQ,EAAE,EAAE;MACZ,kBAAkB,EAAE,YAAY;MAChC,OAAO,EAAE,YAAY;MACrB,sBAAsB,EAAE,EAAE;MAC1B,wBAAwB,EAAE;IAC5B,CAAC;IAED,MAAMnD,KAAK,GAAGrD,IAAI,CAACyD,KAAK,CAACgD,aAAa,CAAC,CAACD,SAAS,CAAC,CAAC;IACnD,MAAME,EAAE,GAAG1G,IAAI,CAACyD,KAAK,CAACkD,QAAQ,CAAC,CAAC;IAChC3G,IAAI,CAACyD,KAAK,CAACmD,iBAAiB,CAACF,EAAE,EAAErD,KAAK,EAAE,UAAU,CAAC;IACnDrD,IAAI,CAAC6G,SAAS,CAACH,EAAE,EAAE,0BAA0B,CAAC;EAChD,CAAC;EAGC,oBACE7G,KAAA,CAAAiH,aAAA;IAAKC,SAAS,EAAC,gBAAgB;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAC7BxH,KAAA,CAAAiH,aAAA;IAAAE,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAI,gCAAwB,CAAC,eAC7BxH,KAAA,CAAAiH,aAAA;IAAKQ,KAAK,EAAE;MAAEC,OAAO,EAAE,MAAM;MAAEC,GAAG,EAAE,MAAM;MAAEC,SAAS,EAAE;IAAO,CAAE;IAAAT,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAC9DxH,KAAA,CAAAiH,aAAA;IAAO1D,IAAI,EAAC,MAAM;IAACsE,MAAM,EAAC,aAAa;IAACC,QAAQ,EAAEtF,UAAW;IAAA2E,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAAE,CAAC,eAChExH,KAAA,CAAAiH,aAAA;IAAQC,SAAS,EAAC,mBAAmB;IAACa,OAAO,EAAErB,gBAAiB;IAAAS,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAC,gCAEzD,CACL,CAAC,eAENxH,KAAA,CAAAiH,aAAA;IAAKQ,KAAK,EAAE;MAAEG,SAAS,EAAE;IAAO,CAAE;IAAAT,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAC/BvF,IAAI,CAACwC,MAAM,GAAG,CAAC,iBACdzE,KAAA,CAAAiH,aAAA,CAAAjH,KAAA,CAAAgI,QAAA,qBACEhI,KAAA,CAAAiH,aAAA;IAAAE,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAI,kCAA0B,CAAC,eAC/BxH,KAAA,CAAAiH,aAAA;IAAKC,SAAS,EAAC,gBAAgB;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAC7BxH,KAAA,CAAAiH,aAAA;IAAAE,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACExH,KAAA,CAAAiH,aAAA;IAAAE,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACExH,KAAA,CAAAiH,aAAA;IAAAE,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GACG5G,WAAW,CAACoD,GAAG,CAAE/C,GAAG,iBACnBjB,KAAA,CAAAiH,aAAA;IAAIhG,GAAG,EAAEA,GAAI;IAAAkG,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAE1G,UAAU,CAACG,GAAG,CAAM,CACpC,CACC,CACC,CAAC,eACRjB,KAAA,CAAAiH,aAAA;IAAAE,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GACGvF,IAAI,CAAC+B,GAAG,CAAC,CAACC,GAAG,EAAEgE,QAAQ,kBACtBjI,KAAA,CAAAiH,aAAA;IAAIhG,GAAG,EAAEgH,QAAS;IAAAd,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GACf5G,WAAW,CAACoD,GAAG,CAAE/C,GAAG,iBACnBjB,KAAA,CAAAiH,aAAA;IAAIhG,GAAG,EAAEA,GAAI;IAAAkG,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACXxH,KAAA,CAAAiH,aAAA;IACE1D,IAAI,EAAE1C,UAAU,CAACuD,QAAQ,CAACnD,GAAG,CAAC,GAAG,MAAM,GAAG,MAAO;IACjDS,KAAK,EAAEuC,GAAG,CAAChD,GAAG,CAAE;IAChB6G,QAAQ,EAAGrF,CAAC,IAAK;MACf,MAAMyF,OAAO,GAAG,CAAC,GAAGjG,IAAI,CAAC;MACzBiG,OAAO,CAACD,QAAQ,CAAC,CAAChH,GAAG,CAAC,GAAGwB,CAAC,CAACE,MAAM,CAACjB,KAAK;MACvCQ,OAAO,CAACgG,OAAO,CAAC;MAChB9F,YAAY,CAACiC,OAAO,CAAC,mBAAmB,EAAE/B,IAAI,CAACgC,SAAS,CAAC4D,OAAO,CAAC,CAAC;IACpE,CAAE;IAAAf,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CACH,CACC,CACL,CACC,CACL,CACI,CACF,CACJ,CAAC,eACNxH,KAAA,CAAAiH,aAAA;IAAKQ,KAAK,EAAE;MAAEU,SAAS,EAAE,OAAO;MAAEP,SAAS,EAAE;IAAO,CAAE;IAAAT,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACpDxH,KAAA,CAAAiH,aAAA;IAAQc,OAAO,EAAEvD,eAAgB;IAAC0C,SAAS,EAAC,sBAAsB;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAC,2BAE3D,CAAC,eACTxH,KAAA,CAAAiH,aAAA;IACEc,OAAO,EAAEA,CAAA,KAAM;MACb7F,OAAO,CAAC,EAAE,CAAC;MACXE,YAAY,CAACuD,UAAU,CAAC,mBAAmB,CAAC;MAC5ChF,KAAK,CAACyH,IAAI,CAAC,kCAAkC,CAAC;IAChD,CAAE;IACFlB,SAAS,EAAC,iBAAiB;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAC5B,+BAEO,CACL,CACL,CAED,CACF,CAAC;AAEV,CAAC;AAED,eAAexF,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module"}