{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anupp\\\\Downloads\\\\fleet-billing-app\\\\fleet-billing-app\\\\src\\\\components\\\\UploadForm.js\";\n// import React, { useState } from \"react\";\n// import * as XLSX from \"xlsx\";\n\n// const UploadForm = ({ onDataParsed }) => {\n//   const [filename, setFilename] = useState(\"\");\n\n//   const handleFileUpload = (e) => {\n//     const file = e.target.files[0];\n//     setFilename(file.name);\n//     const reader = new FileReader();\n//     reader.onload = (evt) => {\n//       const bstr = evt.target.result;\n//       const wb = XLSX.read(bstr, { type: \"binary\" });\n//       const wsname = wb.SheetNames[0];\n//       const ws = wb.Sheets[wsname];\n//       const data = XLSX.utils.sheet_to_json(ws);\n//       onDataParsed(data);\n//     };\n//     reader.readAsBinaryString(file);\n//   };\n\n//   return (\n//     <div style={{ marginTop: 20 }}>\n//       <h4>Upload Excel File</h4>\n//       <input type=\"file\" accept=\".xlsx, .xls\" onChange={handleFileUpload} />\n//       {filename && <p>Uploaded: {filename}</p>}\n//     </div>\n//   );\n// };\n// export default UploadForm;\n\n// UploadForm.js\nimport React, { useState } from \"react\";\nimport { addDoc, collection, doc, runTransaction } from \"firebase/firestore\";\nimport * as XLSX from \"xlsx\";\nimport { db, auth } from \"../firebase\";\n\n// Field label to key mapping\nconst labelToKey = {\n  \"Indent No\": \"IndentNo\",\n  \"Indent Date\": \"IndentDate\",\n  \"Placement Date\": \"PlacementDate\",\n  \"Customer\": \"Customer\",\n  \"Customer Type\": \"CustomerType\",\n  \"Customer Billing Type\": \"CustomerBillingType\",\n  \"Sourcing (Vendor)\": \"SourcingVendor\",\n  \"Vendor Type\": \"VendorType\",\n  \"Vendor Billing Type\": \"VendorBillingType\",\n  \"Origin\": \"Origin\",\n  \"Destination\": \"Destination\",\n  \"Vehicle No\": \"VehicleNo\",\n  \"Vehicle type\": \"VehicleType\",\n  \"Driver No\": \"DriverNo\",\n  \"Dispatch Date\": \"DispatchDate\",\n  \"Deliver Date\": \"DeliverDate\",\n  \"Offloading Date\": \"OffloadingDate\",\n  \"E-way Bill\": \"EwayBill\",\n  \"LR No.\": \"LRNo\",\n  \"Soft Copy POD Rec\": \"SoftCopyPODRec\",\n  \"Hard Copy POD Rec\": \"HardCopyPODRec\",\n  \"Customer -Sale rate\": \"CustomerSaleRate\",\n  \"Advance to be Paid\": \"AdvanceToBePaid\",\n  \"Advance Rec\": \"AdvanceRec\",\n  \"Advance UTR\": \"AdvanceUTR\",\n  \"Advance Rec-Date\": \"AdvanceRecDate\",\n  \"Balance Pending\": \"BalancePending\",\n  \"Detention Charges\": \"DetentionCharges\",\n  \"Loading/Unloading Charges\": \"LoadingUnloadingCharges\",\n  \"Miscellaneous Charges.\": \"MiscCharges\",\n  \"Processing Charges\": \"ProcessingCharges\",\n  \"Net Balance\": \"NetBalance\",\n  \"Balance Rec Amount\": \"BalanceRecAmount\",\n  \"Balance UTR\": \"BalanceUTR\",\n  \"Balance Rec Date\": \"BalanceRecDate\",\n  \"Remaining Balance\": \"RemainingBalance\",\n  \"Remaining Balance UTR\": \"RemainingBalanceUTR\",\n  \"Remaining Balance Date\": \"RemainingBalanceDate\",\n  \"Supplier Buy Rate\": \"SupplierBuyRate\",\n  \"Supplier Advance Pay\": \"SupplierAdvancePay\",\n  \"Supplier Advance Paid\": \"SupplierAdvancePaid\",\n  \"Supplier Mis Charges\": \"SupplierMisCharges\",\n  \"Supplier Invoice No.\": \"SupplierInvoiceNo\",\n  \"Supplier Advance UTR\": \"SupplierAdvanceUTR\",\n  \"Supplier Advance Pay-Date\": \"SupplierAdvancePayDate\",\n  \"Supplier Balance Pending\": \"SupplierBalancePending\",\n  \"Supplier Balance Paid Amount\": \"SupplierBalancePaidAmount\",\n  \"Supplier Balance Paid UTR\": \"SupplierBalancePaidUTR\",\n  \"Supplier Balance Paid Date\": \"SupplierBalancePaidDate\",\n  \"Remaining Supplier Amount\": \"RemainingSupplierAmount\",\n  \"POD Rec Date\": \"PODRecDate\",\n  \"POD Send to Customer Date\": \"PODSendToCustomerDate\",\n  \"POD Docket No.\": \"PODDocketNo\",\n  \"POD Rec By Customer\": \"PODRecByCustomer\",\n  \"POD Deduction If any\": \"PODDeductionIfAny\",\n  \"Gross Profit\": \"GrossProfit\",\n  \"Bad Debts\": \"BadDebts\",\n  \"Net Profit\": \"NetProfit\"\n};\nconst UploadForm = () => {\n  const [previewData, setPreviewData] = useState([]);\n  const [statusMap, setStatusMap] = useState({});\n  const [fleetNumbers, setFleetNumbers] = useState({});\n  const parseExcel = file => {\n    const reader = new FileReader();\n    reader.onload = e => {\n      const workbook = XLSX.read(e.target.result, {\n        type: \"binary\"\n      });\n      const sheet = workbook.Sheets[workbook.SheetNames[0]];\n      const rawData = XLSX.utils.sheet_to_json(sheet, {\n        defval: \"\"\n      }); // use first row as header\n\n      const cleanedData = rawData.map(row => {\n        const cleanedRow = {};\n        for (const label in row) {\n          var _val;\n          const key = labelToKey[label === null || label === void 0 ? void 0 : label.trim()];\n          if (!key) continue;\n          let val = row[label];\n\n          // Handle Excel serial date to DD-MM-YYYY\n          if (typeof val === \"number\" && label.toLowerCase().includes(\"date\")) {\n            const d = XLSX.SSF.parse_date_code(val);\n            if (d) {\n              val = `${String(d.d).padStart(2, \"0\")}-${String(d.m).padStart(2, \"0\")}-${d.y}`;\n            }\n          }\n          cleanedRow[key] = String((_val = val) !== null && _val !== void 0 ? _val : \"\").trim();\n        }\n        return cleanedRow;\n      });\n      setPreviewData(cleanedData);\n      setStatusMap({});\n      setFleetNumbers({});\n    };\n    reader.readAsBinaryString(file);\n  };\n  const getNextFleetNumber = async () => {\n    const counterRef = doc(db, \"Counters\", \"fleet_counter\");\n    return await runTransaction(db, async txn => {\n      const snap = await txn.get(counterRef);\n      const current = snap.exists() ? snap.data().nextFleetNo || 1 : 1;\n      txn.set(counterRef, {\n        nextFleetNo: current + 1\n      }, {\n        merge: true\n      });\n      return current;\n    });\n  };\n  const saveRow = async (row, i) => {\n    try {\n      var _auth$currentUser;\n      const newFleetNo = await getNextFleetNumber();\n      const enriched = {\n        ...row,\n        fleetNumber: newFleetNo,\n        createdAt: new Date(),\n        createdBy: ((_auth$currentUser = auth.currentUser) === null || _auth$currentUser === void 0 ? void 0 : _auth$currentUser.email) || \"anonymous\",\n        isCurrent: true,\n        versionDate: new Date()\n      };\n      await addDoc(collection(db, \"fleet_records\"), enriched);\n      setStatusMap(prev => ({\n        ...prev,\n        [i]: \"✅ Saved\"\n      }));\n      setFleetNumbers(prev => ({\n        ...prev,\n        [i]: newFleetNo\n      }));\n    } catch {\n      setStatusMap(prev => ({\n        ...prev,\n        [i]: \"❌ Failed\"\n      }));\n    }\n  };\n  const saveAll = async () => {\n    for (let i = 0; i < previewData.length; i++) {\n      if (!statusMap[i]) await saveRow(previewData[i], i);\n    }\n  };\n  const handleEdit = (i, key, value) => {\n    const updated = [...previewData];\n    updated[i][key] = value;\n    setPreviewData(updated);\n  };\n  const deleteRow = i => {\n    setPreviewData(previewData.filter((_, idx) => idx !== i));\n    setStatusMap(prev => {\n      const copy = {\n        ...prev\n      };\n      delete copy[i];\n      return copy;\n    });\n    setFleetNumbers(prev => {\n      const copy = {\n        ...prev\n      };\n      delete copy[i];\n      return copy;\n    });\n  };\n  const resetTable = () => {\n    setPreviewData([]);\n    setStatusMap({});\n    setFleetNumbers({});\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      marginBottom: 40\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }\n  }, \"Upload Excel & Preview\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"file\",\n    accept: \".xlsx, .xls\",\n    onChange: e => {\n      var _e$target$files;\n      e.target.value = null; // allow re-selecting same file\n      if ((_e$target$files = e.target.files) === null || _e$target$files === void 0 ? void 0 : _e$target$files[0]) parseExcel(e.target.files[0]);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }\n  }), previewData.length > 0 && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h5\", {\n    style: {\n      marginTop: 20\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 11\n    }\n  }, \"\\uD83D\\uDCC4 Preview Table (Excel Upload)\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: saveAll,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 11\n    }\n  }, \"\\uD83D\\uDCBE Save All\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: resetTable,\n    style: {\n      marginLeft: 10,\n      color: \"red\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 11\n    }\n  }, \"\\uD83E\\uDDF9 Clear\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"table-scroll-x\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"table\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 19\n    }\n  }, \"Fleet Number\"), Object.keys(previewData[0]).map(key => /*#__PURE__*/React.createElement(\"th\", {\n    key: key,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 21\n    }\n  }, key)), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 19\n    }\n  }, \"Status\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 19\n    }\n  }, \"Action\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 15\n    }\n  }, previewData.map((row, i) => /*#__PURE__*/React.createElement(\"tr\", {\n    key: i,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 21\n    }\n  }, fleetNumbers[i] || \"\"), Object.keys(row).map(key => /*#__PURE__*/React.createElement(\"td\", {\n    key: key,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 23\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: row[key],\n    onChange: e => handleEdit(i, key, e.target.value),\n    style: {\n      width: \"120px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 25\n    }\n  }))), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 21\n    }\n  }, statusMap[i] || \"⏳ Pending\"), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => saveRow(row, i),\n    disabled: statusMap[i] === \"✅ Saved\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 23\n    }\n  }, \"Save\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => deleteRow(i),\n    style: {\n      marginLeft: 6,\n      color: \"red\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 23\n    }\n  }, \"Delete\")))))))));\n};\nexport default UploadForm;","map":{"version":3,"names":["React","useState","addDoc","collection","doc","runTransaction","XLSX","db","auth","labelToKey","UploadForm","previewData","setPreviewData","statusMap","setStatusMap","fleetNumbers","setFleetNumbers","parseExcel","file","reader","FileReader","onload","e","workbook","read","target","result","type","sheet","Sheets","SheetNames","rawData","utils","sheet_to_json","defval","cleanedData","map","row","cleanedRow","label","_val","key","trim","val","toLowerCase","includes","d","SSF","parse_date_code","String","padStart","m","y","readAsBinaryString","getNextFleetNumber","counterRef","txn","snap","get","current","exists","data","nextFleetNo","set","merge","saveRow","i","_auth$currentUser","newFleetNo","enriched","fleetNumber","createdAt","Date","createdBy","currentUser","email","isCurrent","versionDate","prev","saveAll","length","handleEdit","value","updated","deleteRow","filter","_","idx","copy","resetTable","createElement","style","marginBottom","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","accept","onChange","_e$target$files","files","Fragment","marginTop","onClick","marginLeft","color","className","Object","keys","width","disabled"],"sources":["C:/Users/anupp/Downloads/fleet-billing-app/fleet-billing-app/src/components/UploadForm.js"],"sourcesContent":["// import React, { useState } from \"react\";\r\n// import * as XLSX from \"xlsx\";\r\n\r\n// const UploadForm = ({ onDataParsed }) => {\r\n//   const [filename, setFilename] = useState(\"\");\r\n\r\n//   const handleFileUpload = (e) => {\r\n//     const file = e.target.files[0];\r\n//     setFilename(file.name);\r\n//     const reader = new FileReader();\r\n//     reader.onload = (evt) => {\r\n//       const bstr = evt.target.result;\r\n//       const wb = XLSX.read(bstr, { type: \"binary\" });\r\n//       const wsname = wb.SheetNames[0];\r\n//       const ws = wb.Sheets[wsname];\r\n//       const data = XLSX.utils.sheet_to_json(ws);\r\n//       onDataParsed(data);\r\n//     };\r\n//     reader.readAsBinaryString(file);\r\n//   };\r\n\r\n//   return (\r\n//     <div style={{ marginTop: 20 }}>\r\n//       <h4>Upload Excel File</h4>\r\n//       <input type=\"file\" accept=\".xlsx, .xls\" onChange={handleFileUpload} />\r\n//       {filename && <p>Uploaded: {filename}</p>}\r\n//     </div>\r\n//   );\r\n// };\r\n// export default UploadForm;\r\n\r\n// UploadForm.js\r\nimport React, { useState } from \"react\";\r\nimport { addDoc, collection, doc, runTransaction } from \"firebase/firestore\";\r\nimport * as XLSX from \"xlsx\";\r\nimport { db, auth } from \"../firebase\";\r\n\r\n// Field label to key mapping\r\nconst labelToKey = {\r\n  \"Indent No\": \"IndentNo\", \"Indent Date\": \"IndentDate\", \"Placement Date\": \"PlacementDate\",\r\n  \"Customer\": \"Customer\", \"Customer Type\": \"CustomerType\", \"Customer Billing Type\": \"CustomerBillingType\",\r\n  \"Sourcing (Vendor)\": \"SourcingVendor\", \"Vendor Type\": \"VendorType\", \"Vendor Billing Type\": \"VendorBillingType\",\r\n  \"Origin\": \"Origin\", \"Destination\": \"Destination\", \"Vehicle No\": \"VehicleNo\", \"Vehicle type\": \"VehicleType\",\r\n  \"Driver No\": \"DriverNo\", \"Dispatch Date\": \"DispatchDate\", \"Deliver Date\": \"DeliverDate\",\r\n  \"Offloading Date\": \"OffloadingDate\", \"E-way Bill\": \"EwayBill\", \"LR No.\": \"LRNo\",\r\n  \"Soft Copy POD Rec\": \"SoftCopyPODRec\", \"Hard Copy POD Rec\": \"HardCopyPODRec\",\r\n  \"Customer -Sale rate\": \"CustomerSaleRate\", \"Advance to be Paid\": \"AdvanceToBePaid\",\r\n  \"Advance Rec\": \"AdvanceRec\", \"Advance UTR\": \"AdvanceUTR\", \"Advance Rec-Date\": \"AdvanceRecDate\",\r\n  \"Balance Pending\": \"BalancePending\", \"Detention Charges\": \"DetentionCharges\",\r\n  \"Loading/Unloading Charges\": \"LoadingUnloadingCharges\", \"Miscellaneous Charges.\": \"MiscCharges\",\r\n  \"Processing Charges\": \"ProcessingCharges\", \"Net Balance\": \"NetBalance\",\r\n  \"Balance Rec Amount\": \"BalanceRecAmount\", \"Balance UTR\": \"BalanceUTR\", \"Balance Rec Date\": \"BalanceRecDate\",\r\n  \"Remaining Balance\": \"RemainingBalance\", \"Remaining Balance UTR\": \"RemainingBalanceUTR\",\r\n  \"Remaining Balance Date\": \"RemainingBalanceDate\", \"Supplier Buy Rate\": \"SupplierBuyRate\",\r\n  \"Supplier Advance Pay\": \"SupplierAdvancePay\", \"Supplier Advance Paid\": \"SupplierAdvancePaid\",\r\n  \"Supplier Mis Charges\": \"SupplierMisCharges\", \"Supplier Invoice No.\": \"SupplierInvoiceNo\",\r\n  \"Supplier Advance UTR\": \"SupplierAdvanceUTR\", \"Supplier Advance Pay-Date\": \"SupplierAdvancePayDate\",\r\n  \"Supplier Balance Pending\": \"SupplierBalancePending\", \"Supplier Balance Paid Amount\": \"SupplierBalancePaidAmount\",\r\n  \"Supplier Balance Paid UTR\": \"SupplierBalancePaidUTR\", \"Supplier Balance Paid Date\": \"SupplierBalancePaidDate\",\r\n  \"Remaining Supplier Amount\": \"RemainingSupplierAmount\", \"POD Rec Date\": \"PODRecDate\",\r\n  \"POD Send to Customer Date\": \"PODSendToCustomerDate\", \"POD Docket No.\": \"PODDocketNo\",\r\n  \"POD Rec By Customer\": \"PODRecByCustomer\", \"POD Deduction If any\": \"PODDeductionIfAny\",\r\n  \"Gross Profit\": \"GrossProfit\", \"Bad Debts\": \"BadDebts\", \"Net Profit\": \"NetProfit\"\r\n};\r\n\r\nconst UploadForm = () => {\r\n  const [previewData, setPreviewData] = useState([]);\r\n  const [statusMap, setStatusMap] = useState({});\r\n  const [fleetNumbers, setFleetNumbers] = useState({});\r\n\r\n  const parseExcel = (file) => {\r\n    const reader = new FileReader();\r\n    reader.onload = (e) => {\r\n      const workbook = XLSX.read(e.target.result, { type: \"binary\" });\r\n      const sheet = workbook.Sheets[workbook.SheetNames[0]];\r\n      const rawData = XLSX.utils.sheet_to_json(sheet, { defval: \"\" }); // use first row as header\r\n\r\n      const cleanedData = rawData.map((row) => {\r\n        const cleanedRow = {};\r\n        for (const label in row) {\r\n          const key = labelToKey[label?.trim()];\r\n          if (!key) continue;\r\n\r\n          let val = row[label];\r\n\r\n          // Handle Excel serial date to DD-MM-YYYY\r\n          if (typeof val === \"number\" && label.toLowerCase().includes(\"date\")) {\r\n            const d = XLSX.SSF.parse_date_code(val);\r\n            if (d) {\r\n              val = `${String(d.d).padStart(2, \"0\")}-${String(d.m).padStart(2, \"0\")}-${d.y}`;\r\n            }\r\n          }\r\n\r\n          cleanedRow[key] = String(val ?? \"\").trim();\r\n        }\r\n        return cleanedRow;\r\n      });\r\n\r\n      setPreviewData(cleanedData);\r\n      setStatusMap({});\r\n      setFleetNumbers({});\r\n    };\r\n    reader.readAsBinaryString(file);\r\n  };\r\n\r\n  const getNextFleetNumber = async () => {\r\n    const counterRef = doc(db, \"Counters\", \"fleet_counter\");\r\n    return await runTransaction(db, async (txn) => {\r\n      const snap = await txn.get(counterRef);\r\n      const current = snap.exists() ? snap.data().nextFleetNo || 1 : 1;\r\n      txn.set(counterRef, { nextFleetNo: current + 1 }, { merge: true });\r\n      return current;\r\n    });\r\n  };\r\n\r\n  const saveRow = async (row, i) => {\r\n    try {\r\n      const newFleetNo = await getNextFleetNumber();\r\n      const enriched = {\r\n        ...row,\r\n        fleetNumber: newFleetNo,\r\n        createdAt: new Date(),\r\n        createdBy: auth.currentUser?.email || \"anonymous\",\r\n        isCurrent: true,\r\n        versionDate: new Date()\r\n      };\r\n      await addDoc(collection(db, \"fleet_records\"), enriched);\r\n      setStatusMap((prev) => ({ ...prev, [i]: \"✅ Saved\" }));\r\n      setFleetNumbers((prev) => ({ ...prev, [i]: newFleetNo }));\r\n    } catch {\r\n      setStatusMap((prev) => ({ ...prev, [i]: \"❌ Failed\" }));\r\n    }\r\n  };\r\n\r\n  const saveAll = async () => {\r\n    for (let i = 0; i < previewData.length; i++) {\r\n      if (!statusMap[i]) await saveRow(previewData[i], i);\r\n    }\r\n  };\r\n\r\n  const handleEdit = (i, key, value) => {\r\n    const updated = [...previewData];\r\n    updated[i][key] = value;\r\n    setPreviewData(updated);\r\n  };\r\n\r\n  const deleteRow = (i) => {\r\n    setPreviewData(previewData.filter((_, idx) => idx !== i));\r\n    setStatusMap((prev) => {\r\n      const copy = { ...prev };\r\n      delete copy[i];\r\n      return copy;\r\n    });\r\n    setFleetNumbers((prev) => {\r\n      const copy = { ...prev };\r\n      delete copy[i];\r\n      return copy;\r\n    });\r\n  };\r\n\r\n  const resetTable = () => {\r\n    setPreviewData([]);\r\n    setStatusMap({});\r\n    setFleetNumbers({});\r\n  };\r\n\r\n  return (\r\n    <div style={{ marginBottom: 40 }}>\r\n      <h4>Upload Excel & Preview</h4>\r\n      <input\r\n        type=\"file\"\r\n        accept=\".xlsx, .xls\"\r\n        onChange={(e) => {\r\n          e.target.value = null; // allow re-selecting same file\r\n          if (e.target.files?.[0]) parseExcel(e.target.files[0]);\r\n        }}\r\n      />\r\n      {previewData.length > 0 && (\r\n        <>\r\n          <h5 style={{ marginTop: 20 }}>📄 Preview Table (Excel Upload)</h5>\r\n          <button onClick={saveAll}>💾 Save All</button>\r\n          <button onClick={resetTable} style={{ marginLeft: 10, color: \"red\" }}>\r\n            🧹 Clear\r\n          </button>\r\n          <div className=\"table-scroll-x\">\r\n            <table>\r\n              <thead>\r\n                <tr>\r\n                  <th>Fleet Number</th>\r\n                  {Object.keys(previewData[0]).map((key) => (\r\n                    <th key={key}>{key}</th>\r\n                  ))}\r\n                  <th>Status</th>\r\n                  <th>Action</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {previewData.map((row, i) => (\r\n                  <tr key={i}>\r\n                    <td>{fleetNumbers[i] || \"\"}</td>\r\n                    {Object.keys(row).map((key) => (\r\n                      <td key={key}>\r\n                        <input\r\n                          type=\"text\"\r\n                          value={row[key]}\r\n                          onChange={(e) => handleEdit(i, key, e.target.value)}\r\n                          style={{ width: \"120px\" }}\r\n                        />\r\n                      </td>\r\n                    ))}\r\n                    <td>{statusMap[i] || \"⏳ Pending\"}</td>\r\n                    <td>\r\n                      <button\r\n                        onClick={() => saveRow(row, i)}\r\n                        disabled={statusMap[i] === \"✅ Saved\"}\r\n                      >\r\n                        Save\r\n                      </button>\r\n                      <button onClick={() => deleteRow(i)} style={{ marginLeft: 6, color: \"red\" }}>\r\n                        Delete\r\n                      </button>\r\n                    </td>\r\n                  </tr>\r\n                ))}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UploadForm;\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}