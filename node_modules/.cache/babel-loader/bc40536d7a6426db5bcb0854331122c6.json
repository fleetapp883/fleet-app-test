{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anupp\\\\Downloads\\\\fleet-billing-app\\\\fleet-billing-app\\\\src\\\\components\\\\UploadForm.js\";\n// UploadForm.js (Part 1)\nimport React, { useState, useEffect } from \"react\";\nimport * as XLSX from \"xlsx\";\nimport { db, auth } from \"../firebase\";\nimport { collection, addDoc, doc, runTransaction, Timestamp } from \"firebase/firestore\";\nimport { confirmAlert } from \"react-confirm-alert\";\nimport \"react-confirm-alert/src/react-confirm-alert.css\";\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\n// 1. Final field structure (flattened)\nconst finalFields = [\n// Fixed\n\"date\", \"deliveryDate\", \"months\", \"origin\", \"destination\", \"customer\", \"customerType\", \"vehicleNo\", \"vendor\", \"salesRate\", \"buyRate\",\n// Customer\n\"toBeAdvance\", \"advanceReceived\", \"advDeviation\", \"advanceRecDate\", \"validatedAdvanceUTRDescription\", \"validatedAdvanceAmount\", \"balance\", \"processingCharges\", \"inwardMisCharges\", \"outwardMisCharges\", \"balanceReceived\", \"remainingBalance\", \"balanceRecDate\", \"validatedBalanceUTR\", \"validatedBalanceUTRAmount\",\n// Vendor\n\"vendorOutwardPayment\", \"paidAmount\", \"balancePending\", \"vendorRemark\",\n// POD\n\"podVendorDate\", \"podSendToCustomerDate\", \"docNo\", \"podCustomerRec\", \"today\", \"balanceOverdueDays\", \"toBeCollectedAmount\"];\nconst keyToLabel = finalFields.reduce((map, key) => {\n  const label = key.replace(/([a-z])([A-Z])/g, \"$1 $2\").replace(/_/g, \" \").replace(/^./, str => str.toUpperCase());\n  map[key] = label;\n  return map;\n}, {});\n\n// 2. Which fields are dates?\nconst dateFields = [\"date\", \"deliveryDate\", \"advanceRecDate\", \"balanceRecDate\", \"podVendorDate\", \"podSendToCustomerDate\", \"podCustomerRec\", \"today\"];\nconst cleanDate = value => {\n  const parsed = new Date(value);\n  return !isNaN(parsed) ? parsed.toISOString().split(\"T\")[0] : \"\";\n};\nconst UploadForm = () => {\n  const [rows, setRows] = useState([]);\n  const [fileName, setFileName] = useState(\"\");\n  useEffect(() => {\n    const saved = localStorage.getItem(\"uploadPreviewRows\");\n    if (saved) {\n      setRows(JSON.parse(saved));\n    }\n  }, []);\n  const handleFile = e => {\n    const file = e.target.files[0];\n    if (!file) return;\n    if (!file.name.endsWith('.xls') && !file.name.endsWith('.xlsx')) {\n      toast.error(\"❌ Please upload a valid Excel file (.xls or .xlsx)\");\n      return;\n    }\n    setFileName(file.name);\n    const reader = new FileReader();\n    reader.onload = event => {\n      const workbook = XLSX.read(event.target.result, {\n        type: \"binary\"\n      });\n      const sheet = workbook.Sheets[workbook.SheetNames[0]];\n      const jsonData = XLSX.utils.sheet_to_json(sheet, {\n        defval: \"\"\n      }); // Use first row as headers\n\n      const processed = jsonData.map((row, i) => {\n        const result = {};\n        finalFields.forEach(key => {\n          let val = row[key] || \"\";\n          if (dateFields.includes(key)) {\n            val = cleanDate(val);\n          }\n          result[key] = val;\n        });\n        return result;\n      });\n      setRows(processed);\n      localStorage.setItem(\"uploadPreviewRows\", JSON.stringify(processed));\n    };\n    reader.readAsBinaryString(file);\n  };\n  const handleCellChange = (index, key, value) => {\n    const updated = [...rows];\n    updated[index][key] = value;\n    setRows(updated);\n    localStorage.setItem(\"uploadPreviewRows\", JSON.stringify(updated));\n  };\n  const handleSubmitAll = async () => {\n    if (!rows.length) {\n      toast.warn(\"⚠️ No data to submit\");\n      return;\n    }\n    try {\n      const batch = [];\n      for (const row of rows) {\n        var _auth$currentUser;\n        const indentNo = await getNextIndentNumber();\n        const enriched = {\n          indentNumber: indentNo,\n          ...convertDateFields(row),\n          createdAt: new Date(),\n          createdBy: ((_auth$currentUser = auth.currentUser) === null || _auth$currentUser === void 0 ? void 0 : _auth$currentUser.email) || \"anonymous\",\n          isCurrent: true,\n          versionDate: new Date(),\n          updateDescription: \"Excel Upload\"\n        };\n        await addDoc(collection(db, \"fleet_records\"), enriched);\n        batch.push(indentNo);\n      }\n      toast.success(`✅ Uploaded ${batch.length} records`);\n      localStorage.removeItem(\"uploadPreviewRows\");\n      setRows([]);\n    } catch (err) {\n      console.error(err);\n      toast.error(\"❌ Upload failed: \" + err.message);\n    }\n  };\n  const convertDateFields = data => {\n    const result = {};\n    Object.entries(data).forEach(([key, val]) => {\n      if (dateFields.includes(key)) {\n        const parsed = new Date(val);\n        result[key] = isNaN(parsed) ? val : Timestamp.fromDate(parsed);\n      } else {\n        result[key] = val;\n      }\n    });\n    return result;\n  };\n  const getNextIndentNumber = async () => {\n    const counterRef = doc(db, \"Counters\", \"fleet_counter\");\n    const newIndentNo = await runTransaction(db, async transaction => {\n      const docSnap = await transaction.get(counterRef);\n      if (!docSnap.exists()) throw new Error(\"Counter doc missing\");\n      const current = docSnap.data().nextFleetNo || 1;\n      transaction.update(counterRef, {\n        nextFleetNo: current + 1\n      });\n      return current;\n    });\n    return newIndentNo;\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container mt-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }\n  }, \"\\uD83D\\uDCE4 Upload Excel File\"), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: \"flex\",\n      alignItems: \"center\",\n      gap: \"15px\",\n      marginTop: \"10px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"file\",\n    accept: \".xlsx, .xls\",\n    onChange: handleFile,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 3\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn btn-secondary\",\n    onClick: () => {\n      downloadTemplate;\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 3\n    }\n  }, \"\\u2B07\\uFE0F Download Template\")), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      marginTop: \"20px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }\n  }, rows.length > 0 && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h5\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 13\n    }\n  }, \"\\uD83D\\uDCC4 Preview & Edit Data\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"table-scroll-x\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"table\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 19\n    }\n  }, Object.keys(rows[0]).map(col => /*#__PURE__*/React.createElement(\"th\", {\n    key: col,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 23\n    }\n  }, keyToLabel[col] || col)))), /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 17\n    }\n  }, rows.map((row, rowIndex) => /*#__PURE__*/React.createElement(\"tr\", {\n    key: rowIndex,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 21\n    }\n  }, Object.keys(row).map(col => /*#__PURE__*/React.createElement(\"td\", {\n    key: col,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: dateFields.includes(col) ? \"date\" : \"text\",\n    value: row[col],\n    onChange: e => {\n      const updated = [...rows];\n      updated[rowIndex][col] = e.target.value;\n      setRows(updated);\n      localStorage.setItem(\"uploadPreviewRows\", JSON.stringify(updated));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 27\n    }\n  })))))))), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      textAlign: \"right\",\n      marginTop: \"20px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleSubmitAll,\n    className: \"btn btn-success me-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 15\n    }\n  }, \"\\u2705 Submit All Records\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => {\n      setRows([]);\n      localStorage.removeItem(\"uploadPreviewRows\");\n      toast.info(\"🧹 Cleared uploaded preview data\");\n    },\n    className: \"btn btn-warning\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 15\n    }\n  }, \"\\uD83D\\uDD04 Upload New Sheet\")))));\n};\nexport default UploadForm;","map":{"version":3,"names":["React","useState","useEffect","XLSX","db","auth","collection","addDoc","doc","runTransaction","Timestamp","confirmAlert","toast","finalFields","keyToLabel","reduce","map","key","label","replace","str","toUpperCase","dateFields","cleanDate","value","parsed","Date","isNaN","toISOString","split","UploadForm","rows","setRows","fileName","setFileName","saved","localStorage","getItem","JSON","parse","handleFile","e","file","target","files","name","endsWith","error","reader","FileReader","onload","event","workbook","read","result","type","sheet","Sheets","SheetNames","jsonData","utils","sheet_to_json","defval","processed","row","i","forEach","val","includes","setItem","stringify","readAsBinaryString","handleCellChange","index","updated","handleSubmitAll","length","warn","batch","_auth$currentUser","indentNo","getNextIndentNumber","enriched","indentNumber","convertDateFields","createdAt","createdBy","currentUser","email","isCurrent","versionDate","updateDescription","push","success","removeItem","err","console","message","data","Object","entries","fromDate","counterRef","newIndentNo","transaction","docSnap","get","exists","Error","current","nextFleetNo","update","createElement","className","__self","__source","_jsxFileName","lineNumber","columnNumber","style","display","alignItems","gap","marginTop","accept","onChange","onClick","downloadTemplate","Fragment","keys","col","rowIndex","textAlign","info"],"sources":["C:/Users/anupp/Downloads/fleet-billing-app/fleet-billing-app/src/components/UploadForm.js"],"sourcesContent":["// UploadForm.js (Part 1)\r\nimport React, { useState, useEffect } from \"react\";\r\nimport * as XLSX from \"xlsx\";\r\nimport { db, auth } from \"../firebase\";\r\nimport {\r\n  collection,\r\n  addDoc,\r\n  doc,\r\n  runTransaction,\r\n  Timestamp,\r\n} from \"firebase/firestore\";\r\nimport { confirmAlert } from \"react-confirm-alert\";\r\nimport \"react-confirm-alert/src/react-confirm-alert.css\";\r\nimport { toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\n\r\n// 1. Final field structure (flattened)\r\nconst finalFields = [\r\n  // Fixed\r\n  \"date\", \"deliveryDate\", \"months\", \"origin\", \"destination\", \"customer\", \"customerType\", \"vehicleNo\", \"vendor\", \"salesRate\", \"buyRate\",\r\n  // Customer\r\n  \"toBeAdvance\", \"advanceReceived\", \"advDeviation\", \"advanceRecDate\", \"validatedAdvanceUTRDescription\", \"validatedAdvanceAmount\", \"balance\", \"processingCharges\", \"inwardMisCharges\", \"outwardMisCharges\", \"balanceReceived\", \"remainingBalance\", \"balanceRecDate\", \"validatedBalanceUTR\", \"validatedBalanceUTRAmount\",\r\n  // Vendor\r\n  \"vendorOutwardPayment\", \"paidAmount\", \"balancePending\", \"vendorRemark\",\r\n  // POD\r\n  \"podVendorDate\", \"podSendToCustomerDate\", \"docNo\", \"podCustomerRec\", \"today\", \"balanceOverdueDays\", \"toBeCollectedAmount\"\r\n];\r\nconst keyToLabel = finalFields.reduce((map, key) => {\r\n  const label = key\r\n    .replace(/([a-z])([A-Z])/g, \"$1 $2\")\r\n    .replace(/_/g, \" \")\r\n    .replace(/^./, (str) => str.toUpperCase());\r\n  map[key] = label;\r\n  return map;\r\n}, {});\r\n\r\n\r\n// 2. Which fields are dates?\r\nconst dateFields = [\r\n  \"date\", \"deliveryDate\",\r\n  \"advanceRecDate\", \"balanceRecDate\",\r\n  \"podVendorDate\", \"podSendToCustomerDate\", \"podCustomerRec\", \"today\"\r\n];\r\n\r\nconst cleanDate = (value) => {\r\n  const parsed = new Date(value);\r\n  return !isNaN(parsed) ? parsed.toISOString().split(\"T\")[0] : \"\";\r\n};\r\nconst UploadForm = () => {\r\n  const [rows, setRows] = useState([]);\r\n  const [fileName, setFileName] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    const saved = localStorage.getItem(\"uploadPreviewRows\");\r\n    if (saved) {\r\n      setRows(JSON.parse(saved));\r\n    }\r\n  }, []);\r\n\r\n  const handleFile = (e) => {\r\n    const file = e.target.files[0];\r\n    if (!file) return;\r\n    if (!file.name.endsWith('.xls') && !file.name.endsWith('.xlsx')) {\r\n    toast.error(\"❌ Please upload a valid Excel file (.xls or .xlsx)\");\r\n    return;\r\n  }\r\n\r\n    setFileName(file.name);\r\n    const reader = new FileReader();\r\n\r\n    reader.onload = (event) => {\r\n      const workbook = XLSX.read(event.target.result, { type: \"binary\" });\r\n      const sheet = workbook.Sheets[workbook.SheetNames[0]];\r\n      const jsonData = XLSX.utils.sheet_to_json(sheet, { defval: \"\" }); // Use first row as headers\r\n\r\n      const processed = jsonData.map((row, i) => {\r\n        const result = {};\r\n        finalFields.forEach((key) => {\r\n          let val = row[key] || \"\";\r\n          if (dateFields.includes(key)) {\r\n            val = cleanDate(val);\r\n          }\r\n          result[key] = val;\r\n        });\r\n        return result;\r\n      });\r\n\r\n      setRows(processed);\r\n      localStorage.setItem(\"uploadPreviewRows\", JSON.stringify(processed));\r\n    };\r\n\r\n    reader.readAsBinaryString(file);\r\n  };\r\n\r\n  const handleCellChange = (index, key, value) => {\r\n    const updated = [...rows];\r\n    updated[index][key] = value;\r\n    setRows(updated);\r\n    localStorage.setItem(\"uploadPreviewRows\", JSON.stringify(updated));\r\n  };\r\n\r\n  const handleSubmitAll = async () => {\r\n    if (!rows.length) {\r\n      toast.warn(\"⚠️ No data to submit\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const batch = [];\r\n      for (const row of rows) {\r\n        const indentNo = await getNextIndentNumber();\r\n        const enriched = {\r\n          indentNumber: indentNo,\r\n          ...convertDateFields(row),\r\n          createdAt: new Date(),\r\n          createdBy: auth.currentUser?.email || \"anonymous\",\r\n          isCurrent: true,\r\n          versionDate: new Date(),\r\n          updateDescription: \"Excel Upload\"\r\n        };\r\n        await addDoc(collection(db, \"fleet_records\"), enriched);\r\n        batch.push(indentNo);\r\n      }\r\n\r\n      toast.success(`✅ Uploaded ${batch.length} records`);\r\n      localStorage.removeItem(\"uploadPreviewRows\");\r\n      setRows([]);\r\n    } catch (err) {\r\n      console.error(err);\r\n      toast.error(\"❌ Upload failed: \" + err.message);\r\n    }\r\n  };\r\n\r\n  const convertDateFields = (data) => {\r\n    const result = {};\r\n    Object.entries(data).forEach(([key, val]) => {\r\n      if (dateFields.includes(key)) {\r\n        const parsed = new Date(val);\r\n        result[key] = isNaN(parsed) ? val : Timestamp.fromDate(parsed);\r\n      } else {\r\n        result[key] = val;\r\n      }\r\n    });\r\n    return result;\r\n  };\r\n\r\n  const getNextIndentNumber = async () => {\r\n    const counterRef = doc(db, \"Counters\", \"fleet_counter\");\r\n    const newIndentNo = await runTransaction(db, async (transaction) => {\r\n      const docSnap = await transaction.get(counterRef);\r\n      if (!docSnap.exists()) throw new Error(\"Counter doc missing\");\r\n      const current = docSnap.data().nextFleetNo || 1;\r\n      transaction.update(counterRef, { nextFleetNo: current + 1 });\r\n      return current;\r\n    });\r\n    return newIndentNo;\r\n  };\r\n  return (\r\n    <div className=\"container mt-4\">\r\n      <h4>📤 Upload Excel File</h4>\r\n      <div style={{ display: \"flex\", alignItems: \"center\", gap: \"15px\", marginTop: \"10px\" }}>\r\n  <input type=\"file\" accept=\".xlsx, .xls\" onChange={handleFile} />\r\n  <button\r\n    className=\"btn btn-secondary\"\r\n    onClick={() => {downloadTemplate} }\r\n  >\r\n    ⬇️ Download Template\r\n  </button>\r\n</div>\r\n\r\n      <div style={{ marginTop: \"20px\" }}>\r\n        {rows.length > 0 && (\r\n          <>\r\n            <h5>📄 Preview & Edit Data</h5>\r\n            <div className=\"table-scroll-x\">\r\n              <table>\r\n                <thead>\r\n                  <tr>\r\n                    {Object.keys(rows[0]).map((col) => (\r\n                      <th key={col}>{keyToLabel[col] || col}</th>\r\n                    ))}\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {rows.map((row, rowIndex) => (\r\n                    <tr key={rowIndex}>\r\n                      {Object.keys(row).map((col) => (\r\n                        <td key={col}>\r\n                          <input\r\n                            type={dateFields.includes(col) ? \"date\" : \"text\"}\r\n                            value={row[col]}\r\n                            onChange={(e) => {\r\n                              const updated = [...rows];\r\n                              updated[rowIndex][col] = e.target.value;\r\n                              setRows(updated);\r\n                              localStorage.setItem(\"uploadPreviewRows\", JSON.stringify(updated));\r\n                            }}\r\n                          />\r\n                        </td>\r\n                      ))}\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n            <div style={{ textAlign: \"right\", marginTop: \"20px\" }}>\r\n              <button onClick={handleSubmitAll} className=\"btn btn-success me-3\">\r\n                ✅ Submit All Records\r\n              </button>\r\n              <button\r\n                onClick={() => {\r\n                  setRows([]);\r\n                  localStorage.removeItem(\"uploadPreviewRows\");\r\n                  toast.info(\"🧹 Cleared uploaded preview data\");\r\n                }}\r\n                className=\"btn btn-warning\"\r\n              >\r\n                🔄 Upload New Sheet\r\n              </button>\r\n            </div>\r\n          </>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UploadForm;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}