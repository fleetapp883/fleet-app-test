{"version":3,"sources":["firebase.js","components/Auth.js","components/UploadForm.js","components/ManualEntryForm.js","App.js","reportWebVitals.js","index.js"],"names":["app","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","getAuth","db","getFirestore","Auth","email","setEmail","useState","password","setPassword","isLogin","setIsLogin","loading","setLoading","React","createElement","style","padding","maxWidth","margin","border","borderRadius","textAlign","onSubmit","async","e","preventDefault","signInWithEmailAndPassword","alert","createUserWithEmailAndPassword","err","message","type","placeholder","value","onChange","target","required","width","marginBottom","disabled","backgroundColor","color","cursor","onClick","marginTop","background","textDecoration","labelToKey","Indent No","Indent Date","Placement Date","Customer","Customer Type","Customer Billing Type","Sourcing (Vendor)","Vendor Type","Vendor Billing Type","Origin","Destination","Vehicle No","Vehicle type","Driver No","Dispatch Date","Deliver Date","Offloading Date","E-way Bill","LR No.","Soft Copy POD Rec","Hard Copy POD Rec","Customer -Sale rate","Advance to be Paid","Advance Rec","Advance UTR","Advance Rec-Date","Balance Pending","Detention Charges","Loading/Unloading Charges","Miscellaneous Charges.","Processing Charges","Net Balance","Balance Rec Amount","Balance UTR","Balance Rec Date","Remaining Balance","Remaining Balance UTR","Remaining Balance Date","Supplier Buy Rate","Supplier Advance Pay","Supplier Advance Paid","Supplier Mis Charges","Supplier Invoice No.","Supplier Advance UTR","Supplier Advance Pay-Date","Supplier Balance Pending","Supplier Balance Paid Amount","Supplier Balance Paid UTR","Supplier Balance Paid Date","Remaining Supplier Amount","POD Rec Date","POD Send to Customer Date","POD Docket No.","POD Rec By Customer","POD Deduction If any","Gross Profit","Bad Debts","Net Profit","dateFields","UploadForm","previewData","setPreviewData","statusMap","setStatusMap","fleetNumbers","setFleetNumbers","normalize","label","replace","trim","toLowerCase","parseExcel","file","name","reader","FileReader","onload","workbook","XLSX","result","sheetName","SheetNames","sheet","Sheets","raw","sheet_to_json","header","defval","blankrows","length","splice","headers","rows","slice","map","row","rowIndex","obj","forEach","h","j","key","_Object$entries$find","normalizedLabel","Object","entries","find","_ref","rawLabel","getMappedKey","isDate","some","df","d","parse_date_code","concat","String","padStart","m","y","onerror","console","error","readAsBinaryString","saveRow","i","user","currentUser","newFleetNo","counterRef","doc","runTransaction","docSnap","transaction","get","exists","Error","current","data","nextFleetNo","update","getNextFleetNumber","enriched","_objectSpread","fleetNumber","createdAt","Date","createdBy","isCurrent","versionDate","addDoc","collection","prev","[object Object]","accept","_e$target$files","files","setTimeout","Fragment","resetTable","marginLeft","className","keys","handleEdit","updated","filter","_","idx","s","f","deleteRow","initialForm","IndentNo","IndentDate","PlacementDate","CustomerType","CustomerBillingType","SourcingVendor","VendorType","VendorBillingType","VehicleNo","VehicleType","DriverNo","DispatchDate","DeliverDate","OffloadingDate","EwayBill","LRNo","SoftCopyPODRec","HardCopyPODRec","CustomerSaleRate","AdvanceToBePaid","AdvanceRec","AdvanceUTR","AdvanceRecDate","BalancePending","DetentionCharges","LoadingUnloadingCharges","MiscCharges","ProcessingCharges","NetBalance","BalanceRecAmount","BalanceUTR","BalanceRecDate","RemainingBalance","RemainingBalanceUTR","RemainingBalanceDate","SupplierBuyRate","SupplierAdvancePay","SupplierAdvancePaid","SupplierMisCharges","SupplierInvoiceNo","SupplierAdvanceUTR","SupplierAdvancePayDate","SupplierBalancePending","SupplierBalancePaidAmount","SupplierBalancePaidUTR","SupplierBalancePaidDate","RemainingSupplierAmount","PODRecDate","PODSendToCustomerDate","PODDocketNo","PODRecByCustomer","PODDeductionIfAny","GrossProfit","BadDebts","NetProfit","ManualEntryForm","onAddRow","formData","setFormData","isSubmitting","setIsSubmitting","handleChange","enrichedData","docRef","id","navigator","clipboard","writeText","Fleet Number","Update Description","keyToLabel","fromEntries","k","v","App","setUser","records","setRecords","history","setHistory","searchKey","setSearchKey","searchField","setSearchField","startDate","setStartDate","endDate","setEndDate","originalRecords","setOriginalRecords","isSearching","setIsSearching","isExporting","setIsExporting","useEffect","unsubscribe","onAuthStateChanged","ignoredFields","val","undefined","seconds","toISOString","hasMeaningfulChanges","curr","orig","getChangedFields","original","changed","includes","push","overflowX","display","alignItems","src","alt","height","signOut","addToHistory","fleetRef","q","toast","warn","fromDate","toDate","query","where","Number","snapshot","getDocs","allVersions","currentOnly","empty","msg","info","l","sort","_row$key","_row$key2","toLocaleString","readOnly","updatedData","_objectWithoutProperties","_excluded","oldDoc","docs","oldData","cleanData","updateLog","hasChanged","_updatedData$key","_oldData$key","newVal","oldVal","window","confirm","join","updateDescription","updateDoc","expiredAt","modifiedBy","newVersion","originalMap","r","success","handleUpdate","fleetNumberToDelete","batchDeletes","deleteDoc","Promise","all","handleDelete","handleExport","resolve","then","__webpack_require__","bind","xlsx","flatRow","worksheet","utils","json_to_sheet","book_new","book_append_sheet","writeFile","catch","finally","Set","flatMap","col","a","b","_a$expiredAt","_b$expiredAt","aTime","_row$col","_row$col2","ToastContainer","position","autoClose","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.b9b20c72.chunk.js","sourcesContent":["\r\n// // src/firebase.js\r\n\r\n// import { initializeApp } from \"firebase/app\";\r\n// import { getAuth } from \"firebase/auth\";\r\n// import { getFirestore } from \"firebase/firestore\";\r\n\r\n// // ✅ Your Firebase configuration\r\n// const firebaseConfig = {\r\n//   apiKey: \"AIzaSyCWw-I6mxAkJ1Q0Gt_wP1Bge-N0o-7MePU\",\r\n//   authDomain: \"sample-firebase-ai-app-c8afb.firebaseapp.com\",\r\n//   projectId: \"sample-firebase-ai-app-c8afb\",\r\n//   storageBucket: \"sample-firebase-ai-app-c8afb.appspot.com\", // 🔧 fixed from .app to .appspot.com\r\n//   messagingSenderId: \"221369775323\",\r\n//   appId: \"1:221369775323:web:c05d3eb4f88d1278d348fe\"\r\n// };\r\n\r\n// // ✅ Initialize Firebase app\r\n// const app = initializeApp(firebaseConfig);\r\n\r\n// // ✅ Export auth and firestore\r\n// export const auth = getAuth(app);\r\n// export const db = getFirestore(app);\r\n// src/firebase.js\r\n\r\nimport { initializeApp } from \"firebase/app\";\r\nimport { getAuth } from \"firebase/auth\";\r\nimport { getFirestore } from \"firebase/firestore\";\r\n\r\n// ✅ Your Firebase configuration (copied from Firebase Console)\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyAOcDXL1kQsi_MoLJ33GWn9-57qhQ0CWro\",\r\n  authDomain: \"fleet-9805b.firebaseapp.com\",\r\n  projectId: \"fleet-9805b\",\r\n  storageBucket: \"fleet-9805b.appspot.com\", // ✅ fixed: was \"firebasestorage.app\", should be \"appspot.com\"\r\n  messagingSenderId: \"682529821046\",\r\n  appId: \"1:682529821046:web:cbb00f5dcbac062304aa57\",\r\n  measurementId: \"G-T4PZQZGWZ9\"\r\n};\r\n\r\n// ✅ Initialize Firebase\r\nconst app = initializeApp(firebaseConfig);\r\n\r\n// ✅ Export Firebase services\r\nexport const auth = getAuth(app);\r\nexport const db = getFirestore(app);","import React, { useState } from \"react\";\r\nimport { auth } from \"../firebase\";\r\nimport {\r\n  createUserWithEmailAndPassword,\r\n  signInWithEmailAndPassword\r\n} from \"firebase/auth\";\r\n\r\nconst Auth = () => {\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [isLogin, setIsLogin] = useState(true);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    setLoading(true);\r\n    try {\r\n      if (isLogin) {\r\n        await signInWithEmailAndPassword(auth, email, password);\r\n        alert(\"✅ Login successful!\");\r\n      } else {\r\n        await createUserWithEmailAndPassword(auth, email, password);\r\n        alert(\"✅ Account created successfully!\");\r\n      }\r\n    } catch (err) {\r\n      alert(\"❌ \" + err.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div style={{ padding: 40, maxWidth: 400, margin: \"auto\", border: \"1px solid #ccc\", borderRadius: 10 }}>\r\n      <h2 style={{ textAlign: \"center\" }}>{isLogin ? \"Login\" : \"Sign Up\"}</h2>\r\n      <form onSubmit={handleSubmit}>\r\n        <input\r\n          type=\"email\"\r\n          placeholder=\"Email\"\r\n          value={email}\r\n          onChange={(e) => setEmail(e.target.value)}\r\n          required\r\n          style={{ width: \"100%\", padding: 8, marginBottom: 10 }}\r\n        />\r\n        <input\r\n          type=\"password\"\r\n          placeholder=\"Password\"\r\n          value={password}\r\n          onChange={(e) => setPassword(e.target.value)}\r\n          required\r\n          style={{ width: \"100%\", padding: 8, marginBottom: 10 }}\r\n        />\r\n        <button\r\n          type=\"submit\"\r\n          disabled={loading}\r\n          style={{\r\n            width: \"100%\",\r\n            padding: 10,\r\n            backgroundColor: \"#007BFF\",\r\n            color: \"white\",\r\n            border: \"none\",\r\n            cursor: \"pointer\"\r\n          }}\r\n        >\r\n          {loading ? \"Please wait...\" : isLogin ? \"Login\" : \"Sign Up\"}\r\n        </button>\r\n      </form>\r\n      <button\r\n        onClick={() => setIsLogin(!isLogin)}\r\n        style={{\r\n          marginTop: 15,\r\n          background: \"none\",\r\n          border: \"none\",\r\n          color: \"#007BFF\",\r\n          cursor: \"pointer\",\r\n          textDecoration: \"underline\"\r\n        }}\r\n      >\r\n        {isLogin ? \"New user? Create an account\" : \"Already have an account? Login\"}\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Auth;\r\n","import React, { useState } from \"react\";\r\nimport { addDoc, collection, doc, runTransaction } from \"firebase/firestore\";\r\nimport * as XLSX from \"xlsx\";\r\nimport { db, auth } from \"../firebase\";\r\n\r\nconst labelToKey = {\r\n  \"Indent No\": \"IndentNo\", \"Indent Date\": \"IndentDate\", \"Placement Date\": \"PlacementDate\",\r\n  \"Customer\": \"Customer\", \"Customer Type\": \"CustomerType\", \"Customer Billing Type\": \"CustomerBillingType\",\r\n  \"Sourcing (Vendor)\": \"SourcingVendor\", \"Vendor Type\": \"VendorType\", \"Vendor Billing Type\": \"VendorBillingType\",\r\n  \"Origin\": \"Origin\", \"Destination\": \"Destination\", \"Vehicle No\": \"VehicleNo\", \"Vehicle type\": \"VehicleType\",\r\n  \"Driver No\": \"DriverNo\", \"Dispatch Date\": \"DispatchDate\", \"Deliver Date\": \"DeliverDate\",\r\n  \"Offloading Date\": \"OffloadingDate\", \"E-way Bill\": \"EwayBill\", \"LR No.\": \"LRNo\",\r\n  \"Soft Copy POD Rec\": \"SoftCopyPODRec\", \"Hard Copy POD Rec\": \"HardCopyPODRec\",\r\n  \"Customer -Sale rate\": \"CustomerSaleRate\", \"Advance to be Paid\": \"AdvanceToBePaid\",\r\n  \"Advance Rec\": \"AdvanceRec\", \"Advance UTR\": \"AdvanceUTR\", \"Advance Rec-Date\": \"AdvanceRecDate\",\r\n  \"Balance Pending\": \"BalancePending\", \"Detention Charges\": \"DetentionCharges\",\r\n  \"Loading/Unloading Charges\": \"LoadingUnloadingCharges\", \"Miscellaneous Charges.\": \"MiscCharges\",\r\n  \"Processing Charges\": \"ProcessingCharges\", \"Net Balance\": \"NetBalance\",\r\n  \"Balance Rec Amount\": \"BalanceRecAmount\", \"Balance UTR\": \"BalanceUTR\", \"Balance Rec Date\": \"BalanceRecDate\",\r\n  \"Remaining Balance\": \"RemainingBalance\", \"Remaining Balance UTR\": \"RemainingBalanceUTR\",\r\n  \"Remaining Balance Date\": \"RemainingBalanceDate\", \"Supplier Buy Rate\": \"SupplierBuyRate\",\r\n  \"Supplier Advance Pay\": \"SupplierAdvancePay\", \"Supplier Advance Paid\": \"SupplierAdvancePaid\",\r\n  \"Supplier Mis Charges\": \"SupplierMisCharges\", \"Supplier Invoice No.\": \"SupplierInvoiceNo\",\r\n  \"Supplier Advance UTR\": \"SupplierAdvanceUTR\", \"Supplier Advance Pay-Date\": \"SupplierAdvancePayDate\",\r\n  \"Supplier Balance Pending\": \"SupplierBalancePending\", \"Supplier Balance Paid Amount\": \"SupplierBalancePaidAmount\",\r\n  \"Supplier Balance Paid UTR\": \"SupplierBalancePaidUTR\", \"Supplier Balance Paid Date\": \"SupplierBalancePaidDate\",\r\n  \"Remaining Supplier Amount\": \"RemainingSupplierAmount\", \"POD Rec Date\": \"PODRecDate\",\r\n  \"POD Send to Customer Date\": \"PODSendToCustomerDate\", \"POD Docket No.\": \"PODDocketNo\",\r\n  \"POD Rec By Customer\": \"PODRecByCustomer\", \"POD Deduction If any\": \"PODDeductionIfAny\",\r\n  \"Gross Profit\": \"GrossProfit\", \"Bad Debts\": \"BadDebts\", \"Net Profit\": \"NetProfit\"\r\n};\r\n\r\nconst dateFields = [\r\n  \"Indent Date\", \"Placement Date\", \"Dispatch Date\", \"Deliver Date\", \"Offloading Date\",\r\n  \"Soft Copy POD Rec\", \"Hard Copy POD Rec\", \"Advance Rec-Date\", \"Balance Rec Date\",\r\n  \"Remaining Balance Date\", \"Supplier Advance Pay-Date\", \"Supplier Balance Paid Date\",\r\n  \"POD Rec Date\", \"POD Send to Customer Date\", \"POD Rec By Customer\"\r\n];\r\n\r\nconst UploadForm = () => {\r\n  const [previewData, setPreviewData] = useState([]);\r\n  const [statusMap, setStatusMap] = useState({});\r\n  const [fleetNumbers, setFleetNumbers] = useState({});\r\n\r\n  const normalize = (label) => (label || \"\").replace(/[.\\s]+/g, \" \").trim().toLowerCase();\r\n\r\n  const getMappedKey = (label) => {\r\n    const normalizedLabel = normalize(label);\r\n    return Object.entries(labelToKey).find(\r\n      ([rawLabel]) => normalize(rawLabel) === normalizedLabel\r\n    )?.[1];\r\n  };\r\n\r\n  const parseExcel = (file) => {\r\n    if (!file) {\r\n      alert(\"No file selected\");\r\n      return;\r\n    }\r\n\r\n    alert(\"File selected: \" + file.name);\r\n    const reader = new FileReader();\r\n    reader.onload = (e) => {\r\n      alert(\"File read started\");\r\n\r\n      const workbook = XLSX.read(e.target.result, { type: \"binary\" });\r\n      const sheetName = workbook.SheetNames[0];\r\n      alert(\"Reading sheet: \" + sheetName);\r\n      const sheet = workbook.Sheets[sheetName];\r\n\r\n      const raw = XLSX.utils.sheet_to_json(sheet, { header: 1, defval: \"\", blankrows: false });\r\n      if (raw.length < 3) {\r\n        alert(\"Not enough rows to parse.\");\r\n        return;\r\n      }\r\n\r\n      raw.splice(0, 1); // Remove useless top row\r\n      const headers = raw[0];\r\n      const rows = raw.slice(1).map((row, rowIndex) => {\r\n        const obj = {};\r\n        headers.forEach((h, j) => {\r\n          const key = getMappedKey(h);\r\n          if (!key) return;\r\n\r\n          const value = row[j];\r\n          const isDate = dateFields.some(df => normalize(df) === normalize(h));\r\n\r\n          if (typeof value === \"number\" && isDate) {\r\n            const d = XLSX.SSF.parse_date_code(value);\r\n            if (d) {\r\n              obj[key] = `${String(d.d).padStart(2, '0')}-${String(d.m).padStart(2, '0')}-${d.y}`;\r\n            }\r\n          } else {\r\n            obj[key] = String(value ?? \"\").trim();\r\n          }\r\n        });\r\n        return obj;\r\n      });\r\n\r\n      alert(\"Parsed rows: \" + rows.length);\r\n      setPreviewData(rows);\r\n      setStatusMap({});\r\n      setFleetNumbers({});\r\n    };\r\n\r\n    reader.onerror = (err) => {\r\n      alert(\"Failed to read file: \" + err);\r\n      console.error(\"FileReader error:\", err);\r\n    };\r\n\r\n    reader.readAsBinaryString(file);\r\n  };\r\n\r\n  const getNextFleetNumber = async () => {\r\n    const counterRef = doc(db, \"Counters\", \"fleet_counter\");\r\n    const newFleetNo = await runTransaction(db, async (transaction) => {\r\n      const docSnap = await transaction.get(counterRef);\r\n      if (!docSnap.exists()) throw new Error(\"Counter doc missing\");\r\n      const current = docSnap.data().nextFleetNo || 1;\r\n      transaction.update(counterRef, { nextFleetNo: current + 1 });\r\n      return current;\r\n    });\r\n    return newFleetNo;\r\n  };\r\n\r\n  const saveRow = async (row, i) => {\r\n    const user = auth.currentUser;\r\n    try {\r\n      const newFleetNo = await getNextFleetNumber();\r\n      const enriched = {\r\n        ...row,\r\n        fleetNumber: newFleetNo,\r\n        createdAt: new Date(),\r\n        createdBy: user?.email || \"anonymous\",\r\n        isCurrent: true,\r\n        versionDate: new Date(),\r\n      };\r\n      await addDoc(collection(db, \"fleet_records\"), enriched);\r\n      setStatusMap(prev => ({ ...prev, [i]: \"✅ Saved\" }));\r\n      setFleetNumbers(prev => ({ ...prev, [i]: newFleetNo }));\r\n    } catch (err) {\r\n      setStatusMap(prev => ({ ...prev, [i]: \"❌ Failed\" }));\r\n    }\r\n  };\r\n\r\n  const saveAll = async () => {\r\n    for (let i = 0; i < previewData.length; i++) {\r\n      if (!statusMap[i]) await saveRow(previewData[i], i);\r\n    }\r\n  };\r\n\r\n  const handleEdit = (i, key, value) => {\r\n    const updated = [...previewData];\r\n    updated[i][key] = value;\r\n    setPreviewData(updated);\r\n  };\r\n\r\n  const deleteRow = (i) => {\r\n    setPreviewData(previewData.filter((_, idx) => idx !== i));\r\n    const s = { ...statusMap }; delete s[i];\r\n    const f = { ...fleetNumbers }; delete f[i];\r\n    setStatusMap(s);\r\n    setFleetNumbers(f);\r\n  };\r\n\r\n  const resetTable = () => {\r\n    setPreviewData([]);\r\n    setStatusMap({});\r\n    setFleetNumbers({});\r\n  };\r\n\r\n  return (\r\n    <div style={{ marginBottom: 40 }}>\r\n      <h4>Upload Excel & Preview</h4>\r\n      <input\r\n        type=\"file\"\r\n        accept=\".xlsx, .xls\"\r\n        onChange={(e) => {\r\n          const file = e.target.files?.[0];\r\n          if (file) {\r\n            parseExcel(file);\r\n            setTimeout(() => {\r\n              e.target.value = \"\";\r\n            }, 100);\r\n          } else {\r\n            alert(\"No file selected.\");\r\n          }\r\n        }}\r\n      />\r\n      {previewData.length > 0 && (\r\n        <>\r\n          <h5 style={{ marginTop: 20 }}>📄 Preview Table (Excel Upload)</h5>\r\n          <button onClick={saveAll}>💾 Save All</button>\r\n          <button onClick={resetTable} style={{ marginLeft: 10, color: \"red\" }}>🧹 Clear</button>\r\n          <div className=\"table-scroll-x\">\r\n            <table>\r\n              <thead>\r\n                <tr>\r\n                  <th>Fleet Number</th>\r\n                  {Object.keys(previewData[0]).map(key => <th key={key}>{key}</th>)}\r\n                  <th>Status</th>\r\n                  <th>Action</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {previewData.map((row, i) => (\r\n                  <tr key={i}>\r\n                    <td>{fleetNumbers[i] || \"\"}</td>\r\n                    {Object.keys(row).map((key) => (\r\n                      <td key={key}>\r\n                        <input\r\n                          type=\"text\"\r\n                          value={row[key]}\r\n                          onChange={(e) => handleEdit(i, key, e.target.value)}\r\n                          style={{ width: \"120px\" }}\r\n                        />\r\n                      </td>\r\n                    ))}\r\n                    <td>{statusMap[i] || \"⏳ Pending\"}</td>\r\n                    <td>\r\n                      <button onClick={() => saveRow(row, i)} disabled={statusMap[i] === \"✅ Saved\"}>Save</button>\r\n                      <button onClick={() => deleteRow(i)} style={{ marginLeft: 6, color: \"red\" }}>Delete</button>\r\n                    </td>\r\n                  </tr>\r\n                ))}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UploadForm;\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  collection,\r\n  addDoc,\r\n  doc,\r\n  runTransaction\r\n} from \"firebase/firestore\";\r\nimport { db, auth } from \"../firebase\";\r\n\r\nconst initialForm = {\r\n  IndentNo: \"\",\r\n  IndentDate: \"\",\r\n  PlacementDate: \"\",\r\n  Customer: \"\",\r\n  CustomerType: \"\",\r\n  CustomerBillingType: \"\",\r\n  SourcingVendor: \"\",\r\n  VendorType: \"\",\r\n  VendorBillingType: \"\",\r\n  Origin: \"\",\r\n  Destination: \"\",\r\n  VehicleNo: \"\",\r\n  VehicleType: \"\",\r\n  DriverNo: \"\",\r\n  DispatchDate: \"\",\r\n  DeliverDate: \"\",\r\n  OffloadingDate: \"\",\r\n  EwayBill: \"\",\r\n  LRNo: \"\",\r\n  SoftCopyPODRec: \"\",\r\n  HardCopyPODRec: \"\",\r\n  CustomerSaleRate: \"\",\r\n  AdvanceToBePaid: \"\",\r\n  AdvanceRec: \"\",\r\n  AdvanceUTR: \"\",\r\n  AdvanceRecDate: \"\",\r\n  BalancePending: \"\",\r\n  DetentionCharges: \"\",\r\n  LoadingUnloadingCharges: \"\",\r\n  MiscCharges: \"\",\r\n  ProcessingCharges: \"\",\r\n  NetBalance: \"\",\r\n  BalanceRecAmount: \"\",\r\n  BalanceUTR: \"\",\r\n  BalanceRecDate: \"\",\r\n  RemainingBalance: \"\",\r\n  RemainingBalanceUTR: \"\",\r\n  RemainingBalanceDate: \"\",\r\n  SupplierBuyRate: \"\",\r\n  SupplierAdvancePay: \"\",\r\n  SupplierAdvancePaid: \"\",\r\n  SupplierMisCharges: \"\",\r\n  SupplierInvoiceNo: \"\",\r\n  SupplierAdvanceUTR: \"\",\r\n  SupplierAdvancePayDate: \"\",\r\n  SupplierBalancePending: \"\",\r\n  SupplierBalancePaidAmount: \"\",\r\n  SupplierBalancePaidUTR: \"\",\r\n  SupplierBalancePaidDate: \"\",\r\n  RemainingSupplierAmount: \"\",\r\n  PODRecDate: \"\",\r\n  PODSendToCustomerDate: \"\",\r\n  PODDocketNo: \"\",\r\n  PODRecByCustomer: \"\",\r\n  PODDeductionIfAny: \"\",\r\n  GrossProfit: \"\",\r\n  BadDebts: \"\",\r\n  NetProfit: \"\"\r\n};\r\n\r\nconst ManualEntryForm = ({ onAddRow }) => {\r\n  const [formData, setFormData] = useState(initialForm);\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n\r\n\r\n  const handleChange = (e) => {\r\n    setFormData({ ...formData, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  const getNextFleetNumber = async () => {\r\n    const counterRef = doc(db, \"Counters\", \"fleet_counter\");\r\n\r\n    const newFleetNo = await runTransaction(db, async (transaction) => {\r\n      const docSnap = await transaction.get(counterRef);\r\n      if (!docSnap.exists()) {\r\n        throw new Error(\"Counter document does not exist.\");\r\n      }\r\n\r\n      const current = docSnap.data().nextFleetNo || 1;\r\n      transaction.update(counterRef, { nextFleetNo: current + 1 });\r\n      return current;\r\n    });\r\n\r\n    return newFleetNo;\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n  e.preventDefault();\r\n  if (isSubmitting) return;\r\n\r\n  setIsSubmitting(true);\r\n\r\n  try {\r\n    const user = auth.currentUser;\r\n    const fleetNumber = await getNextFleetNumber();\r\n\r\n    const enrichedData = {\r\n      ...formData,\r\n      fleetNumber,\r\n      createdAt: new Date(),\r\n      createdBy: user?.email || \"anonymous\",\r\n      isCurrent: true,\r\n      versionDate: new Date()\r\n    };\r\n\r\n    const docRef = await addDoc(collection(db, \"fleet_records\"), enrichedData);\r\n    onAddRow({ id: docRef.id, ...enrichedData }, true); // Add to current + history\r\n    setFormData(initialForm);\r\n\r\n    await navigator.clipboard.writeText(String(fleetNumber));\r\n    alert(`✅ Row saved!\\nFleet Number copied: ${fleetNumber}`);\r\n  } catch (err) {\r\n    alert(\"❌ Error saving row: \" + err.message);\r\n  } finally {\r\n    setIsSubmitting(false);\r\n  }\r\n};\r\n\r\n  return (\r\n    <div style={{ marginTop: 20 }}>\r\n      <h4>Manual Entry</h4>\r\n      <form onSubmit={handleSubmit}>\r\n        {Object.keys(initialForm).map((key) => (\r\n          <input\r\n            key={key}\r\n            name={key}\r\n            placeholder={key}\r\n            value={formData[key]}\r\n            onChange={handleChange}\r\n            style={{ margin: 4, width: \"220px\" }}\r\n            required={false}\r\n          />\r\n        ))}\r\n        <br />\r\n        <button type=\"submit\" disabled={isSubmitting}>\r\n  {isSubmitting ? (\r\n    <>\r\n      Saving... <span className=\"loader-spinner\" />\r\n    </>\r\n  ) : \"Add Row\"}\r\n</button>\r\n\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ManualEntryForm;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { onAuthStateChanged, signOut } from \"firebase/auth\";\r\nimport {\r\n  collection,\r\n  addDoc,\r\n  query,\r\n  where,\r\n  getDocs,\r\n  getDoc,\r\n  updateDoc,\r\n  deleteDoc,\r\n  doc\r\n} from \"firebase/firestore\";\r\nimport { auth, db } from \"./firebase\";\r\nimport Auth from \"./components/Auth\";\r\nimport UploadForm from \"./components/UploadForm\";\r\nimport ManualEntryForm from \"./components/ManualEntryForm\";\r\nimport \"./App.css\";\r\nimport { toast, ToastContainer } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\n\r\n\r\n\r\nconst labelToKey = {\r\n  \"Fleet Number\": \"fleetNumber\",\r\n  \"Indent No\": \"IndentNo\", \"Indent Date\": \"IndentDate\", \"Placement Date\": \"PlacementDate\",\r\n  \"Customer\": \"Customer\", \"Customer Type\": \"CustomerType\", \"Customer Billing Type\": \"CustomerBillingType\",\r\n  \"Sourcing (Vendor)\": \"SourcingVendor\", \"Vendor Type\": \"VendorType\", \"Vendor Billing Type\": \"VendorBillingType\",\r\n  \"Origin\": \"Origin\", \"Destination\": \"Destination\", \"Vehicle No\": \"VehicleNo\", \"Vehicle type\": \"VehicleType\",\r\n  \"Driver No\": \"DriverNo\", \"Dispatch Date\": \"DispatchDate\", \"Deliver Date\": \"DeliverDate\",\r\n  \"Offloading Date\": \"OffloadingDate\", \"E-way Bill\": \"EwayBill\", \"LR No.\": \"LRNo\",\r\n  \"Soft Copy POD Rec\": \"SoftCopyPODRec\", \"Hard Copy POD Rec\": \"HardCopyPODRec\", \"Customer -Sale rate\": \"CustomerSaleRate\",\r\n  \"Advance to be Paid\": \"AdvanceToBePaid\", \"Advance Rec\": \"AdvanceRec\", \"Advance UTR\": \"AdvanceUTR\",\r\n  \"Advance Rec-Date\": \"AdvanceRecDate\", \"Balance Pending\": \"BalancePending\", \"Detention Charges\": \"DetentionCharges\",\r\n  \"Loading/Unloading Charges\": \"LoadingUnloadingCharges\", \"Miscellaneous Charges.\": \"MiscCharges\",\r\n  \"Processing Charges\": \"ProcessingCharges\", \"Net Balance\": \"NetBalance\", \"Balance Rec Amount\": \"BalanceRecAmount\",\r\n  \"Balance UTR\": \"BalanceUTR\", \"Balance Rec Date\": \"BalanceRecDate\", \"Remaining Balance\": \"RemainingBalance\",\r\n  \"Remaining Balance UTR\": \"RemainingBalanceUTR\", \"Remaining Balance Date\": \"RemainingBalanceDate\",\r\n  \"Supplier Buy Rate\": \"SupplierBuyRate\", \"Supplier Advance Pay\": \"SupplierAdvancePay\",\r\n  \"Supplier Advance Paid\": \"SupplierAdvancePaid\", \"Supplier Mis Charges\": \"SupplierMisCharges\",\r\n  \"Supplier Invoice No.\": \"SupplierInvoiceNo\", \"Supplier Advance UTR\": \"SupplierAdvanceUTR\",\r\n  \"Supplier Advance Pay-Date\": \"SupplierAdvancePayDate\", \"Supplier Balance Pending\": \"SupplierBalancePending\",\r\n  \"Supplier Balance Paid Amount\": \"SupplierBalancePaidAmount\", \"Supplier Balance Paid UTR\": \"SupplierBalancePaidUTR\",\r\n  \"Supplier Balance Paid Date\": \"SupplierBalancePaidDate\", \"Remaining Supplier Amount\": \"RemainingSupplierAmount\",\r\n  \"POD Rec Date\": \"PODRecDate\", \"POD Send to Customer Date\": \"PODSendToCustomerDate\",\r\n  \"POD Docket No.\": \"PODDocketNo\", \"POD Rec By Customer\": \"PODRecByCustomer\", \"POD Deduction If any\": \"PODDeductionIfAny\",\r\n  \"Gross Profit\": \"GrossProfit\", \"Bad Debts\": \"BadDebts\", \"Net Profit\": \"NetProfit\",\r\n  \"isCurrent\": \"isCurrent\", \"createdBy\": \"createdBy\", \"createdAt\": \"createdAt\", \"Update Description\": \"updateDescription\"\r\n};\r\n\r\nconst keyToLabel = Object.fromEntries(Object.entries(labelToKey).map(([k, v]) => [v, k]));\r\n\r\n\r\nfunction App() {\r\n  const [user, setUser] = useState(null);\r\n  const [records, setRecords] = useState([]);\r\n  const [history, setHistory] = useState([]);\r\n  const [searchKey, setSearchKey] = useState(\"\");\r\n  const [searchField, setSearchField] = useState(\"fleetNumber\");\r\n  const [startDate, setStartDate] = useState(\"\");\r\n  const [endDate, setEndDate] = useState(\"\");\r\n  const [originalRecords, setOriginalRecords] = useState({});\r\n  const [isSearching, setIsSearching] = useState(false);\r\n  const [isExporting, setIsExporting] = useState(false);\r\n\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    const unsubscribe = onAuthStateChanged(auth, (currentUser) => {\r\n      setUser(currentUser);\r\n    });\r\n    return () => unsubscribe();\r\n  }, []);\r\n\r\n  // const handleExport = () => {\r\n  //   import(\"xlsx\").then((xlsx) => {\r\n  //     const rows = history.map((row) => {\r\n  //       const flatRow = {};\r\n  //       Object.keys(row).forEach((k) => {\r\n  //         const value = row[k];\r\n  //         flatRow[k] =\r\n  //           typeof value === \"object\" && value?.seconds\r\n  //             ? new Date(value.seconds * 1000).toLocaleString()\r\n  //             : String(value ?? \"\");\r\n  //       });\r\n  //       return flatRow;\r\n  //     });\r\n\r\n  //     const worksheet = xlsx.utils.json_to_sheet(rows);\r\n  //     const workbook = xlsx.utils.book_new();\r\n  //     xlsx.utils.book_append_sheet(workbook, worksheet, \"History\");\r\n  //     xlsx.writeFile(workbook, \"Fleet_Full_Version_History.xlsx\");\r\n  //   });\r\n  // };\r\nconst handleExport = () => {\r\n  setIsExporting(true);\r\n  toast.info(\"⏳ Preparing Excel export...\");\r\n\r\n  import(\"xlsx\").then((xlsx) => {\r\n    const rows = history.map((row) => {\r\n      const flatRow = {};\r\n      Object.keys(row).forEach((k) => {\r\n        const value = row[k];\r\n        flatRow[k] =\r\n          typeof value === \"object\" && value?.seconds\r\n            ? new Date(value.seconds * 1000).toLocaleString()\r\n            : String(value ?? \"\");\r\n      });\r\n      return flatRow;\r\n    });\r\n\r\n    const worksheet = xlsx.utils.json_to_sheet(rows);\r\n    const workbook = xlsx.utils.book_new();\r\n    xlsx.utils.book_append_sheet(workbook, worksheet, \"History\");\r\n    xlsx.writeFile(workbook, \"Fleet_Full_Version_History.xlsx\");\r\n\r\n    toast.success(\"✅ Export complete.\");\r\n  }).catch((err) => {\r\n    toast.error(\"❌ Export failed: \" + err.message);\r\n  }).finally(() => {\r\n    setIsExporting(false);\r\n  });\r\n};\r\n\r\n\r\n\r\nconst handleSearch = async () => {\r\n  setIsSearching(true);\r\n  try {\r\n    const fleetRef = collection(db, \"fleet_records\");\r\n    let q;\r\n\r\n    if (searchField === \"Date\") {\r\n      if (!startDate || !endDate) {\r\n        toast.warn(\"📅 Please select both From and To dates.\");\r\n        setIsSearching(false);\r\n        return;\r\n      }\r\n\r\n      const fromDate = new Date(startDate);\r\n      const toDate = new Date(endDate + \"T23:59:59\");\r\n\r\n      if (fromDate > toDate) {\r\n        toast.warn(\"⚠️ 'From' date cannot be after 'To' date.\");\r\n        setIsSearching(false);\r\n        return;\r\n      }\r\n\r\n      q = query(fleetRef, where(\"createdAt\", \">=\", fromDate), where(\"createdAt\", \"<=\", toDate));\r\n    } else if (searchKey) {\r\n      const key = searchField === \"fleetNumber\" ? Number(searchKey) : searchKey;\r\n      q = query(fleetRef, where(searchField, \"==\", key));\r\n    } else {\r\n      toast.warn(\"🔍 Please enter a search value.\");\r\n      setIsSearching(false);\r\n      return;\r\n    }\r\n\r\n    const snapshot = await getDocs(q);\r\n    const allVersions = [];\r\n    const currentOnly = [];\r\n\r\n    snapshot.forEach((docSnap) => {\r\n      const row = { id: docSnap.id, ...docSnap.data() };\r\n      allVersions.push(row);\r\n      if (row.isCurrent) currentOnly.push(row);\r\n    });\r\n\r\nif (searchField === \"fleetNumber\" || searchField === \"Broker\") {\r\n  setRecords(currentOnly);\r\n  setHistory(allVersions);\r\n} else if (searchField === \"Date\") {\r\n  setRecords([]); // Clear editable\r\n  setHistory(allVersions);\r\n}\r\n\r\n\r\n    // 🛑 Show toast if no results found\r\n    if (snapshot.empty || allVersions.length === 0) {\r\n      let msg = \"❌ No data found.\";\r\n      if (searchField === \"Date\") {\r\n        msg = `❌ No data available between ${startDate} and ${endDate}`;\r\n      } else if (searchField === \"fleetNumber\") {\r\n        msg = `❌ No record found for Fleet Number: ${searchKey}`;\r\n      } else if (searchField === \"Broker\") {\r\n        msg = `❌ No record found for Broker: ${searchKey}`;\r\n      }\r\n      toast.info(msg);\r\n    }\r\n\r\n  } catch (error) {\r\n    toast.error(\"❌ Search failed: \" + error.message);\r\n  } finally {\r\n    setIsSearching(false);\r\n  }\r\n};\r\n\r\n\r\nconst ignoredFields = [\"versionDate\", \"expiredAt\", \"isCurrent\", \"updateDescription\", \"createdAt\", \"createdBy\"];\r\n\r\nconst normalize = (val) => {\r\n  if (val === null || val === undefined) return \"\";\r\n  return typeof val === \"object\" && val.seconds\r\n    ? new Date(val.seconds * 1000).toISOString()\r\n    : String(val).trim();\r\n};\r\n\r\nconst getChangedFields = (current, original) => {\r\n  const changed = [];\r\n  for (const key in current) {\r\n    if (ignoredFields.includes(key)) continue;\r\n    const currVal = normalize(current[key]);\r\n    const origVal = normalize(original?.[key]);\r\n    if (currVal !== origVal) changed.push(key);\r\n  }\r\n  return changed;\r\n};\r\n\r\nconst hasMeaningfulChanges = (curr, orig) => getChangedFields(curr, orig).length > 0;\r\n\r\n\r\nconst handleUpdate = async (row) => {\r\n  try {\r\n    const { id, fleetNumber, ...updatedData } = row;\r\n\r\n    const currentDocSnap = await getDocs(\r\n      query(collection(db, \"fleet_records\"), where(\"fleetNumber\", \"==\", fleetNumber), where(\"isCurrent\", \"==\", true))\r\n    );\r\n    const oldDoc = currentDocSnap.docs.find(doc => doc.id === id);\r\n    const oldData = oldDoc?.data() || {};\r\n\r\n    const cleanData = {};\r\n    const updateLog = [];\r\n    const ignoredFields = [\"id\", \"isCurrent\", \"createdAt\", \"createdBy\", \"versionDate\", \"updateDescription\", \"expiredAt\", \"modifiedBy\"];\r\n\r\n    let hasChanged = false;\r\n\r\n    for (const key in updatedData) {\r\n      if (ignoredFields.includes(key)) continue;\r\n\r\n      const newVal = updatedData[key] ?? \"\";\r\n      const oldVal = oldData[key] ?? \"\";\r\n\r\n      cleanData[key] = newVal;\r\n\r\n      if (String(newVal).trim() !== String(oldVal).trim() && keyToLabel[key]) {\r\n        updateLog.push(`Updated ${keyToLabel[key]}`);\r\n        hasChanged = true;\r\n      }\r\n    }\r\n\r\n    if (!hasChanged) {\r\n      toast.info(\"ℹ️ No changes detected — update skipped.\");\r\n      return;\r\n    }\r\n\r\n    // ✅ Confirmation before updating\r\n    const confirm = window.confirm(`Are you sure you want to update this record?\\nChanges: ${updateLog.join(\", \")}`);\r\n    if (!confirm) return;\r\n\r\n    const updateDescription = updateLog.join(\", \");\r\n\r\n    await updateDoc(doc(db, \"fleet_records\", id), {\r\n      isCurrent: false,\r\n      expiredAt: new Date(),\r\n      modifiedBy: user.email\r\n    });\r\n\r\n    const newVersion = {\r\n      ...cleanData,\r\n      fleetNumber,\r\n      createdAt: new Date(),\r\n      createdBy: user.email,\r\n      isCurrent: true,\r\n      versionDate: new Date(),\r\n      updateDescription\r\n    };\r\n\r\n    const docRef = await addDoc(collection(db, \"fleet_records\"), newVersion);\r\n\r\n    const q = query(collection(db, \"fleet_records\"), where(\"fleetNumber\", \"==\", fleetNumber));\r\n    const snapshot = await getDocs(q);\r\n    const allVersions = [];\r\n    const currentOnly = [];\r\n\r\n    snapshot.forEach((docSnap) => {\r\n      const row = { id: docSnap.id, ...docSnap.data() };\r\n      allVersions.push(row);\r\n      if (row.isCurrent) currentOnly.push(row);\r\n    });\r\n\r\n    setHistory(allVersions);\r\n    setRecords(currentOnly);\r\n\r\n    const originalMap = {};\r\n    currentOnly.forEach((r) => originalMap[r.id] = { ...r });\r\n    setOriginalRecords(originalMap);\r\n\r\n    toast.success(\"✅ Record updated (SCD Type 2)\");\r\n  } catch (error) {\r\n    toast.error(\"❌ Update failed: \" + error.message);\r\n  }\r\n};\r\n\r\n\r\nconst handleDelete = async (fleetNumberToDelete) => {\r\n  try {\r\n    const q = query(collection(db, \"fleet_records\"), where(\"fleetNumber\", \"==\", fleetNumberToDelete));\r\n    const snapshot = await getDocs(q);\r\n\r\n    if (snapshot.empty) {\r\n      alert(\"❌ No records found for this fleet number.\");\r\n      return;\r\n    }\r\n\r\n    const confirmDelete = window.confirm(`Delete ALL versions for fleet number ${fleetNumberToDelete}?`);\r\n    if (!confirmDelete) return;\r\n\r\n    const batchDeletes = snapshot.docs.map(docSnap => deleteDoc(doc(db, \"fleet_records\", docSnap.id)));\r\n    await Promise.all(batchDeletes);\r\n\r\n    // Remove from both tables\r\n    setRecords(prev => prev.filter(r => r.fleetNumber !== fleetNumberToDelete));\r\n    setHistory(prev => prev.filter(r => r.fleetNumber !== fleetNumberToDelete));\r\n\r\n    alert(`✅ All versions of Fleet Number ${fleetNumberToDelete} deleted.`);\r\n  } catch (error) {\r\n    alert(\"❌ Delete error: \" + error.message);\r\n  }\r\n};\r\n\r\n\r\n  if (!user) return <Auth />;\r\n\r\n  return (\r\n    \r\n<div style={{ maxWidth: \"100vw\", overflowX: \"hidden\", padding: \"40px 20px\" }}>\r\n  <div className=\"header\">\r\n  <h2>Fleet Billing Dashboard</h2>\r\n  <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n    <span className=\"user-email\">Welcome, {user.email}</span>\r\n    <img src=\"/logo.png\" alt=\"Logo\" style={{ height: \"50px\" }} />\r\n  </div>\r\n</div>\r\n\r\n\r\n\r\n      <button onClick={() => signOut(auth)}>Logout</button>\r\n      <hr />\r\n      <UploadForm />\r\n      <ManualEntryForm\r\n  onAddRow={(row, addToHistory) => {\r\n    setRecords([row]);\r\n    if (addToHistory) setHistory([row]);\r\n  }}\r\n/>\r\n\r\n\r\n      <hr />\r\n     <h4>Search Existing Records</h4>\r\n     <div className=\"search-bar\">\r\n<select value={searchField} onChange={(e) => {\r\n  setSearchField(e.target.value);\r\n  setSearchKey(\"\");\r\n  setStartDate(\"\");\r\n  setEndDate(\"\");\r\n}}>\r\n  <option value=\"fleetNumber\">Fleet Number</option>\r\n  <option value=\"Broker\">Broker</option>\r\n  <option value=\"Date\">Date</option>\r\n</select>\r\n\r\n{searchField === \"Date\" ? (\r\n  <>\r\n    <label style={{ marginLeft: 10 }}>From:</label>\r\n    <input type=\"date\" value={startDate} onChange={(e) => setStartDate(e.target.value)} />\r\n    <label style={{ marginLeft: 10 }}>To:</label>\r\n    <input type=\"date\" value={endDate} onChange={(e) => setEndDate(e.target.value)} />\r\n  </>\r\n) : (\r\n  <input\r\n    type=\"text\"\r\n    value={searchKey}\r\n    onChange={(e) => setSearchKey(e.target.value)}\r\n    placeholder=\"Search key\"\r\n    style={{ margin: \"0 10px\" }}\r\n  />\r\n)}\r\n\r\n<button onClick={handleSearch} style={{ marginLeft: 10 }} disabled={isSearching}>\r\n  {isSearching ? (\r\n    <>\r\n      Searching... <span className=\"loader-spinner\" />\r\n    </>\r\n  ) : (\r\n    \"Search\"\r\n  )}\r\n</button>\r\n\r\n</div>\r\n\r\n      <hr />\r\n      {searchField === \"fleetNumber\" && records.length > 0 && (\r\n      <>\r\n      <h4>Editable Current Records</h4>\r\n    <div className=\"table-scroll-x\">\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            {[\"Fleet Number\", ...Object.keys(labelToKey).filter(l => l !== \"Fleet Number\").sort()].map((label) => (\r\n              <th key={label}>{label}</th>\r\n            ))}\r\n            <th>Action</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {records.map((row, rowIndex) => {\r\n            const readOnly = [\"fleetNumber\", \"createdAt\", \"createdBy\", \"isCurrent\", \"updateDescription\"];\r\n            return (\r\n              <tr key={rowIndex}>\r\n                {[\"Fleet Number\", ...Object.keys(labelToKey).filter(l => l !== \"Fleet Number\").sort()].map((label) => {\r\n  const key = labelToKey[label];\r\n  return (\r\n    <td key={key}>\r\n      <input\r\n        type=\"text\"\r\n        value={\r\n          typeof row[key] === \"object\" && row[key]?.seconds\r\n            ? new Date(row[key].seconds * 1000).toLocaleString()\r\n            : String(row[key] ?? \"\")\r\n        }\r\n        onChange={(e) => {\r\n          const updated = [...records];\r\n          updated[rowIndex][key] = e.target.value;\r\n          setRecords(updated);\r\n        }}\r\n        readOnly={[\"fleetNumber\", \"createdAt\", \"createdBy\", \"isCurrent\",\"updateDescription\"].includes(key)}\r\n        style={{ width: \"120px\" }}\r\n      />\r\n    </td>\r\n  );\r\n})}\r\n\r\n                \r\n                <td>\r\n                 <button\r\n  className=\"save\"\r\n  disabled={!hasMeaningfulChanges(row, originalRecords[row.id])}\r\n  onClick={() => handleUpdate(row)}\r\n>\r\n  Save\r\n</button>\r\n\r\n<button\r\n  className=\"delete\"\r\n  onClick={() => handleDelete(row.fleetNumber)}\r\n>\r\n  Delete\r\n</button>\r\n\r\n\r\n                </td>\r\n              </tr>\r\n            );\r\n          })}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  </>\r\n)}\r\n\r\n      {history.length > 0 && (\r\n        <>\r\n          <hr />\r\n          <h4>🔍 Full Version History</h4>\r\n          <button onClick={handleExport} disabled={isExporting}>\r\n  📄 Export to Excel\r\n  {isExporting && <span className=\"loader-spinner\" />}\r\n</button>\r\n\r\n          <div className=\"table-scroll-x\">\r\n            <table>\r\n              <thead>\r\n                <tr>\r\n                  {[\"fleetNumber\", ...[...new Set(history.flatMap(Object.keys))]\r\n                      .filter(col => col !== \"fleetNumber\")\r\n                    .sort()].map((col) => (\r\n                    <th key={col}>{col}</th>\r\n                  ))}\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {[...history]\r\n                  .sort((a, b) => {\r\n                    if (a.isCurrent) return -1;\r\n                    if (b.isCurrent) return 1;\r\n                    const aTime = a.expiredAt?.seconds || 0;\r\n                    const bTime = b.expiredAt?.seconds || 0;\r\n                    return bTime - aTime;\r\n                  })\r\n                  .map((row, i) => (\r\n                    <tr key={i}>\r\n                      {[\"fleetNumber\", ...[...new Set(history.flatMap(Object.keys))]\r\n  .filter(col => col !== \"fleetNumber\")\r\n  .sort()].map((col, j) => (\r\n    <td key={j}>\r\n      {typeof row[col] === \"object\" && row[col]?.seconds\r\n        ? new Date(row[col].seconds * 1000).toLocaleString()\r\n        : String(row[col] ?? \"\")}\r\n    </td>\r\n))}\r\n\r\n                    </tr>\r\n                  ))}\r\n              </tbody>\r\n            </table>\r\n          </div>  \r\n        </>\r\n      )}\r\n      {records.length === 0 && history.length === 0 && (\r\n  <p style={{ textAlign: \"center\", color: \"#888\", marginTop: \"30px\" }}>\r\n    No records to display.\r\n  </p>\r\n)}\r\n      <ToastContainer position=\"bottom-right\" autoClose={3000} />\r\n      <p style={{ textAlign: \"center\", marginTop: \"30px\", color: \"#666\" }}>\r\n  © 2025 Fleet Billing System\r\n</p>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}