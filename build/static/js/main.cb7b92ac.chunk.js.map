{"version":3,"sources":["firebase.js","components/Auth.js","components/ManualEntryForm.js","components/UploadForm.js","App.js","reportWebVitals.js","index.js"],"names":["app","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","getAuth","db","getFirestore","styles","container","minHeight","background","display","justifyContent","alignItems","padding","card","width","maxWidth","borderRadius","boxShadow","textAlign","logo","margin","title","marginBottom","color","form","flexDirection","gap","input","border","fontSize","outline","submitBtn","backgroundColor","cursor","toggleBtn","marginTop","textDecoration","Auth","email","setEmail","useState","password","setPassword","isLogin","setIsLogin","loading","setLoading","React","createElement","style","src","alt","onSubmit","async","e","preventDefault","signInWithEmailAndPassword","alert","createUserWithEmailAndPassword","err","message","type","placeholder","value","onChange","target","required","disabled","onClick","fixedFieldsInitial","date","deliveryDate","months","origin","destination","customer","customerType","vehicleNo","vendor","salesRate","buyRate","customerFields","toBeAdvance","advanceReceived","advDeviation","advanceRecDate","validatedAdvanceUTRDescription","validatedAdvanceAmount","balance","processingCharges","inwardMisCharges","outwardMisCharges","balanceReceived","remainingBalance","balanceRecDate","validatedBalanceUTR","validatedBalanceUTRAmount","vendorFields","vendorOutwardPayment","paidAmount","balancePending","vendorRemark","podFields","podVendorDate","podSendToCustomerDate","docNo","podCustomerRec","today","balanceOverdueDays","toBeCollectedAmount","ManualEntryForm","_ref","onAddRow","fixedFields","setFixedFields","customerData","setCustomerData","vendorData","setVendorData","podData","setPodData","indentNumber","setIndentNumber","docId","setDocId","showCustomer","setShowCustomer","showVendor","setShowVendor","showPod","setShowPod","customerSaved","setCustomerSaved","vendorSaved","setVendorSaved","podSaved","setPodSaved","useEffect","storedIndentNo","localStorage","getItem","storedFixed","storedCustomer","storedVendor","storedPod","storedDocId","Number","JSON","parse","formatLabel","key","replace","str","toUpperCase","convertDateFields","data","allowedKeys","arguments","length","undefined","result","Object","entries","forEach","_ref2","includes","parsed","Date","isNaN","Timestamp","fromDate","handleFixedChange","updated","_objectSpread","[object Object]","name","setItem","stringify","handleSectionChange","section","saveSection","sectionName","sectionData","dateFields","docRef","doc","updateDoc","concat","confirmAlert","buttons","label","className","gridTemplateColumns","keys","map","toLowerCase","fontWeight","values","some","val","String","trim","user","currentUser","indentNo","counterRef","runTransaction","docSnap","transaction","get","exists","Error","current","nextFleetNo","update","getNextIndentNumber","enrichedData","createdAt","createdBy","isCurrent","versionDate","updateDescription","addDoc","collection","id","navigator","clipboard","writeText","Fragment","checked","marginLeft","isDate","getDoc","removeItem","handleNewRecord","dateFieldKeys","labelToKey","Placement Date","Delivery Date","Month","Origin","Destination","Customer","Customer Type","Vehicle Number","Vendor","Sales Rate","Buy Rate","Customer -> To be Advance (Sales)","Customer -> Advance / Payment Received","Customer -> Adv Deviation (as on Date)","Customer -> Advance Rec Date","Customer -> Validated-Advance UTR Description","Customer -> Validated UTR - Advance Amount","Customer -> Balance","Customer -> Processing Charges","Customer -> Inward-Mis Charges","Customer -> Outward-Mis Charges","Customer -> Bal Received","Customer -> Remaining Balance","Customer -> Balance Rec Date","Customer -> Validated-Balance UTR","Customer -> Validate Balance UTR-Amount","Vendor -> Outward Payment","Vendor -> Paid Amount","Vendor -> Balance Pending","Vendor -> Vendor Remark","POD -> POD Vendor-Date","POD -> POD-Send to Customer Date","POD -> Doc No","POD -> POD-Customer Rec","POD -> Today","POD -> Balance Overdue Days","POD -> To be Collected Amount","UploadForm","previewData","setPreviewData","statusMap","setStatusMap","fleetNumbers","setFleetNumbers","parseExcel","file","reader","FileReader","onload","workbook","XLSX","sheet","Sheets","SheetNames","raw","sheet_to_json","header","defval","blankrows","headers","rows","slice","row","obj","h","j","getMappedKey","readAsBinaryString","saveRow","i","fleetNo","getNextFleetNumber","parsedRow","match","parsedDate","dd","mm","yyyy","split","parseDDMMYYYY","placementDate","enriched","prev","accept","_e$target$files","files","setTimeout","generateTemplate","sampleRow","worksheet","json_to_sheet","book_new","book_append_sheet","resetTable","d","getTime","getTimezoneOffset","toISOString","_unused","handleEdit","filter","_","idx","s","f","deleteRow","finalColumnOrder","columnLabels","expiredAt","customerMaster.toBeAdvance","customerMaster.advanceReceived","customerMaster.advDeviation","customerMaster.advanceRecDate","customerMaster.validatedAdvanceUTRDescription","customerMaster.validatedAdvanceAmount","customerMaster.balance","customerMaster.processingCharges","customerMaster.inwardMisCharges","customerMaster.outwardMisCharges","customerMaster.balanceReceived","customerMaster.remainingBalance","customerMaster.balanceRecDate","customerMaster.validatedBalanceUTR","customerMaster.validatedBalanceUTRAmount","vendorMaster.vendorOutwardPayment","vendorMaster.paidAmount","vendorMaster.balancePending","vendorMaster.vendorRemark","podMaster.podVendorDate","podMaster.podSendToCustomerDate","podMaster.docNo","podMaster.podCustomerRec","podMaster.today","podMaster.balanceOverdueDays","podMaster.toBeCollectedAmount","flattenObject","prefix","fullKey","seconds","assign","App","setUser","authLoading","setAuthLoading","records","setRecords","history","setHistory","searchKey","setSearchKey","searchField","setSearchField","startDate","setStartDate","endDate","setEndDate","originalRecords","setOriginalRecords","isSearching","setIsSearching","isExporting","setIsExporting","searchAttempted","setSearchAttempted","activeOnly","setActiveOnly","includeCustomer","setIncludeCustomer","includeVendor","setIncludeVendor","includePOD","setIncludePOD","unsubscribe","onAuthStateChanged","handleSearch","fleetRef","q","toDate","toast","warn","query","where","snapshot","getDocs","allVersions","currentOnly","rawData","push","sort","a","b","empty","info","error","overflowX","height","signOut","addToHistory","flattened","Math","floor","reconstructed","flexWrap","flex","marginRight","col","rowIndex","_row$col2","_row$col","readOnly","updatedData","_objectWithoutProperties","_excluded","oldDoc","docs","find","oldData","cleanData","updateLog","_updatedData$key","_oldData$key","newVal","oldVal","join","flattenedOld","modifiedBy","newVersion","success","handleUpdate","fleetNumberToDelete","Promise","all","deleteDoc","r","handleDelete","handleExportToExcel","fixedCols","customerCols","vendorCols","podCols","selectedCols","exportData","flatRow","toLocaleDateString","toLocaleString","fileName","_a$expiredAt","_b$expiredAt","aTime","_row$col3","_row$col4","_row$col5","ToastContainer","position","autoClose","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.cb7b92ac.chunk.js","sourcesContent":["\r\n// // src/firebase.js\r\n\r\n// import { initializeApp } from \"firebase/app\";\r\n// import { getAuth } from \"firebase/auth\";\r\n// import { getFirestore } from \"firebase/firestore\";\r\n\r\n// // ✅ Your Firebase configuration\r\n// const firebaseConfig = {\r\n//   apiKey: \"AIzaSyCWw-I6mxAkJ1Q0Gt_wP1Bge-N0o-7MePU\",\r\n//   authDomain: \"sample-firebase-ai-app-c8afb.firebaseapp.com\",\r\n//   projectId: \"sample-firebase-ai-app-c8afb\",\r\n//   storageBucket: \"sample-firebase-ai-app-c8afb.appspot.com\", // 🔧 fixed from .app to .appspot.com\r\n//   messagingSenderId: \"221369775323\",\r\n//   appId: \"1:221369775323:web:c05d3eb4f88d1278d348fe\"\r\n// };\r\n\r\n// // ✅ Initialize Firebase app\r\n// const app = initializeApp(firebaseConfig);\r\n\r\n// // ✅ Export auth and firestore\r\n// export const auth = getAuth(app);\r\n// export const db = getFirestore(app);\r\n// src/firebase.js\r\n\r\nimport { initializeApp } from \"firebase/app\";\r\nimport { getAuth } from \"firebase/auth\";\r\nimport { getFirestore } from \"firebase/firestore\";\r\n\r\n// ✅ Your Firebase configuration (copied from Firebase Console)\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyAOcDXL1kQsi_MoLJ33GWn9-57qhQ0CWro\",\r\n  authDomain: \"fleet-9805b.firebaseapp.com\",\r\n  projectId: \"fleet-9805b\",\r\n  storageBucket: \"fleet-9805b.appspot.com\", // ✅ fixed: was \"firebasestorage.app\", should be \"appspot.com\"\r\n  messagingSenderId: \"682529821046\",\r\n  appId: \"1:682529821046:web:cbb00f5dcbac062304aa57\",\r\n  measurementId: \"G-T4PZQZGWZ9\"\r\n};\r\n\r\n// ✅ Initialize Firebase\r\nconst app = initializeApp(firebaseConfig);\r\n\r\n// ✅ Export Firebase services\r\nexport const auth = getAuth(app);\r\nexport const db = getFirestore(app);","import React, { useState } from \"react\";\r\nimport { auth } from \"../firebase\";\r\nimport {\r\n  createUserWithEmailAndPassword,\r\n  signInWithEmailAndPassword\r\n} from \"firebase/auth\";\r\n\r\nconst Auth = () => {\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [isLogin, setIsLogin] = useState(true);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    setLoading(true);\r\n    try {\r\n      if (isLogin) {\r\n        await signInWithEmailAndPassword(auth, email, password);\r\n        alert(\"✅ Login successful!\");\r\n      } else {\r\n        await createUserWithEmailAndPassword(auth, email, password);\r\n        alert(\"✅ Account created successfully!\");\r\n      }\r\n    } catch (err) {\r\n      alert(\"❌ \" + err.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div style={styles.container}>\r\n      <div style={styles.card}>\r\n        <img src=\"/logo.png\" alt=\"Logo\" style={styles.logo} />\r\n        <h2 style={styles.title}>{isLogin ? \"Login\" : \"Sign Up\"}</h2>\r\n        <form onSubmit={handleSubmit} style={styles.form}>\r\n          <input\r\n            type=\"email\"\r\n            placeholder=\"Email Address\"\r\n            value={email}\r\n            onChange={(e) => setEmail(e.target.value)}\r\n            required\r\n            style={styles.input}\r\n          />\r\n          <input\r\n            type=\"password\"\r\n            placeholder=\"Password\"\r\n            value={password}\r\n            onChange={(e) => setPassword(e.target.value)}\r\n            required\r\n            style={styles.input}\r\n          />\r\n          <button type=\"submit\" disabled={loading} style={styles.submitBtn}>\r\n            {loading ? \"Please wait...\" : isLogin ? \"Login\" : \"Sign Up\"}\r\n          </button>\r\n        </form>\r\n        <button onClick={() => setIsLogin(!isLogin)} style={styles.toggleBtn}>\r\n          {isLogin\r\n            ? \"New here? Create an account\"\r\n            : \"Already registered? Login\"}\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst styles = {\r\n  container: {\r\n    minHeight: \"100vh\",\r\n    background: \"linear-gradient(135deg, #1c2541, #3a506b)\",\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    padding: \"30px\"\r\n  },\r\n  card: {\r\n    width: \"100%\",\r\n    maxWidth: \"400px\",\r\n    background: \"#0b132b\",\r\n    padding: \"40px 30px\",\r\n    borderRadius: \"16px\",\r\n    boxShadow: \"0 0 25px rgba(0,0,0,0.3)\",\r\n    textAlign: \"center\"\r\n  },\r\n  logo: {\r\n    width: \"80%\",     // ✅ fit horizontally without overflowing\r\n    maxWidth: \"280px\",\r\n    margin: \"0 auto 20px\",\r\n    display: \"block\"\r\n  },\r\n  title: {\r\n    marginBottom: \"20px\",\r\n    color: \"#ffffff\"\r\n  },\r\n  form: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    gap: \"15px\"\r\n  },\r\n  input: {\r\n    padding: \"12px\",\r\n    borderRadius: \"8px\",\r\n    border: \"1px solid #ccc\",\r\n    fontSize: \"16px\",\r\n    outline: \"none\"\r\n  },\r\n  submitBtn: {\r\n    padding: \"12px\",\r\n    backgroundColor: \"#1c7ed6\",\r\n    color: \"#fff\",\r\n    border: \"none\",\r\n    borderRadius: \"8px\",\r\n    fontSize: \"16px\",\r\n    cursor: \"pointer\"\r\n  },\r\n  toggleBtn: {\r\n    marginTop: \"20px\",\r\n    background: \"none\",\r\n    border: \"none\",\r\n    color: \"#74c0fc\",\r\n    cursor: \"pointer\",\r\n    fontSize: \"14px\",\r\n    textDecoration: \"underline\"\r\n  }\r\n};\r\n\r\nexport default Auth;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  collection,\r\n  addDoc,\r\n  updateDoc,\r\n  doc,\r\n  runTransaction,\r\n  Timestamp,\r\n  getDoc\r\n} from \"firebase/firestore\";\r\nimport { db, auth } from \"../firebase\";\r\nimport 'react-confirm-alert/src/react-confirm-alert.css';\r\nimport { confirmAlert } from 'react-confirm-alert';\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst fixedFieldsInitial = {\r\n  date: \"\",\r\n  deliveryDate: \"\",\r\n  months: \"\",\r\n  origin: \"\",\r\n  destination: \"\",\r\n  customer: \"\",\r\n  customerType: \"\",\r\n  vehicleNo: \"\",\r\n  vendor: \"\",\r\n  salesRate: \"\",\r\n  buyRate: \"\"\r\n};\r\n\r\nconst customerFields = {\r\n  toBeAdvance: \"\",\r\n  advanceReceived: \"\",\r\n  advDeviation: \"\",\r\n  advanceRecDate: \"\",\r\n  validatedAdvanceUTRDescription: \"\",\r\n  validatedAdvanceAmount: \"\",\r\n  balance: \"\",\r\n  processingCharges: \"\",\r\n  inwardMisCharges: \"\",\r\n  outwardMisCharges: \"\",\r\n  balanceReceived: \"\",\r\n  remainingBalance: \"\",\r\n  balanceRecDate: \"\",\r\n  validatedBalanceUTR: \"\",\r\n  validatedBalanceUTRAmount: \"\"\r\n};\r\n\r\nconst vendorFields = {\r\n  vendorOutwardPayment: \"\",\r\n  paidAmount: \"\",\r\n  balancePending: \"\",\r\n  vendorRemark: \"\"\r\n};\r\n\r\nconst podFields = {\r\n  podVendorDate: \"\",\r\n  podSendToCustomerDate: \"\",\r\n  docNo: \"\",\r\n  podCustomerRec: \"\",\r\n  today: \"\",\r\n  balanceOverdueDays: \"\",\r\n  toBeCollectedAmount: \"\"\r\n};\r\nconst flattenObject = (obj, prefix = \"\") => {\r\n  let result = {};\r\n  for (const key in obj) {\r\n    const value = obj[key];\r\n    const fullKey = prefix ? `${prefix}.${key}` : key;\r\n    if (value && typeof value === \"object\" && !value.seconds) {\r\n      Object.assign(result, flattenObject(value, fullKey));\r\n    } else {\r\n      result[fullKey] = value;\r\n    }\r\n  }\r\n  return result;\r\n};\r\n\r\nconst ManualEntryForm = ({ onAddRow }) => {\r\n  const [fixedFields, setFixedFields] = useState(fixedFieldsInitial);\r\n  const [customerData, setCustomerData] = useState(customerFields);\r\n  const [vendorData, setVendorData] = useState(vendorFields);\r\n  const [podData, setPodData] = useState(podFields);\r\n  const [indentNumber, setIndentNumber] = useState(null);\r\n  const [docId, setDocId] = useState(null);\r\n\r\n  const [showCustomer, setShowCustomer] = useState(false);\r\n  const [showVendor, setShowVendor] = useState(false);\r\n  const [showPod, setShowPod] = useState(false);\r\n\r\n  const [customerSaved, setCustomerSaved] = useState(false);\r\n  const [vendorSaved, setVendorSaved] = useState(false);\r\n  const [podSaved, setPodSaved] = useState(false);\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    const storedIndentNo = localStorage.getItem(\"inProgressIndentNumber\");\r\n    const storedFixed = localStorage.getItem(\"fixedFields\");\r\n    const storedCustomer = localStorage.getItem(\"customerFields\");\r\n    const storedVendor = localStorage.getItem(\"vendorFields\");\r\n    const storedPod = localStorage.getItem(\"podFields\");\r\n    const storedDocId = localStorage.getItem(\"docId\");\r\n    \r\n    \r\n    if (storedDocId) setDocId(storedDocId);\r\n    if (storedIndentNo) setIndentNumber(Number(storedIndentNo));\r\n    if (storedFixed) setFixedFields(JSON.parse(storedFixed));\r\n    if (storedCustomer) setCustomerData(JSON.parse(storedCustomer));\r\n    if (storedVendor) setVendorData(JSON.parse(storedVendor));\r\n    if (storedPod) setPodData(JSON.parse(storedPod));\r\n  }, []);\r\n\r\n  const formatLabel = (key) => {\r\n  if (key === \"date\") return \"Placement Date\";\r\n  return key\r\n    .replace(/([a-z])([A-Z])/g, \"$1 $2\")\r\n    .replace(/_/g, \" \")\r\n    .replace(/^./, (str) => str.toUpperCase());\r\n};\r\n\r\n  const resetAll = () => {\r\n  setFixedFields(fixedFieldsInitial);\r\n  setCustomerData(customerFields);\r\n  setVendorData(vendorFields);\r\n  setPodData(podFields);\r\n  setIndentNumber(null);\r\n  setDocId(null);\r\n  setShowCustomer(false);\r\n  setShowVendor(false);\r\n  setShowPod(false);\r\n  setCustomerSaved(false);\r\n  setVendorSaved(false);\r\n  setPodSaved(false);\r\n\r\n  localStorage.removeItem(\"fixedFields\");\r\n  localStorage.removeItem(\"customerFields\");\r\n  localStorage.removeItem(\"vendorFields\");\r\n  localStorage.removeItem(\"podFields\");\r\n  localStorage.removeItem(\"inProgressIndentNumber\");\r\n  localStorage.removeItem(\"docId\");\r\n};\r\n\r\n  const convertDateFields = (data, allowedKeys = []) => {\r\n    const result = {};\r\n    Object.entries(data).forEach(([key, value]) => {\r\n      if (allowedKeys.includes(key) && value) {\r\n        const parsed = new Date(value);\r\n        result[key] = isNaN(parsed) ? value : Timestamp.fromDate(parsed);\r\n      } else {\r\n        result[key] = value;\r\n      }\r\n    });\r\n    return result;\r\n  };\r\n\r\n  const handleFixedChange = (e) => {\r\n  const updated = { ...fixedFields, [e.target.name]: e.target.value };\r\n  setFixedFields(updated);\r\n  localStorage.setItem(\"fixedFields\", JSON.stringify(updated));  // ✅ Save\r\n};\r\n\r\n\r\n  const handleSectionChange = (e, section) => {\r\n  const { name, value } = e.target;\r\n  if (section === \"customer\") {\r\n    const updated = { ...customerData, [name]: value };\r\n    setCustomerData(updated);\r\n    localStorage.setItem(\"customerFields\", JSON.stringify(updated));\r\n  }\r\n  if (section === \"vendor\") {\r\n    const updated = { ...vendorData, [name]: value };\r\n    setVendorData(updated);\r\n    localStorage.setItem(\"vendorFields\", JSON.stringify(updated));\r\n  }\r\n  if (section === \"pod\") {\r\n    const updated = { ...podData, [name]: value };\r\n    setPodData(updated);\r\n    localStorage.setItem(\"podFields\", JSON.stringify(updated));\r\n  }\r\n};\r\n\r\n\r\n  const getNextIndentNumber = async () => {\r\n  const counterRef = doc(db, \"Counters\", \"fleet_counter\");\r\n  const newIndentNo = await runTransaction(db, async (transaction) => {\r\n    const docSnap = await transaction.get(counterRef);\r\n    if (!docSnap.exists()) throw new Error(\"Counter doc missing\");\r\n    const current = docSnap.data().nextFleetNo || 1;\r\n    transaction.update(counterRef, { nextFleetNo: current + 1 });\r\n    return current;\r\n  });\r\n  return newIndentNo;\r\n};\r\n\r\n\r\n  const handleFixedSave = async () => {\r\n    const hasAnyValue = Object.values(fixedFields).some(\r\n  val => String(val ?? \"\").trim() !== \"\"\r\n);\r\n\r\nif (!hasAnyValue) {\r\n  confirmAlert({\r\n    title: 'Validation Error',\r\n    message: '⚠️ Please fill at least one field before continuing.',\r\n    buttons: [\r\n      {\r\n        label: 'OK'\r\n      }\r\n    ]\r\n  });\r\n  return;\r\n}\r\n\r\n\r\n    try {\r\n      const user = auth.currentUser;\r\n      const indentNo  = await getNextIndentNumber();\r\n      const enrichedData = {\r\n        indentNumber: indentNo,\r\n        ...convertDateFields(fixedFields, [\"date\",\"deliveryDate\"]),\r\n        createdAt: new Date(),\r\n        createdBy: user?.email || \"anonymous\",\r\n        isCurrent: true,\r\n        versionDate: new Date(),\r\n        updateDescription: \"\"\r\n      };\r\n\r\n      const docRef = await addDoc(collection(db, \"fleet_records\"), enrichedData);\r\n      setIndentNumber(indentNo);\r\n      setDocId(docRef.id);\r\n      localStorage.setItem(\"docId\", docRef.id);\r\n      localStorage.setItem(\"inProgressIndentNumber\", indentNo);\r\n      await navigator.clipboard.writeText(String(indentNo));\r\n      confirmAlert({\r\n  title: 'Success',\r\n  message: `✅ Fixed fields saved. Indent Number copied: ${indentNo}`,\r\n  buttons: [\r\n    { label: 'OK' }\r\n  ]\r\n});\r\n\r\n    } catch (err) {\r\n      confirmAlert({\r\n  title: 'Error',\r\n  message: \"❌ Error saving fixed fields: \" + err.message,\r\n  buttons: [{ label: 'OK' }]\r\n});\r\n\r\n    }\r\n  };\r\n\r\n  const saveSection = async (sectionName, sectionData, dateFields = []) => {\r\n    if (!docId) {\r\n  confirmAlert({\r\n    title: 'Missing Info',\r\n    message: '⚠️ Save fixed fields first.',\r\n    buttons: [{ label: 'OK' }]\r\n  });\r\n  return;\r\n}\r\n\r\n    try {\r\n      const docRef = doc(db, \"fleet_records\", docId);\r\n      await updateDoc(docRef, {\r\n        [`${sectionName}`]: convertDateFields(sectionData, dateFields)\r\n      });\r\n      if (sectionName === \"customerMaster\") setCustomerSaved(true);\r\n      if (sectionName === \"vendorMaster\") setVendorSaved(true);\r\n      if (sectionName === \"podMaster\") setPodSaved(true);\r\n      confirmAlert({\r\n  title: 'Saved',\r\n  message: `✅ ${sectionName} saved.`,\r\n  buttons: [{ label: 'OK' }]\r\n});\r\n\r\n    } catch (err) {\r\n      confirmAlert({\r\n  title: 'Error',\r\n  message: \"❌ Save error: \" + err.message,\r\n  buttons: [{ label: 'OK' }]\r\n});\r\n\r\n    }\r\n  };\r\n\r\n const handleFinalSubmit = async () => {\r\n  if (!docId) {\r\n  confirmAlert({\r\n    title: 'Error',\r\n    message: 'Fleet data not ready.',\r\n    buttons: [{ label: 'OK' }]\r\n  });\r\n  return;\r\n}\r\n\r\n\r\n  // Save any unsaved sections first\r\n  if (showCustomer && !customerSaved) {\r\n    await saveSection(\"customerMaster\", customerData, [\"advanceRecDate\", \"balanceRecDate\"]);\r\n  }\r\n  if (showVendor && !vendorSaved) {\r\n    await saveSection(\"vendorMaster\", vendorData);\r\n  }\r\n  if (showPod && !podSaved) {\r\n    await saveSection(\"podMaster\", podData, [\"podVendorDate\", \"podSendToCustomerDate\", \"podCustomerRec\", \"today\"]);\r\n  }\r\n\r\n  const docSnap = await getDoc(doc(db, \"fleet_records\", docId));\r\n  if (!docSnap.exists()) {\r\n  confirmAlert({\r\n    title: 'Error',\r\n    message: 'Data not found.',\r\n    buttons: [{ label: 'OK' }]\r\n  });\r\n  return;\r\n}\r\n\r\n  const data = { id: docSnap.id, ...docSnap.data() };\r\n  // onAddRow(JSON.parse(JSON.stringify(flattenObject(data))), true);\r\n  onAddRow(data, true);\r\n\r\n  localStorage.setItem(\"latestSearchField\", \"indentNumber\");\r\n  localStorage.setItem(\"latestSearchKey\", String(data.indentNumber));\r\n\r\n\r\n\r\n  // Reset all state\r\n  setFixedFields(fixedFieldsInitial);\r\n  setCustomerData(customerFields);\r\n  setVendorData(vendorFields);\r\n  setPodData(podFields);\r\n  setIndentNumber(null);\r\n  setDocId(null);\r\n  setShowCustomer(false);\r\n  setShowVendor(false);\r\n  setShowPod(false);\r\n  setCustomerSaved(false);\r\n  setVendorSaved(false);\r\n  setPodSaved(false);\r\n\r\n  localStorage.removeItem(\"fixedFields\");\r\n  localStorage.removeItem(\"customerFields\");\r\n  localStorage.removeItem(\"vendorFields\");\r\n  localStorage.removeItem(\"podFields\");\r\n  localStorage.removeItem(\"inProgressIndentNumber\");\r\n  localStorage.removeItem(\"docId\");\r\n\r\n\r\n\r\n  confirmAlert({\r\n  title: 'Done',\r\n  message: '✅ Record submitted and ready in editable table.',\r\n  buttons: [{ label: 'OK' }]\r\n});\r\n\r\n};\r\n\r\n\r\n\r\nconst handleNewRecord = () => {\r\n  confirmAlert({\r\n    title: 'Confirm New Entry',\r\n    message: 'Start a new entry? Unsaved data will be lost.',\r\n    buttons: [\r\n      {\r\n        label: 'Yes',\r\n        onClick: () => {\r\n          resetAll();\r\n          confirmAlert({\r\n            title: 'Ready',\r\n            message: '🆕 Ready to start a new record.',\r\n            buttons: [{ label: 'OK' }]\r\n          });\r\n        }\r\n      },\r\n      {\r\n        label: 'No'\r\n      }\r\n    ]\r\n  });\r\n};\r\n\r\n\r\n\r\n  return (\r\n    <div style={{ marginTop: 20 }}>\r\n      <h4>Step 1: Fixed Fields</h4>\r\n<div className=\"card p-4 mb-4\">\r\n  <div\r\n    className=\"fixed-fields-grid\"\r\n    style={{\r\n      display: \"grid\",\r\n      gridTemplateColumns: \"repeat(5, 1fr)\",\r\n      gap: \"16px\",\r\n    }}\r\n  >\r\n    {Object.keys(fixedFieldsInitial).map((key) => {\r\n      const isDate = key.toLowerCase().includes(\"date\");\r\n      const label =\r\n        isDate\r\n          ? `${key} (dd/mm/yyyy)`\r\n          : key === \"months\"\r\n          ? \"months (e.g. Jul-2025)\"\r\n          : key;\r\n\r\n      return (\r\n        <div key={key}>\r\n          <label className=\"form-label\" style={{ fontWeight: \"500\" }}>\r\n  {formatLabel(key)}\r\n</label>\r\n{(key === \"date\" || key === \"deliveryDate\") ? (\r\n  <input\r\n    type=\"date\"\r\n    name={key}\r\n    className=\"form-control\"\r\n    value={fixedFields[key]}\r\n    onChange={handleFixedChange}\r\n    disabled={!!indentNumber}\r\n  />\r\n) : (\r\n  <input\r\n    name={key}\r\n    className=\"form-control\"\r\n    placeholder=\"\"\r\n    value={fixedFields[key]}\r\n    onChange={handleFixedChange}\r\n    disabled={!!indentNumber}\r\n    type=\"text\"\r\n  />\r\n)}\r\n\r\n\r\n        </div>\r\n      );\r\n    })}\r\n  </div>\r\n\r\n  {!indentNumber && (\r\n  <div style={{ marginTop: \"20px\", width: \"100%\", textAlign: \"right\" }}>\r\n    <button className=\"btn btn-primary\" onClick={handleFixedSave}>\r\n      💾 Save & Continue\r\n    </button>\r\n  </div>\r\n)}\r\n\r\n \r\n\r\n</div>\r\n\r\n\r\n      {indentNumber  && (\r\n        <>\r\n          <p style={{ color: \"green\" }}>✅ Saved. Indent No: {indentNumber}</p>\r\n\r\n          <h4>Step 2: Select Master Sections</h4>\r\n          <label>\r\n            <input type=\"checkbox\" checked={showCustomer} onChange={() => setShowCustomer(!showCustomer)} disabled={customerSaved} /> Customer Master\r\n          </label>\r\n          <label style={{ marginLeft: 15 }}>\r\n            <input type=\"checkbox\" checked={showVendor} onChange={() => setShowVendor(!showVendor)} disabled={vendorSaved} /> Vendor Master\r\n          </label>\r\n          <label style={{ marginLeft: 15 }}>\r\n            <input type=\"checkbox\" checked={showPod} onChange={() => setShowPod(!showPod)} disabled={podSaved} /> POD Master\r\n          </label>\r\n\r\n          {showCustomer && (\r\n  <>\r\n    <h5>Customer Master</h5>\r\n    <div className=\"card p-3 mb-3\">\r\n      <div\r\n        style={{\r\n          display: \"grid\",\r\n          gridTemplateColumns: \"repeat(5, 1fr)\",\r\n          gap: \"16px\",\r\n        }}\r\n      >\r\n        {Object.keys(customerFields).map((key) => {\r\n          const isDate = [\"advanceRecDate\", \"balanceRecDate\"].includes(key);\r\n          const label = isDate ? `${key} (dd/mm/yyyy)` : key;\r\n          return (\r\n            <div key={key}>\r\n              <label className=\"form-label\" style={{ fontWeight: \"500\" }}>\r\n  {formatLabel(key)}\r\n</label>\r\n<input\r\n  name={key}\r\n  className=\"form-control\"\r\n  placeholder=\"\"\r\n  value={customerData[key]}\r\n  onChange={(e) => handleSectionChange(e, \"customer\")}\r\n  disabled={customerSaved}\r\n  type={isDate ? \"date\" : \"text\"}\r\n/>\r\n\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n      {!customerSaved && (\r\n  <div style={{ textAlign: \"right\", marginTop: \"16px\" }}>\r\n    <button\r\n      className=\"btn btn-primary\"\r\n      onClick={() => saveSection(\"customerMaster\", customerData, [\"advanceRecDate\", \"balanceRecDate\"])}\r\n    >\r\n      Save Customer\r\n    </button>\r\n  </div>\r\n)}\r\n\r\n    </div>\r\n  </>\r\n)}\r\n\r\n\r\n          {showVendor && (\r\n  <>\r\n    <h5>Vendor Master</h5>\r\n    <div className=\"card p-3 mb-3\">\r\n      <div\r\n        style={{\r\n          display: \"grid\",\r\n          gridTemplateColumns: \"repeat(5, 1fr)\",\r\n          gap: \"16px\",\r\n        }}\r\n      >\r\n        {Object.keys(vendorFields).map((key) => {\r\n          const label = key;\r\n          return (\r\n            <div key={key}>\r\n              <label className=\"form-label\" style={{ fontWeight: \"500\" }}>\r\n  {formatLabel(key)}\r\n</label>\r\n<input\r\n  name={key}\r\n  className=\"form-control\"\r\n  placeholder=\"\"\r\n                value={vendorData[key]}\r\n                onChange={(e) => handleSectionChange(e, \"vendor\")}\r\n                disabled={vendorSaved}\r\n                type=\"text\"\r\n              />\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n      {!vendorSaved && (\r\n        <div style={{ textAlign: \"right\", marginTop: \"16px\" }}>\r\n        <button className=\"btn btn-primary mt-3\" onClick={() => saveSection(\"vendorMaster\", vendorData)}>\r\n          Save Vendor\r\n        </button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  </>\r\n)}\r\n\r\n\r\n          {showPod && (\r\n  <>\r\n    <h5>POD Master</h5>\r\n    <div className=\"card p-3 mb-3\">\r\n      <div\r\n        style={{\r\n          display: \"grid\",\r\n          gridTemplateColumns: \"repeat(5, 1fr)\",\r\n          gap: \"16px\",\r\n        }}\r\n      >\r\n        {Object.keys(podFields).map((key) => {\r\n          const isDate = [\"podVendorDate\", \"podSendToCustomerDate\", \"podCustomerRec\", \"today\"].includes(key);\r\n          const label = isDate ? `${key} (dd/mm/yyyy)` : key;\r\n          return (\r\n            <div key={key}>\r\n              <label className=\"form-label\" style={{ fontWeight: \"500\" }}>\r\n  {formatLabel(key)}\r\n            </label>\r\n              <input\r\n                name={key}\r\n                className=\"form-control\"\r\n                placeholder=\"\"\r\n                value={podData[key]}\r\n                onChange={(e) => handleSectionChange(e, \"pod\")}\r\n                disabled={podSaved}\r\n                type={isDate ? \"date\" : \"text\"}\r\n              />\r\n\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n      {!podSaved && (\r\n        <div style={{ textAlign: \"right\", marginTop: \"16px\" }}>\r\n        <button className=\"btn btn-primary mt-3\" onClick={() => saveSection(\"podMaster\", podData, [\"podVendorDate\", \"podSendToCustomerDate\", \"podCustomerRec\", \"today\"])}>\r\n          Save POD\r\n        </button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  </>\r\n)}\r\n\r\n\r\n          <br />\r\n          <div style={{ marginTop: 10, width: \"100%\", textAlign: \"right\" }}>\r\n  <button onClick={handleFinalSubmit} className=\"btn btn-success me-2\">\r\n    ✅ Submit Record\r\n  </button>\r\n  <button onClick={handleNewRecord} className=\"btn btn-primary\">\r\n    ➕ Add New Record\r\n  </button>\r\n</div>\r\n\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ManualEntryForm;\r\n","import React, { useState } from \"react\";\r\nimport { addDoc, collection, doc, runTransaction } from \"firebase/firestore\";\r\nimport * as XLSX from \"xlsx\";\r\nimport { db, auth } from \"../firebase\";\r\n\r\nconst dateFieldKeys = [\r\n  \"placementDate\",\r\n  \"deliveryDate\",\r\n  \"customerMaster.advanceRecDate\",\r\n  \"customerMaster.balanceRecDate\",\r\n  \"podMaster.podVendorDate\",\r\n  \"podMaster.podSendToCustomerDate\",\r\n  \"podMaster.podCustomerRec\",\r\n  \"podMaster.today\"\r\n];\r\n\r\n\r\nconst labelToKey = {\r\n  \"Placement Date\": \"placementDate\",\r\n  \"Delivery Date\": \"deliveryDate\",\r\n  \"Month\": \"months\",\r\n  \"Origin\": \"origin\",\r\n  \"Destination\": \"destination\",\r\n  \"Customer\": \"customer\",\r\n  \"Customer Type\": \"customerType\",\r\n  \"Vehicle Number\": \"vehicleNo\",\r\n  \"Vendor\": \"vendor\",\r\n  \"Sales Rate\": \"salesRate\",\r\n  \"Buy Rate\": \"buyRate\",\r\n  // Customer Master\r\n  \"Customer -> To be Advance (Sales)\": \"customerMaster.toBeAdvance\",\r\n  \"Customer -> Advance / Payment Received\": \"customerMaster.advanceReceived\",\r\n  \"Customer -> Adv Deviation (as on Date)\": \"customerMaster.advDeviation\",\r\n  \"Customer -> Advance Rec Date\": \"customerMaster.advanceRecDate\",\r\n  \"Customer -> Validated-Advance UTR Description\": \"customerMaster.validatedAdvanceUTRDescription\",\r\n  \"Customer -> Validated UTR - Advance Amount\": \"customerMaster.validatedAdvanceAmount\",\r\n  \"Customer -> Balance\": \"customerMaster.balance\",\r\n  \"Customer -> Processing Charges\": \"customerMaster.processingCharges\",\r\n  \"Customer -> Inward-Mis Charges\": \"customerMaster.inwardMisCharges\",\r\n  \"Customer -> Outward-Mis Charges\": \"customerMaster.outwardMisCharges\",\r\n  \"Customer -> Bal Received\": \"customerMaster.balanceReceived\",\r\n  \"Customer -> Remaining Balance\": \"customerMaster.remainingBalance\",\r\n  \"Customer -> Balance Rec Date\": \"customerMaster.balanceRecDate\",\r\n  \"Customer -> Validated-Balance UTR\": \"customerMaster.validatedBalanceUTR\",\r\n  \"Customer -> Validate Balance UTR-Amount\": \"customerMaster.validatedBalanceUTRAmount\",\r\n  // Vendor Master\r\n  \"Vendor -> Outward Payment\": \"vendorMaster.vendorOutwardPayment\",\r\n  \"Vendor -> Paid Amount\": \"vendorMaster.paidAmount\",\r\n  \"Vendor -> Balance Pending\": \"vendorMaster.balancePending\",\r\n  \"Vendor -> Vendor Remark\": \"vendorMaster.vendorRemark\",\r\n  // POD Master\r\n  \"POD -> POD Vendor-Date\": \"podMaster.podVendorDate\",\r\n  \"POD -> POD-Send to Customer Date\": \"podMaster.podSendToCustomerDate\",\r\n  \"POD -> Doc No\": \"podMaster.docNo\",\r\n  \"POD -> POD-Customer Rec\": \"podMaster.podCustomerRec\",\r\n  \"POD -> Today\": \"podMaster.today\",\r\n  \"POD -> Balance Overdue Days\": \"podMaster.balanceOverdueDays\",\r\n  \"POD -> To be Collected Amount\": \"podMaster.toBeCollectedAmount\"\r\n};\r\n\r\nconst UploadForm = () => {\r\n  const [previewData, setPreviewData] = useState([]);\r\n  const [statusMap, setStatusMap] = useState({});\r\n  const [fleetNumbers, setFleetNumbers] = useState({});\r\n\r\n  const generateTemplate = () => {\r\n  const headers = Object.keys(labelToKey);\r\n  const sampleRow = {};\r\n  headers.forEach(header => {\r\n    const key = labelToKey[header];\r\n    if (dateFieldKeys.includes(key)) {\r\n      sampleRow[header] = \"01-01-2025\"; // DD-MM-YYYY\r\n    } else if (header.toLowerCase() === \"month\" || header.toLowerCase().includes(\"month\")) {\r\n      sampleRow[header] = \"July-2025\"; // Month format\r\n    } else if (header.toLowerCase().includes(\"rate\") || header.toLowerCase().includes(\"amount\")) {\r\n      sampleRow[header] = \"10000\";\r\n    } else if (header.toLowerCase().includes(\"number\") || header.toLowerCase().includes(\"no\")) {\r\n      sampleRow[header] = \"ABC123\";\r\n    } else {\r\n      sampleRow[header] = \"Sample\";\r\n    }\r\n  });\r\n\r\n  const worksheet = XLSX.utils.json_to_sheet([sampleRow]);\r\n  const workbook = XLSX.utils.book_new();\r\n  XLSX.utils.book_append_sheet(workbook, worksheet, \"Template\");\r\n  XLSX.writeFile(workbook, \"FleetUploadTemplate.xlsx\");\r\n};\r\n\r\n\r\n  const getMappedKey = (label) => labelToKey[label.trim()] || null;\r\n\r\n  const parseExcel = (file) => {\r\n    const reader = new FileReader();\r\n    reader.onload = (e) => {\r\n      const workbook = XLSX.read(e.target.result, { type: \"binary\" });\r\n      const sheet = workbook.Sheets[workbook.SheetNames[0]];\r\n      const raw = XLSX.utils.sheet_to_json(sheet, { header: 1, defval: \"\", blankrows: false });\r\n\r\n      const headers = raw[0];\r\n      const rows = raw.slice(1).map((row) => {\r\n        const obj = {};\r\n        headers.forEach((h, j) => {\r\n          const key = getMappedKey(h);\r\n          if (key) obj[key] = row[j];\r\n        });\r\n        return obj;\r\n      });\r\n\r\n      setPreviewData(rows);\r\n      setStatusMap({});\r\n      setFleetNumbers({});\r\n    };\r\n    reader.readAsBinaryString(file);\r\n  };\r\n\r\n  const getNextFleetNumber = async () => {\r\n    const counterRef = doc(db, \"Counters\", \"fleet_counter\");\r\n    const newFleetNo = await runTransaction(db, async (transaction) => {\r\n      const docSnap = await transaction.get(counterRef);\r\n      const current = docSnap.data().nextFleetNo || 1;\r\n      transaction.update(counterRef, { nextFleetNo: current + 1 });\r\n      return current;\r\n    });\r\n    return newFleetNo;\r\n  };\r\n  const parseDDMMYYYY = (str) => {\r\n  const [dd, mm, yyyy] = str.split(\"-\");\r\n  if (!dd || !mm || !yyyy) return null;\r\n  return new Date(Number(yyyy), Number(mm) - 1, Number(dd));  // Local timezone-safe\r\n};\r\n\r\n\r\n\r\n  const saveRow = async (row, i) => {\r\n  const user = auth.currentUser;\r\n  try {\r\n    const fleetNo = await getNextFleetNumber(); // This is your indentNumber now\r\n\r\n    const parsedRow = { ...row };\r\n    Object.keys(parsedRow).forEach((key) => {\r\n      if (typeof parsedRow[key] === \"string\" && parsedRow[key].match(/^\\d{2}-\\d{2}-\\d{4}$/)) {\r\n        const parsedDate = parseDDMMYYYY(parsedRow[key]);\r\n        if (parsedDate instanceof Date && !isNaN(parsedDate)) {\r\n          parsedRow[key] = parsedDate;\r\n        }\r\n      }\r\n    });\r\n    if (parsedRow.placementDate && !parsedRow.date) {\r\n  parsedRow.date = parsedRow.placementDate;\r\n}\r\n    const enriched = {\r\n      ...parsedRow,\r\n      indentNumber: fleetNo, // ✅ THIS FIXES IT\r\n      createdAt: new Date(),\r\n      createdBy: user?.email || \"anonymous\",\r\n      isCurrent: true,\r\n      versionDate: new Date(),\r\n    };\r\n\r\n    await addDoc(collection(db, \"fleet_records\"), enriched);\r\n    setStatusMap((prev) => ({ ...prev, [i]: \"✅ Saved\" }));\r\n    setFleetNumbers((prev) => ({ ...prev, [i]: fleetNo }));\r\n  } catch (err) {\r\n    setStatusMap((prev) => ({ ...prev, [i]: \"❌ Failed\" }));\r\n  }\r\n};\r\n\r\n\r\n\r\n  const saveAll = async () => {\r\n    for (let i = 0; i < previewData.length; i++) {\r\n      if (!statusMap[i]) await saveRow(previewData[i], i);\r\n    }\r\n  };\r\n\r\n  const handleEdit = (i, key, value) => {\r\n    const updated = [...previewData];\r\n    updated[i][key] = value;\r\n    setPreviewData(updated);\r\n  };\r\n\r\n  const deleteRow = (i) => {\r\n    setPreviewData(previewData.filter((_, idx) => idx !== i));\r\n    const s = { ...statusMap }; delete s[i];\r\n    const f = { ...fleetNumbers }; delete f[i];\r\n    setStatusMap(s);\r\n    setFleetNumbers(f);\r\n  };\r\n\r\n  const resetTable = () => {\r\n    setPreviewData([]);\r\n    setStatusMap({});\r\n    setFleetNumbers({});\r\n  };\r\n\r\n  return (\r\n    <div style={{ marginBottom: 40 }}>\r\n      <h4>Upload Excel & Preview</h4>\r\n      <div style={{ display: \"flex\", alignItems: \"center\", gap: \"10px\" }}>\r\n        <input\r\n          type=\"file\"\r\n          accept=\".xlsx, .xls\"\r\n          onChange={(e) => {\r\n            const file = e.target.files?.[0];\r\n            if (file) {\r\n              parseExcel(file);\r\n              setTimeout(() => { e.target.value = \"\"; }, 100);\r\n            }\r\n          }}\r\n        />\r\n        <button onClick={generateTemplate}>⬇️ Download Template</button>\r\n      </div>\r\n\r\n      {previewData.length > 0 && (\r\n        <>\r\n          <h5 style={{ marginTop: 20 }}>📄 Preview Table (Excel Upload)</h5>\r\n          <button onClick={saveAll}>💾 Save All</button>\r\n          <button onClick={resetTable} style={{ marginLeft: 10, color: \"red\" }}>🧹 Clear</button>\r\n          <div className=\"table-scroll-x\">\r\n            <table>\r\n              <thead>\r\n                <tr>\r\n                  <th>Fleet Number</th>\r\n                  {Object.keys(previewData[0]).map((key) => <th key={key}>{key}</th>)}\r\n                  <th>Status</th>\r\n                  <th>Action</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {previewData.map((row, i) => (\r\n                  <tr key={i}>\r\n                    <td>{fleetNumbers[i] || \"\"}</td>\r\n                    {Object.keys(row).map((key) => (\r\n                      <td key={key}>\r\n                        <input\r\n                            type={dateFieldKeys.includes(key) ? \"date\" : \"text\"}\r\n                            value={\r\n                              dateFieldKeys.includes(key) && row[key]\r\n                                ? (() => {\r\n                                    try {\r\n                                      const d = new Date(row[key]);\r\n                                      return isNaN(d.getTime()) ? \"\" : new Date(d.getTime() - d.getTimezoneOffset() * 60000).toISOString().split(\"T\")[0];\r\n\r\n                                    } catch {\r\n                                      return \"\";\r\n                                    }\r\n                                  })()\r\n                                : row[key]\r\n                            }\r\n                            onChange={(e) => handleEdit(i, key, e.target.value)}\r\n                            style={{ width: \"120px\" }}\r\n                          />\r\n\r\n                      </td>\r\n                    ))}\r\n                    <td>{statusMap[i] || \"⏳ Pending\"}</td>\r\n                    <td>\r\n                      <button onClick={() => saveRow(row, i)} disabled={statusMap[i] === \"✅ Saved\"}>Save</button>\r\n                      <button onClick={() => deleteRow(i)} style={{ marginLeft: 6, color: \"red\" }}>Delete</button>\r\n                    </td>\r\n                  </tr>\r\n                ))}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UploadForm;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { onAuthStateChanged, signOut } from \"firebase/auth\";\r\nimport {\r\n  collection,\r\n  query,\r\n  where,\r\n  getDocs,\r\n  getDoc,\r\n  updateDoc,\r\n  deleteDoc,\r\n  doc,\r\n  addDoc,\r\n} from \"firebase/firestore\";\r\nimport { auth, db } from \"./firebase\";\r\nimport Auth from \"./components/Auth\";\r\nimport ManualEntryForm from \"./components/ManualEntryForm\";\r\nimport UploadForm from \"./components/UploadForm\";\r\nimport \"./App.css\";\r\nimport { toast, ToastContainer } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport * as XLSX from \"xlsx\";\r\nimport { confirmAlert } from 'react-confirm-alert';\r\nimport 'react-confirm-alert/src/react-confirm-alert.css';\r\n\r\nconst dateFieldKeys = [\r\n  \"date\", \"deliveryDate\",\"createdAt\", \"versionDate\", \"expiredAt\", \"customerMaster.advanceRecDate\", \"customerMaster.balanceRecDate\",\r\n  \"customerMaster.advDeviation\", \"customerMaster.validatedAdvanceUTRDescription\",\r\n  \"customerMaster.validatedAdvanceAmount\", \"customerMaster.validatedBalanceUTR\",\r\n  \"customerMaster.validatedBalanceUTRAmount\",\r\n  \"podMaster.podVendorDate\", \"podMaster.podSendToCustomerDate\", \"podMaster.podCustomerRec\", \"podMaster.today\"\r\n];\r\n\r\n\r\nconst finalColumnOrder = [\r\n  \"indentNumber\", \"date\",\"deliveryDate\", \"months\", \"origin\", \"destination\", \"customer\", \"customerType\",\r\n  \"vehicleNo\", \"vendor\", \"salesRate\", \"buyRate\", \"createdAt\", \"createdBy\", \"versionDate\",\r\n  \"isCurrent\", \"updateDescription\", \"expiredAt\",\r\n  // Customer Master\r\n  \"customerMaster.toBeAdvance\", \"customerMaster.advanceReceived\", \"customerMaster.advDeviation\",\r\n  \"customerMaster.advanceRecDate\", \"customerMaster.validatedAdvanceUTRDescription\",\r\n  \"customerMaster.validatedAdvanceAmount\", \"customerMaster.balance\", \"customerMaster.processingCharges\",\r\n  \"customerMaster.inwardMisCharges\", \"customerMaster.outwardMisCharges\", \"customerMaster.balanceReceived\",\r\n  \"customerMaster.remainingBalance\", \"customerMaster.balanceRecDate\", \"customerMaster.validatedBalanceUTR\",\r\n  \"customerMaster.validatedBalanceUTRAmount\",\r\n  // Vendor Master\r\n  \"vendorMaster.vendorOutwardPayment\", \"vendorMaster.paidAmount\", \"vendorMaster.balancePending\",\r\n  \"vendorMaster.vendorRemark\",\r\n  // POD Master\r\n  \"podMaster.podVendorDate\", \"podMaster.podSendToCustomerDate\", \"podMaster.docNo\",\r\n  \"podMaster.podCustomerRec\", \"podMaster.today\", \"podMaster.balanceOverdueDays\",\r\n  \"podMaster.toBeCollectedAmount\"\r\n];\r\n\r\nconst columnLabels = {\r\n  indentNumber: \"Indent Number\",\r\n  date: \"Placement Date\",\r\n  deliveryDate: \"Delivery Date\",\r\n  months: \"Month\",\r\n  origin: \"Origin\",\r\n  destination: \"Destination\",\r\n  customer: \"Customer\",\r\n  customerType: \"Customer Type\",\r\n  vehicleNo: \"Vehicle Number\",\r\n  vendor: \"Vendor\",\r\n  salesRate: \"Sales Rate\",\r\n  buyRate: \"Buy Rate\",\r\n  createdAt: \"Created At\",\r\n  createdBy: \"Created By\",\r\n  versionDate: \"Version Date\",\r\n  isCurrent: \"Is Current\",\r\n  updateDescription: \"Update Description\",\r\n  expiredAt: \"Expired At\",\r\n\r\n  // Customer Master\r\n  \"customerMaster.toBeAdvance\": \"Customer Master -> To be Advance (Sales)\",\r\n  \"customerMaster.advanceReceived\": \"Customer Master -> Advance / Payment Received\",\r\n  \"customerMaster.advDeviation\": \"Customer Master -> Adv Deviation (as on Date)\",\r\n  \"customerMaster.advanceRecDate\": \"Customer Master -> Advance Rec Date\",\r\n  \"customerMaster.validatedAdvanceUTRDescription\": \"Customer Master -> Validated-Advance UTR Description\",\r\n  \"customerMaster.validatedAdvanceAmount\": \"Customer Master -> Validated UTR - Advance Amount\",\r\n  \"customerMaster.balance\": \"Customer Master -> Balance\",\r\n  \"customerMaster.processingCharges\": \"Customer Master -> Processing Charges\",\r\n  \"customerMaster.inwardMisCharges\": \"Customer Master -> Inward-Mis Charges\",\r\n  \"customerMaster.outwardMisCharges\": \"Customer Master -> Outward-Mis Charges\",\r\n  \"customerMaster.balanceReceived\": \"Customer Master -> Bal Received\",\r\n  \"customerMaster.remainingBalance\": \"Customer Master -> Remaining Balance\",\r\n  \"customerMaster.balanceRecDate\": \"Customer Master -> Balance Rec Date\",\r\n  \"customerMaster.validatedBalanceUTR\": \"Customer Master -> Validated-Balance UTR\",\r\n  \"customerMaster.validatedBalanceUTRAmount\": \"Customer Master -> Validate Balance UTR-Amount\",\r\n\r\n  // Vendor Master\r\n  \"vendorMaster.vendorOutwardPayment\": \"Vendor Master -> Outward Payment\",\r\n  \"vendorMaster.paidAmount\": \"Vendor Master -> Paid Amount\",\r\n  \"vendorMaster.balancePending\": \"Vendor Master -> Balance Pending\",\r\n  \"vendorMaster.vendorRemark\": \"Vendor Master -> Vendor Remark\",\r\n\r\n  // POD Master\r\n  \"podMaster.podVendorDate\": \"POD Master -> POD Vendor-Date\",\r\n  \"podMaster.podSendToCustomerDate\": \"POD Master -> POD-Send to Customer Date\",\r\n  \"podMaster.docNo\": \"POD Master -> Doc No\",\r\n  \"podMaster.podCustomerRec\": \"POD Master -> POD-Customer Rec\",\r\n  \"podMaster.today\": \"POD Master -> Today\",\r\n  \"podMaster.balanceOverdueDays\": \"POD Master -> Balance Overdue Days\",\r\n  \"podMaster.toBeCollectedAmount\": \"POD Master -> To be Collected Amount\"\r\n};\r\n\r\n\r\nconst flattenObject = (obj, prefix = \"\") => {\r\n  let result = {};\r\n  for (const key in obj) {\r\n    const value = obj[key];\r\n    const fullKey = prefix ? `${prefix}.${key}` : key;\r\n    if (value && typeof value === \"object\" && !value.seconds) {\r\n      Object.assign(result, flattenObject(value, fullKey));\r\n    } else {\r\n      result[fullKey] = value;\r\n    }\r\n  }\r\n  return result;\r\n};\r\n\r\n\r\nfunction App() {\r\n  const [user, setUser] = useState(null);\r\n  const [authLoading, setAuthLoading] = useState(true);\r\n  const [records, setRecords] = useState([]);\r\n  const [history, setHistory] = useState([]);\r\n  const [searchKey, setSearchKey] = useState(\"\");\r\n  const [searchField, setSearchField] = useState(\"indentNumber\");\r\n  const [startDate, setStartDate] = useState(\"\");\r\n  const [endDate, setEndDate] = useState(\"\");\r\n  const [originalRecords, setOriginalRecords] = useState({});\r\n  const [isSearching, setIsSearching] = useState(false);\r\n  const [isExporting, setIsExporting] = useState(false);\r\n  const [searchAttempted, setSearchAttempted] = useState(false);\r\n  const [activeOnly, setActiveOnly] = useState(false);\r\n  const [includeCustomer, setIncludeCustomer] = useState(false);\r\n  const [includeVendor, setIncludeVendor] = useState(false);\r\n  const [includePOD, setIncludePOD] = useState(false);\r\n\r\n\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    const unsubscribe = onAuthStateChanged(auth, (currentUser) => {\r\n      setUser(currentUser);\r\n      setAuthLoading(false);\r\n    });\r\n    return () => unsubscribe();\r\n  }, []);\r\n\r\n  const handleExportToExcel = () => {\r\n  if (history.length === 0) {\r\n    toast.info(\"❌ No history data to export.\");\r\n    return;\r\n  }\r\n\r\n  // Define columns to include\r\n  const fixedCols = finalColumnOrder.slice(0, 17); // First 17 are fixed\r\n  const customerCols = finalColumnOrder.slice(17, 32);\r\n  const vendorCols = finalColumnOrder.slice(32, 36);\r\n  const podCols = finalColumnOrder.slice(36);\r\n\r\n  const selectedCols = [\r\n    ...fixedCols,\r\n    ...(includeCustomer ? customerCols : []),\r\n    ...(includeVendor ? vendorCols : []),\r\n    ...(includePOD ? podCols : [])\r\n  ];\r\n\r\n  const exportData = history.map((row) => {\r\n    const flatRow = {};\r\n    selectedCols.forEach((col) => {\r\n      const val = row[col];\r\n      flatRow[col] = dateFieldKeys.includes(col) && val?.seconds\r\n  ? new Date(val.seconds * 1000).toLocaleDateString(\"en-GB\")\r\n  : val?.seconds\r\n    ? new Date(val.seconds * 1000).toLocaleString()\r\n    : val ?? \"\";\r\n    });\r\n    return flatRow;\r\n  });\r\n\r\n  const worksheet = XLSX.utils.json_to_sheet(exportData);\r\n  const workbook = XLSX.utils.book_new();\r\n  XLSX.utils.book_append_sheet(workbook, worksheet, \"Filtered Export\");\r\n\r\n  const fileName = `FilteredExport_${new Date().toISOString().split(\"T\")[0]}.xlsx`;\r\n  XLSX.writeFile(workbook, fileName);\r\n};\r\n\r\n\r\n  const handleSearch = async () => {\r\n    setIsSearching(true);\r\n    try {\r\n      const fleetRef = collection(db, \"fleet_records\");\r\n      let q;\r\n\r\n          if (searchField === \"Date\") {\r\n  const fromDate = new Date(startDate);\r\n  const toDate = new Date(endDate + \"T23:59:59\");\r\n\r\n  if (fromDate > toDate) {\r\n    toast.warn(\"⚠️ 'From' date cannot be after 'To' date.\");\r\n    setIsSearching(false);\r\n    return;\r\n  }\r\n\r\n  q = query(\r\n    fleetRef,\r\n    ...(activeOnly ? [where(\"isCurrent\", \"==\", true)] : []),\r\n    where(\"createdAt\", \">=\", fromDate),\r\n    where(\"createdAt\", \"<=\", toDate)\r\n  );\r\n}\r\n else if (searchKey) {\r\n  const key = searchField === \"indentNumber\" ? Number(searchKey) : searchKey;\r\n  q = query(\r\n    fleetRef,\r\n    where(searchField, \"==\", key),\r\n    ...(activeOnly ? [where(\"isCurrent\", \"==\", true)] : [])\r\n  );\r\n}\r\n\r\n else {\r\n        toast.warn(\"🔍 Please enter a search value.\");\r\n        setIsSearching(false);\r\n        return;\r\n      }\r\n\r\n      setSearchAttempted(true);\r\n      const snapshot = await getDocs(q);\r\n      const allVersions = [];\r\n      const currentOnly = [];\r\n\r\n      snapshot.forEach((docSnap) => {\r\n        const rawData = { id: docSnap.id, ...docSnap.data() };\r\n        const row = flattenObject(rawData);\r\n\r\n        allVersions.push(row);\r\n        if (row.isCurrent) currentOnly.push(row);\r\n      });\r\n      allVersions.sort((a, b) => {\r\n  if (a.isCurrent && !b.isCurrent) return -1;\r\n  if (!a.isCurrent && b.isCurrent) return 1;\r\n  return b.indentNumber - a.indentNumber;\r\n});\r\n\r\n// ✅ Sort currentOnly also by indentNumber descending\r\ncurrentOnly.sort((a, b) => b.indentNumber - a.indentNumber);\r\n\r\n      if (searchField === \"indentNumber\") {\r\n        setRecords(currentOnly);\r\n        setHistory(allVersions.map(row => JSON.parse(JSON.stringify(row))));\r\n      } else {\r\n        setRecords([]);\r\n        setHistory(allVersions.map(row => JSON.parse(JSON.stringify(row))));\r\n      }\r\n\r\n      if (snapshot.empty || allVersions.length === 0) {\r\n        toast.info(\"❌ No records found.\");\r\n      }\r\n    } catch (error) {\r\n  toast.error(\"❌ Search failed: \" + error.message);\r\n\r\n    } finally {\r\n      setIsSearching(false);\r\n    }\r\n  };\r\n\r\n    const normalize = (val) => {\r\n  if (!val) return \"\";\r\n\r\n  // Convert Firestore Timestamp → JS Date\r\n  if (typeof val === \"object\" && val?.seconds) {\r\n    return new Date(val.seconds * 1000).toISOString().split(\"T\")[0]; // YYYY-MM-DD\r\n  }\r\n\r\n  // Convert JS Date object\r\n  if (val instanceof Date) {\r\n    return val.toISOString().split(\"T\")[0];\r\n  }\r\n\r\n  return String(val).trim();\r\n};\r\n\r\n\r\n\r\n const getChangedFields = (current, original) => {\r\n  const ignored = [\"versionDate\", \"expiredAt\", \"isCurrent\", \"updateDescription\", \"createdAt\", \"createdBy\"];\r\n  const changed = [];\r\n\r\n  const flatCurrent = flattenObject(current);\r\n  const flatOriginal = flattenObject(original);\r\n\r\n  for (const key in flatCurrent) {\r\n    if (ignored.includes(key)) continue;\r\n    const currVal = normalize(flatCurrent[key]);\r\n    const origVal = normalize(flatOriginal?.[key]);\r\n    if (currVal !== origVal) changed.push(key);\r\n  }\r\n\r\n  return changed;\r\n};\r\n\r\n\r\n  const hasMeaningfulChanges = (curr, orig) => getChangedFields(curr, orig).length > 0;\r\n\r\n\r\n    const handleUpdate = async (row) => {\r\n    try {\r\n      const { id, indentNumber, ...updatedData } = row;\r\n\r\n      const currentDocSnap = await getDocs(\r\n        query(collection(db, \"fleet_records\"), where(\"indentNumber\", \"==\", indentNumber), where(\"isCurrent\", \"==\", true))\r\n      );\r\n      const oldDoc = currentDocSnap.docs.find(doc => doc.id === id);\r\n      const oldData = flattenObject(oldDoc?.data() || {});\r\n\r\n\r\n      const cleanData = {};\r\n      const updateLog = [];\r\n      for (const key in updatedData) {\r\n        if ([\"id\", \"isCurrent\", \"createdAt\", \"createdBy\", \"versionDate\", \"updateDescription\", \"expiredAt\"].includes(key))\r\n          continue;\r\n        const newVal = updatedData[key] ?? \"\";\r\n        const oldVal = oldData[key] ?? \"\";\r\n        cleanData[key] = newVal;\r\n\r\n        if (String(newVal).trim() !== String(oldVal).trim()) {\r\n          updateLog.push(`Updated ${key}`);\r\n        }\r\n      }\r\n\r\n      if (updateLog.length === 0) {\r\n        toast.info(\"ℹ️ No changes to update.\");\r\n        return;\r\n      }\r\n\r\n      confirmAlert({\r\n  title: 'Confirm Update',\r\n  message: `Do you want to update changes: ${updateLog.join(\", \")}?`,\r\n  buttons: [\r\n    {\r\n      label: 'Yes',\r\n      onClick: async () => {\r\n        const flattenedOld = flattenObject(oldDoc.data());\r\n\r\n        await updateDoc(doc(db, \"fleet_records\", id), {\r\n          ...flattenedOld,\r\n          isCurrent: false,\r\n          expiredAt: new Date(),\r\n          modifiedBy: user.email\r\n        });\r\n\r\n        const newVersion = {\r\n          ...cleanData,\r\n          indentNumber,\r\n          createdAt: new Date(),\r\n          createdBy: user.email,\r\n          isCurrent: true,\r\n          versionDate: new Date(),\r\n          updateDescription: updateLog.join(\", \")\r\n        };\r\n\r\n        await addDoc(collection(db, \"fleet_records\"), newVersion);\r\n        setSearchField(\"indentNumber\");\r\n        setSearchKey(String(indentNumber));\r\n        setSearchAttempted(true);\r\n        setActiveOnly(false); \r\n        toast.success(\"✅ Record updated.\");\r\n\r\n        setTimeout(() => {\r\n          handleSearch();\r\n        }, 500);\r\n      }\r\n    },\r\n    {\r\n      label: 'No'\r\n    }\r\n  ]\r\n});\r\n\r\n\r\n\r\n\r\nreturn;\r\n\r\n\r\n      await updateDoc(doc(db, \"fleet_records\", id), {\r\n        ...oldDoc.data(),\r\n        isCurrent: false,\r\n        expiredAt: new Date(),\r\n        modifiedBy: user.email\r\n      });\r\n\r\n\r\n      const newVersion = {\r\n        ...cleanData,\r\n        indentNumber,\r\n        createdAt: new Date(),\r\n        createdBy: user.email,\r\n        isCurrent: true,\r\n        versionDate: new Date(),\r\n        updateDescription: updateLog.join(\", \")\r\n      };\r\n\r\n      await addDoc(collection(db, \"fleet_records\"), newVersion);\r\n\r\n      toast.success(\"✅ Record updated.\");\r\n      handleSearch();\r\n    } catch (error) {\r\n      toast.error(\"❌ Update failed: \" + error.message);\r\n    }\r\n  };\r\n\r\n  const handleDelete = async (fleetNumberToDelete) => {\r\n    try {\r\n      const q = query(collection(db, \"fleet_records\"), where(\"indentNumber\", \"==\", fleetNumberToDelete));\r\n      const snapshot = await getDocs(q);\r\n      if (snapshot.empty) {\r\n  toast.error(\"❌ No records found for deletion.\");\r\n  return;\r\n}\r\n\r\n\r\n      confirmAlert({\r\n  title: 'Confirm Deletion',\r\n  message: `Delete all versions of Indent No. ${fleetNumberToDelete}?`,\r\n  buttons: [\r\n    {\r\n      label: 'Yes',\r\n      onClick: async () => {\r\n        await Promise.all(snapshot.docs.map(docSnap => deleteDoc(doc(db, \"fleet_records\", docSnap.id))));\r\n        setRecords(prev => prev.filter(r => r.indentNumber !== fleetNumberToDelete));\r\n        setHistory(prev => prev.filter(r => r.indentNumber !== fleetNumberToDelete));\r\n        toast.success(\"✅ Deleted all versions.\");\r\n      }\r\n    },\r\n    {\r\n      label: 'No'\r\n    }\r\n  ]\r\n});\r\nreturn;\r\n\r\n\r\n      await Promise.all(snapshot.docs.map(docSnap => deleteDoc(doc(db, \"fleet_records\", docSnap.id))));\r\n      setRecords(prev => prev.filter(r => r.indentNumber !== fleetNumberToDelete));\r\n      setHistory(prev => prev.filter(r => r.indentNumber !== fleetNumberToDelete));\r\n      toast.success(\"✅ Deleted all versions.\");\r\n    } catch (err) {\r\n      toast.error(\"❌ Delete failed: \" + err.message);\r\n    }\r\n  };\r\n  if (authLoading) return <p style={{ textAlign: \"center\" }}>Checking authentication...</p>;\r\nif (!user) return <Auth />;\r\n\r\n\r\n  return (\r\n    <div style={{ maxWidth: \"100vw\", overflowX: \"hidden\", padding: \"40px 20px\" }}>\r\n      <div className=\"header\">\r\n        <h2>Fleet Billing Dashboard</h2>\r\n        <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n          <span className=\"user-email\">Welcome, {user.email}</span>\r\n          <img src=\"/logo.png\" alt=\"Logo\" style={{ height: \"50px\" }} />\r\n        </div>\r\n      </div>\r\n\r\n      <button\r\n  onClick={() => {\r\n    // ✅ Clear localStorage before logout\r\n    localStorage.removeItem(\"inProgressFleetNumber\");\r\n    localStorage.removeItem(\"docId\");\r\n    localStorage.removeItem(\"fixedFields\");\r\n    localStorage.removeItem(\"customerFields\");\r\n    localStorage.removeItem(\"vendorFields\");\r\n    localStorage.removeItem(\"podFields\");\r\n\r\n    signOut(auth);\r\n  }}\r\n>\r\n  Logout\r\n</button>\r\n\r\n      <hr />\r\n\r\n      <UploadForm />\r\n\r\n\r\n\r\n    <ManualEntryForm\r\n  onAddRow={(row, addToHistory) => {\r\n    // Flatten row so nested fields like customerMaster.x are handled\r\n    const flattened = flattenObject(row);\r\n\r\n    // Normalize all date fields in the flattened version\r\n    dateFieldKeys.forEach(key => {\r\n      const val = flattened[key];\r\n      if (val instanceof Date && !isNaN(val)) {\r\n        flattened[key] = { seconds: Math.floor(val.getTime() / 1000) };\r\n      } else if (!val || typeof val !== \"object\" || !val.seconds) {\r\n        flattened[key] = null;\r\n      }\r\n    });\r\n\r\n    // ✅ Store transformed record in all 3 locations\r\n    const reconstructed = { ...row };\r\n    dateFieldKeys.forEach(key => {\r\n      reconstructed[key] = flattened[key]; // Ensure date field consistency\r\n    });\r\n\r\n    setRecords([reconstructed]);\r\n    if (addToHistory) setHistory([JSON.parse(JSON.stringify(reconstructed))]);\r\n    setOriginalRecords({ [row.indentNumber]: JSON.parse(JSON.stringify(reconstructed)) });\r\n\r\n    setSearchField(\"indentNumber\");\r\n    setSearchKey(String(row.indentNumber));\r\n    setSearchAttempted(true);\r\n    setActiveOnly(false);\r\n  }}\r\n/>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n      <hr />\r\n      <h4>Search Existing Records</h4>\r\n<div style={{ display: \"flex\", flexWrap: \"wrap\", gap: \"10px\", alignItems: \"center\", justifyContent: \"space-between\", width: \"100%\" }}>\r\n  <div style={{ display: \"flex\", gap: \"10px\", flexWrap: \"wrap\", alignItems: \"center\" }}>\r\n    <select value={searchField} onChange={(e) => {\r\n      setSearchField(e.target.value);\r\n      setSearchKey(\"\");\r\n      setStartDate(\"\");\r\n      setEndDate(\"\");\r\n    }}>\r\n      <option value=\"indentNumber\">Indent Number</option>\r\n      <option value=\"Broker\">Broker</option>\r\n      <option value=\"Date\">Date</option>\r\n    </select>\r\n\r\n    {searchField === \"Date\" ? (\r\n      <>\r\n        <label>From:</label>\r\n        <input type=\"date\" value={startDate} onChange={(e) => setStartDate(e.target.value)} />\r\n        <label>To:</label>\r\n        <input type=\"date\" value={endDate} onChange={(e) => setEndDate(e.target.value)} />\r\n      </>\r\n    ) : (\r\n      <input\r\n        type=\"text\"\r\n        value={searchKey}\r\n        onChange={(e) => setSearchKey(e.target.value)}\r\n        placeholder=\"Search key\"\r\n        style={{ flex: 1, width: \"250px\" }}\r\n      />\r\n    )}\r\n\r\n    <div style={{ display: \"flex\", alignItems: \"center\", gap: \"10px\" }}>\r\n    <label style={{  display: \"flex\", alignItems: \"center\", fontSize: \"14px\", marginBottom: 0 }}>\r\n      <input\r\n        type=\"checkbox\"\r\n        checked={activeOnly}\r\n        onChange={(e) => setActiveOnly(e.target.checked)}\r\n        style={{ marginRight: \"5px\" }}\r\n      />\r\n      Show only active\r\n    </label>\r\n  </div>\r\n\r\n  <button className=\"btn btn-primary\" onClick={handleSearch} disabled={isSearching}>\r\n    {isSearching ? \"Searching...\" : \"Search\"}\r\n  </button>\r\n</div></div>\r\n\r\n<hr />\r\n\r\n\r\n\r\n      {searchField === \"indentNumber\" && records.length > 0 && (\r\n        <>\r\n          <h4>Editable Current Records</h4>\r\n          <div className=\"table-scroll-x\">\r\n            <table>\r\n              <thead>\r\n                <tr>\r\n                  {finalColumnOrder.map((col) => (\r\n                    <th key={col}>{columnLabels[col] || col}</th>\r\n                  ))}\r\n                  <th>Action</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {records.map((row, rowIndex) => (\r\n                  <tr key={rowIndex}>\r\n                    {finalColumnOrder.map((col, j) => (\r\n                      <td key={j}>\r\n                        <input\r\n                        type={dateFieldKeys.includes(col) ? \"date\" : \"text\"}\r\n                        value={\r\n                          dateFieldKeys.includes(col) && row[col]\r\n                            ? (() => {\r\n                                try {\r\n                                  const d = new Date(row[col]?.seconds * 1000 || row[col]);\r\n                                  return isNaN(d.getTime())\r\n                                    ? \"\"\r\n                                    : new Date(d.getTime() - d.getTimezoneOffset() * 60000)\r\n                                        .toISOString()\r\n                                        .split(\"T\")[0]; // yyyy-mm-dd (used for input)\r\n                                } catch {\r\n                                  return \"\";\r\n                                }\r\n                              })()\r\n                            : row[col] ?? \"\"\r\n                        }\r\n                        onChange={(e) => {\r\n                          const updated = [...records];\r\n                          const val = e.target.value;\r\n                          if (dateFieldKeys.includes(col)) {\r\n                            updated[rowIndex][col] = val\r\n                              ? new Date(val)\r\n                              : \"\";\r\n                          } else {\r\n                            updated[rowIndex][col] = val;\r\n                          }\r\n                          setRecords(updated);\r\n                        }}\r\n                        readOnly={[\"indentNumber\", \"createdAt\", \"createdBy\", \"isCurrent\", \"updateDescription\",\"versionDate\", \"expiredAt\"].includes(col)}\r\n                        style={{ width: \"140px\" }}\r\n                      />\r\n\r\n                      </td>\r\n                    ))}\r\n                    <td>\r\n                      <button className=\"save\" onClick={() => handleUpdate(row)}>\r\n                        Save\r\n                      </button>\r\n                      <button className=\"delete\" onClick={() => handleDelete(row.indentNumber)}>\r\n                        Delete\r\n                      </button>\r\n                    </td>\r\n                  </tr>\r\n                ))}\r\n              </tbody>\r\n\r\n            </table>\r\n          </div>\r\n        </>\r\n      )}\r\n\r\n      {history.length > 0 && (\r\n        <>\r\n          <hr />\r\n        <div style={{ display: \"flex\", justifyContent: \"space-between\", alignItems: \"center\" }}>\r\n  <h4>🔍 Full Version History</h4>\r\n  <div style={{ display: \"flex\", gap: \"20px\", alignItems: \"center\" }}>\r\n  <label>\r\n    <input type=\"checkbox\" checked={includeCustomer} onChange={(e) => setIncludeCustomer(e.target.checked)} />\r\n    Include Customer\r\n  </label>\r\n  <label>\r\n    <input type=\"checkbox\" checked={includeVendor} onChange={(e) => setIncludeVendor(e.target.checked)} />\r\n    Include Vendor\r\n  </label>\r\n  <label>\r\n    <input type=\"checkbox\" checked={includePOD} onChange={(e) => setIncludePOD(e.target.checked)} />\r\n    Include POD\r\n  </label>\r\n  <button onClick={handleExportToExcel} disabled={history.length === 0} className=\"export-button\">\r\n    ⬇️ Export Selected\r\n  </button>\r\n</div>\r\n\r\n</div>\r\n        <div className=\"table-scroll-x\">\r\n          <table>\r\n            <thead>\r\n              <tr>\r\n                {finalColumnOrder.map((col) => (\r\n                  <th key={col} className=\"tight-header\">{columnLabels[col] || col}</th>\r\n                ))}\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {[...history]\r\n                .sort((a, b) => {\r\n                  if (a.isCurrent) return -1;\r\n                  if (b.isCurrent) return 1;\r\n                  const aTime = a.expiredAt?.seconds || 0;\r\n                  const bTime = b.expiredAt?.seconds || 0;\r\n                  return bTime - aTime;\r\n                })\r\n                .map((row, i) => (\r\n                  <tr key={i}>\r\n                    {finalColumnOrder.map((col, j) => (\r\n                      <td key={j}>\r\n                        {dateFieldKeys.includes(col) && row[col]?.seconds\r\n                          ? new Date(row[col].seconds * 1000).toLocaleDateString(\"en-GB\")\r\n                          : typeof row[col] === \"object\" && row[col]?.seconds\r\n                            ? new Date(row[col].seconds * 1000).toLocaleString()\r\n                            : String(row[col] ?? \"\")}\r\n\r\n                      </td>\r\n                    ))}\r\n                  </tr>\r\n                ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n\r\n        </>\r\n      )}\r\n\r\n      {searchAttempted && !isSearching && records.length === 0 && history.length === 0 && (\r\n        <p style={{ textAlign: \"center\", color: \"#888\", marginTop: \"30px\" }}>No records to display.</p>\r\n      )}\r\n\r\n      <ToastContainer position=\"bottom-right\" autoClose={3000} />\r\n      <p style={{ textAlign: \"center\", marginTop: \"30px\", color: \"#666\" }}>© 2025 Fleet Billing System</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}